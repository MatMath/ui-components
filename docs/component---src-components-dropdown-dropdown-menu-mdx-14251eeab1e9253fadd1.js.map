{"version":3,"sources":["webpack:///../src/components/dropdown/DropdownMenu.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","DropdownMenu","parentName","__position","__code","__scope","Playground","Props","DropdownElement","Button","PhoneIcon","style","preview","height","React","dropdownIsOpen","setDropdownIsOpen","controllerRef","position","ref","nature","onClick","isOpen","dockingSide","placement","menuMaxHeight","dropdown1IsOpen","setDropdown1IsOpen","dropdown2IsOpen","setDropdown2IsOpen","controller1Ref","controller2Ref","display","justifyContent","alignItems","width","containerRef","button1Ref","button2Ref","background","alignSelf","isMDXComponent"],"mappings":"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","file":"component---src-components-dropdown-dropdown-menu-mdx-14251eeab1e9253fadd1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/oclero/Development/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { DropdownMenu } from '@components/dropdown/DropdownMenu';\nimport { DropdownElement } from '@components/dropdown/DropdownElement';\nimport { Button } from '@components/button/Button';\nimport { PhoneIcon } from '@components/icons';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dropdown-menu\"\n    }}>{`Dropdown Menu`}</h1>\n    <p>{`The Dropdown Menu can be used to display a menu of options that can be hidden.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={DropdownMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The dropdown can be defined alongside a controller. To display it correctly:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`both components must be wrapped in a container with a relative or absolute position`}</strong></li>\n      <li parentName=\"ul\">{`the controller's ref must be passed to the Dropdown`}</li>\n    </ul>\n    <Playground __position={1} __code={'() => {\\n  const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false)\\n  const controllerRef = React.useRef(null)\\n  return (\\n    <div style={{ position: \\'relative\\' }}>\\n      <div ref={controllerRef}>\\n        <Button\\n          nature=\\\"primary\\\"\\n          onClick={() => setDropdownIsOpen(!dropdownIsOpen)}\\n        >\\n          Click Me\\n        </Button>\\n      </div>\\n      <DropdownMenu\\n        isOpen={dropdownIsOpen}\\n        dockingSide=\\\"left\\\"\\n        placement=\\\"bottom\\\"\\n        controllerRef={controllerRef}\\n      >\\n        <DropdownElement>Hello</DropdownElement>\\n        <DropdownElement>Holà</DropdownElement>\\n        <DropdownElement>Salut</DropdownElement>\\n        <DropdownElement>Hallo</DropdownElement>\\n      </DropdownMenu>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      preview: {\n        height: '250px'\n      }\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false);\n        const controllerRef = React.useRef(null);\n        return <div style={{\n          position: 'relative'\n        }}>\n        <div ref={controllerRef}>\n          <Button nature='primary' onClick={() => setDropdownIsOpen(!dropdownIsOpen)} mdxType=\"Button\">\n            Click Me\n          </Button>\n        </div>\n        <DropdownMenu isOpen={dropdownIsOpen} dockingSide='left' placement='bottom' controllerRef={controllerRef} mdxType=\"DropdownMenu\">\n          <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n          <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n          <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n          <DropdownElement mdxType=\"DropdownElement\">Hallo</DropdownElement>\n        </DropdownMenu>\n      </div>;\n      }}\n    </Playground>\n    <p>{`Dropdown can be defined with a max-height, in which case it will have a scroll\nbar.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false)\\n  const controllerRef = React.useRef(null)\\n  return (\\n    <div style={{ position: \\'relative\\' }}>\\n      <div ref={controllerRef}>\\n        <Button\\n          nature=\\\"primary\\\"\\n          onClick={() => setDropdownIsOpen(!dropdownIsOpen)}\\n        >\\n          Click Me\\n        </Button>\\n      </div>\\n      <DropdownMenu\\n        isOpen={dropdownIsOpen}\\n        dockingSide=\\\"left\\\"\\n        placement=\\\"bottom\\\"\\n        controllerRef={controllerRef}\\n        menuMaxHeight=\\\"80\\\"\\n      >\\n        <DropdownElement>Hello</DropdownElement>\\n        <DropdownElement>Holà</DropdownElement>\\n        <DropdownElement>Salut</DropdownElement>\\n        <DropdownElement>Hallo</DropdownElement>\\n      </DropdownMenu>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      preview: {\n        height: '150px'\n      }\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false);\n        const controllerRef = React.useRef(null);\n        return <div style={{\n          position: 'relative'\n        }}>\n        <div ref={controllerRef}>\n          <Button nature='primary' onClick={() => setDropdownIsOpen(!dropdownIsOpen)} mdxType=\"Button\">\n            Click Me\n          </Button>\n        </div>\n        <DropdownMenu isOpen={dropdownIsOpen} dockingSide='left' placement='bottom' controllerRef={controllerRef} menuMaxHeight='80' mdxType=\"DropdownMenu\">\n          <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n          <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n          <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n          <DropdownElement mdxType=\"DropdownElement\">Hallo</DropdownElement>\n        </DropdownMenu>\n      </div>;\n      }}\n    </Playground>\n    <p>{`Dropdown can be defined as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`placed below or above their controllerRef,`}</li>\n      <li parentName=\"ul\">{`aligned on their controller left or right`}</li>\n    </ul>\n    <Playground __position={3} __code={'() => {\\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false)\\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false)\\n  const controller1Ref = React.useRef(null)\\n  const controller2Ref = React.useRef(null)\\n  return (\\n    <div\\n      style={{\\n        display: \\'flex\\',\\n        justifyContent: \\'space-between\\',\\n        alignItems: \\'center\\',\\n        width: \\'100%\\',\\n        height: \\'100%\\',\\n      }}\\n    >\\n      <div style={{ position: \\'relative\\' }}>\\n        <div ref={controller1Ref}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\\n          >\\n            TOP\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown1IsOpen}\\n          placement=\\\"top\\\"\\n          controllerRef={controller1Ref}\\n        >\\n          <DropdownElement>Hello</DropdownElement>\\n          <DropdownElement>Holà</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n      <div style={{ position: \\'relative\\' }}>\\n        <div ref={controller2Ref}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdown2IsOpen(!dropdown2IsOpen)}\\n          >\\n            RIGHT\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown2IsOpen}\\n          dockingSide=\\\"right\\\"\\n          controllerRef={controller2Ref}\\n        >\\n          <DropdownElement>Good Morning</DropdownElement>\\n          <DropdownElement>Konnichiha</DropdownElement>\\n          <DropdownElement>Guten Tag</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      preview: {\n        height: '300px'\n      }\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n        const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n        const controller1Ref = React.useRef(null);\n        const controller2Ref = React.useRef(null);\n        return <div style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          width: \"100%\",\n          height: \"100%\"\n        }}>\n    <div style={{\n            position: 'relative'\n          }}>\n      <div ref={controller1Ref}>\n        <Button nature='primary' onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)} mdxType=\"Button\">\n          TOP\n        </Button>\n      </div>\n      <DropdownMenu isOpen={dropdown1IsOpen} placement='top' controllerRef={controller1Ref} mdxType=\"DropdownMenu\">\n        <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n      </DropdownMenu>\n    </div>\n    <div style={{\n            position: 'relative'\n          }}>\n      <div ref={controller2Ref}>\n        <Button nature='primary' onClick={() => setDropdown2IsOpen(!dropdown2IsOpen)} mdxType=\"Button\">\n          RIGHT\n        </Button>\n      </div>\n      <DropdownMenu isOpen={dropdown2IsOpen} dockingSide='right' controllerRef={controller2Ref} mdxType=\"DropdownMenu\">\n        <DropdownElement mdxType=\"DropdownElement\">Good Morning</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Konnichiha</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Guten Tag</DropdownElement>\n      </DropdownMenu>\n    </div>\n  </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"position-within-a-container\"\n    }}>{`Position within a container`}</h2>\n    <p>{`Dropdown computes its ideal position within a container:\nif you pass `}<inlineCode parentName=\"p\">{`top`}</inlineCode>{` as the placement prop but there is not enough space within the container,\nthe menu position will be overwritten to `}<inlineCode parentName=\"p\">{`bottom`}</inlineCode>{`.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false)\\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false)\\n  const containerRef = React.useRef(null)\\n  const button1Ref = React.useRef(null)\\n  const button2Ref = React.useRef(null)\\n  return (\\n    <div\\n      ref={containerRef}\\n      style={{\\n        height: \\'250px\\',\\n        display: \\'flex\\',\\n        background: \\'ghostwhite\\',\\n        justifyContent: \\'space-between\\',\\n      }}\\n    >\\n      <div style={{ position: \\'relative\\', height: \\'fit-content\\' }}>\\n        <div ref={button1Ref}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown1IsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"top\\\"\\n          containerRef={containerRef}\\n          controllerRef={button1Ref}\\n        >\\n          <DropdownElement>Hello</DropdownElement>\\n          <DropdownElement>Holà</DropdownElement>\\n          <DropdownElement>Salut</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n      <div\\n        style={{\\n          position: \\'relative\\',\\n          height: \\'fit-content\\',\\n          alignSelf: \\'flex-end\\',\\n        }}\\n      >\\n        <div ref={button2Ref}>\\n          <Button\\n            nature=\\\"secondary\\\"\\n            onClick={() => {\\n              setDropdown2IsOpen(!dropdown2IsOpen)\\n            }}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown2IsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"bottom\\\"\\n          containerRef={containerRef}\\n          controllerRef={button2Ref}\\n        >\\n          <DropdownElement>Hello</DropdownElement>\\n          <DropdownElement>Holà</DropdownElement>\\n          <DropdownElement>Salut</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n        const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n        const containerRef = React.useRef(null);\n        const button1Ref = React.useRef(null);\n        const button2Ref = React.useRef(null);\n        return <div ref={containerRef} style={{\n          height: '250px',\n          display: 'flex',\n          background: 'ghostwhite',\n          justifyContent: 'space-between'\n        }}>\n        <div style={{\n            position: 'relative',\n            height: 'fit-content'\n          }}>\n          <div ref={button1Ref}>\n            <Button nature='primary' onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)} mdxType=\"Button\">\n              Click Me\n            </Button>\n          </div>\n          <DropdownMenu isOpen={dropdown1IsOpen} dockingSide='left' placement='top' containerRef={containerRef} controllerRef={button1Ref} mdxType=\"DropdownMenu\">\n            <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n          </DropdownMenu>\n        </div>\n        <div style={{\n            position: 'relative',\n            height: 'fit-content',\n            alignSelf: 'flex-end'\n          }}>\n          <div ref={button2Ref}>\n            <Button nature='secondary' onClick={() => {\n                setDropdown2IsOpen(!dropdown2IsOpen);\n              }} mdxType=\"Button\">\n              Click Me\n            </Button>\n          </div>\n          <DropdownMenu isOpen={dropdown2IsOpen} dockingSide='left' placement='bottom' containerRef={containerRef} controllerRef={button2Ref} mdxType=\"DropdownMenu\">\n            <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n          </DropdownMenu>\n        </div>\n      </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}