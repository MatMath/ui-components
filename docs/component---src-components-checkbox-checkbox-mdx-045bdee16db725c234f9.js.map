{"version":3,"sources":["webpack:///../src/utility/cssUtils.ts","webpack:///../src/components/checkbox/Checkbox.tsx","webpack:///../src/components/checkbox/CheckboxDemo.tsx","webpack:///../src/components/checkbox/Checkbox.mdx","webpack:///../src/components/checkbox/Checkbox.module.scss"],"names":["getClassNames","result","classes","forEach","value","push","Object","entries","key","join","CheckboxContainer","className","children","styles","checkboxContainer","HiddenCheckbox","checked","otherProps","hiddenCheckBox","type","StyledCheckbox","disabled","styledCheckbox","Checkmark","checkmark","width","height","viewBox","fill","xmlns","d","strokeLinecap","strokeLinejoin","Checkbox","props","CheckboxDemo","React","isChecked","setIsChecked","onChange","e","currentTarget","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","parentName","__position","__code","__scope","Playground","Props","style","display","flexDirection","justifyContent","readOnly","defaultChecked","isMDXComponent","module","exports"],"mappings":"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","file":"component---src-components-checkbox-checkbox-mdx-045bdee16db725c234f9.js","sourcesContent":["interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (value) {\n      if (typeof value === 'string') {\n        result.push(value);\n      } else {\n        Object.entries(value).forEach(([key, value]) => {\n          if (value) {\n            result.push(key);\n          }\n        });\n      }\n    }\n  });\n  return result.join(' ');\n};\n","import * as React from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport styles from './Checkbox.module.scss';\n\ninterface CheckboxContainerProps {\n  className: string | undefined;\n  children: React.ReactNode;\n}\n\nconst CheckboxContainer = ({ className, children }: CheckboxContainerProps) => {\n  return (\n    <label className={getClassNames(styles.checkboxContainer, className || '')}>\n      {children}\n    </label>\n  );\n};\n\nconst HiddenCheckbox = ({\n  checked = false,\n  ...otherProps\n}: React.InputHTMLAttributes<HTMLInputElement>) => {\n  return (\n    <input\n      className={styles.hiddenCheckBox}\n      type='checkbox'\n      checked={checked}\n      {...otherProps}\n    />\n  );\n};\n\ninterface StyledCheckboxProps {\n  checked?: boolean;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nconst StyledCheckbox = ({\n  checked = false,\n  disabled = false,\n  children\n}: StyledCheckboxProps) => {\n  const className = getClassNames(styles.styledCheckbox, {\n    [styles.checked]: checked,\n    [styles.disabled]: disabled\n  });\n  return <div className={className}>{children}</div>;\n};\n\nconst Checkmark = () => {\n  return (\n    <svg\n      className={styles.checkmark}\n      width='20'\n      height='20'\n      viewBox='0 0 20 20'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path\n        className='checkmark__check'\n        d='M5.5 10L8.45928 13L14.4796 7'\n        strokeLinecap='round'\n        strokeLinejoin='round'\n      />\n    </svg>\n  );\n};\n\nexport const Checkbox = ({\n  className,\n  checked,\n  disabled,\n  children,\n  ...props\n}: React.InputHTMLAttributes<HTMLInputElement>) => (\n  <CheckboxContainer className={className}>\n    <HiddenCheckbox checked={checked} {...props} />\n    <StyledCheckbox checked={checked} disabled={disabled}>\n      <Checkmark />\n    </StyledCheckbox>\n  </CheckboxContainer>\n);\n","import * as React from 'react';\nimport { Checkbox } from './Checkbox';\n\nexport const CheckboxDemo = () => {\n  const [isChecked, setIsChecked] = React.useState(false);\n  return (\n    <div>\n      <Checkbox\n        checked={isChecked}\n        onChange={e => setIsChecked(e.currentTarget.checked)}\n      />\n    </div>\n  );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/alexandre/Documents/Programmation/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Checkbox } from './Checkbox';\nimport { CheckboxDemo } from './CheckboxDemo';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <p>{`A checkbox component`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show the `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{` in its checked and unchecked states, both in enabled and disabled modes:`}</p>\n    <Playground __position={1} __code={'<Checkbox readOnly />\\n<Checkbox defaultChecked checked readOnly />\\n<Checkbox disabled readOnly />\\n<Checkbox disabled checked readOnly />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      CheckboxDemo,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <Checkbox readOnly mdxType=\"Checkbox\" />\n  <Checkbox defaultChecked checked readOnly mdxType=\"Checkbox\" />\n  <Checkbox disabled readOnly mdxType=\"Checkbox\" />\n  <Checkbox disabled checked readOnly mdxType=\"Checkbox\" />\n    </Playground>\n    <p>{`The example below shows an interactive `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{`.`}</p>\n    <Playground __position={2} __code={'<CheckboxDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      CheckboxDemo,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <CheckboxDemo mdxType=\"CheckboxDemo\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkboxContainer\":\"Checkbox-module--checkboxContainer--36jlJ\",\"styledCheckbox\":\"Checkbox-module--styledCheckbox--3_wk1\",\"hiddenCheckBox\":\"Checkbox-module--hiddenCheckBox--32PvW\",\"checked\":\"Checkbox-module--checked--2Usnn\",\"checkmark\":\"Checkbox-module--checkmark--zYhQP\",\"disabled\":\"Checkbox-module--disabled--3_Gxt\",\"fill\":\"Checkbox-module--fill--bAwJ-\",\"scale\":\"Checkbox-module--scale--3-MlL\",\"stroke\":\"Checkbox-module--stroke--hoxho\"};"],"sourceRoot":""}