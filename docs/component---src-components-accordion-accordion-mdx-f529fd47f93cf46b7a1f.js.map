{"version":3,"sources":["webpack:///../src/components/accordion/Accordion.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","Accordion","Section","__position","__code","__scope","Playground","Props","style","display","flexDirection","backgroundColor","padding","width","maxOneSectionOpen","opened","label","height","fontSize","locked","toggable","open","header","textAlign","cursor","paddingTop","isMDXComponent"],"mappings":"ygBASO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,UAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,aADR,aAGA,4EACA,0EACA,sBACE,kBAAIC,WAAW,MAAf,uEACA,kBAAIA,WAAW,MAAf,gNACA,kBAAIA,WAAW,MAAf,oEAEF,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,wBADR,wBAGA,YAAC,IAAD,CAAOC,GAAIC,IAAWH,QAAQ,UAC9B,iBAAQ,CACN,GAAM,+BADR,gCAGA,YAAC,IAAD,CAAOE,GAAIE,IAASJ,QAAQ,UAC5B,iBAAQ,CACN,GAAM,SADR,SAGA,mNACA,YAAC,IAAD,CAAYK,WAAY,EAAGC,OAAQ,0zCAAq0CC,SAAO,GAC72CR,QACAH,kBACAY,eACAC,UACAN,cACAC,aAN62C,gBAO72CR,IAP62C,EAQ72CH,eAR62C,GAS52CiB,MAAO,CACRC,QAAS,OACTC,cAAe,OACdZ,QAAQ,cACT,mBAAKU,MAAO,CACVG,gBAAiB,UACjBC,QAAS,OACTC,MAAO,SAEb,YAAC,IAAD,CAAWC,mBAAiB,EAACC,OAAQ,CAAC,GAAIjB,QAAQ,aAC1C,YAAC,IAAUI,QAAX,CAAmBc,MAAM,2CACjC,mBAAKR,MAAO,CACAS,OAAQ,MADpB,yGAIE,uBAJF,IAIS,uBAJT,6LASQ,YAAC,IAAUf,QAAX,CAAmBc,MAAM,sCACjC,mBAAKR,MAAO,CACAS,OAAQ,IACRC,SAAU,QAFtB,qCAQQ,YAAC,IAAUhB,QAAX,CAAmBc,MAAM,0CAA0CG,QAAM,GACjF,mBAAKX,MAAO,CACAS,OAAQ,MADpB,yEAOQ,YAAC,IAAUf,QAAX,CAAmBc,MAAM,4CAA4CG,QAAM,EAACC,UAAU,GAC9F,mBAAKZ,MAAO,CACAS,OAAQ,MADpB,2CAUE,uHACA,YAAC,IAAD,CAAYd,WAAY,EAAGC,OAAQ,4RAAoSC,SAAO,GAC5UR,QACAH,kBACAY,eACAC,UACAN,cACAC,aAN4U,gBAO5UR,IAP4U,EAQ5UH,eAR4U,GAS3UiB,MAAO,CACRC,QAAS,OACTC,cAAe,OACdZ,QAAQ,cACT,mBAAKU,MAAO,CACVG,gBAAiB,UACjBC,QAAS,OACTC,MAAO,SAEb,YAAC,IAAUX,QAAX,CAAmBc,MAAM,iCAEvB,mBAAKR,MAAO,CACJS,OAAQ,MADhB,8DAQA,sHACA,YAAC,IAAD,CAAYd,WAAY,EAAGC,OAAQ,kfAAmgBC,SAAO,GAC3iBR,QACAH,kBACAY,eACAC,UACAN,cACAC,aAN2iB,gBAO3iBR,IAP2iB,EAQ3iBH,eAR2iB,GAS1iBiB,MAAO,CACRC,QAAS,OACTC,cAAe,OACdZ,QAAQ,cACT,mBAAKU,MAAO,CACVG,gBAAiB,UACjBC,QAAS,OACTC,MAAO,SAEb,YAAC,IAAUX,QAAX,CAAmBmB,MAAM,EAAOC,OAAQ,mBAAKd,MAAO,CAC5CK,MAAO,OACPU,UAAW,SACXC,OAAQ,UACRP,OAAQ,OACRQ,WAAY,SALoB,0DAShC,mBAAKjB,MAAO,CACVS,OAAQ,MADV,c,+MAYVtB,EAAW+B,gBAAiB","file":"component---src-components-accordion-accordion-mdx-f529fd47f93cf46b7a1f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/oclero/Development/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Accordion } from '@components/accordion/Accordion';\nimport { Section } from '@components/accordion/Section';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"accordion\"\n    }}>{`Accordion`}</h1>\n    <p>{`An Accordion component built by Accordion.Sections.`}</p>\n    <p>{`Notes on using the Accordion component wrapper : `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Wrap the Accordion.Sections and take control over its open states. `}</li>\n      <li parentName=\"ul\">{`When using the Accordion component use the \"opened\" prop on the Accordion component to specify the indexes(indexed by 0) of the Sections you want to be opened instead of using the open prop on the Section`}</li>\n      <li parentName=\"ul\">{`If maxOneSectionOpen is passed, it overrides allSectionsOpened.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"accordion-properties\"\n    }}>{`Accordion Properties`}</h3>\n    <Props of={Accordion} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"accordionsection-properties\"\n    }}>{`Accordion.Section Properties`}</h3>\n    <Props of={Section} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`In this example, we have Accordion.Section's wrapped in an Accordion Component. The Accordion then has fully control over the open states of its sections based on its prop configuration.`}</p>\n    <Playground __position={2} __code={'<div style={{ backgroundColor: \\'#F5F7F7\\', padding: \\'10px\\', width: \\'100%\\' }}>\\n  <Accordion maxOneSectionOpen opened={[1]}>\\n    <Accordion.Section label=\\\"Sections can be wrapped in an Accordion\\\">\\n      <div style={{ height: 150 }}>\\n        The Accordion will then have say of when its sections can be\\n        opened/closed based on its configuration.\\n        <br /> <br />\\n        For example, if you want behaviour like this Accordion where it\\n        enforces only one Section to be open at a time you can set the\\n        \\\"maxOneSectionOpen\\\" to true. Try opening another section!\\n      </div>\\n    </Accordion.Section>\\n\\n    <Accordion.Section label=\\\"Have as many sections as you want!\\\">\\n      <div style={{ height: 250, fontSize: \\'7px\\' }}>\\n        Up to you to define the content.\\n      </div>\\n    </Accordion.Section>\\n\\n    <Accordion.Section label=\\\"A sections interactivitiy can be locked\\\" locked>\\n      <div style={{ height: 100 }}>\\n        This content is viewable but no pointer-events will be passed to it.\\n      </div>\\n    </Accordion.Section>\\n\\n    <Accordion.Section\\n      label=\\\"Sections can also be blocked from opening\\\"\\n      locked\\n      toggable={false}\\n    >\\n      <div style={{ height: 100 }}>This content is not accessbile yet.</div>\\n    </Accordion.Section>\\n  </Accordion>\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Accordion,\n      Section,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row'\n    }} mdxType=\"Playground\">\n      <div style={{\n        backgroundColor: \"#F5F7F7\",\n        padding: \"10px\",\n        width: \"100%\"\n      }}>\n  <Accordion maxOneSectionOpen opened={[1]} mdxType=\"Accordion\">\n          <Accordion.Section label=\"Sections can be wrapped in an Accordion\">\n  <div style={{\n              height: 150\n            }}>\n    The Accordion will then have say of when its sections can be opened/closed based on its configuration.\n    <br /> <br />\n    For example, if you want behaviour like this Accordion where it enforces only one Section to be open at a time you can set the \"maxOneSectionOpen\" to true. Try opening another section!\n  </div>\n          </Accordion.Section>\n\n          <Accordion.Section label=\"Have as many sections as you want!\">\n  <div style={{\n              height: 250,\n              fontSize: \"7px\"\n            }}>\n    Up to you to define the content.\n  </div>\n          </Accordion.Section>\n\n          <Accordion.Section label=\"A sections interactivitiy can be locked\" locked>\n  <div style={{\n              height: 100\n            }}>\n    This content is viewable but no pointer-events will be passed to it.\n  </div>\n          </Accordion.Section>\n\n          <Accordion.Section label=\"Sections can also be blocked from opening\" locked toggable={false}>\n  <div style={{\n              height: 100\n            }}>\n    This content is not accessbile yet.\n  </div>\n          </Accordion.Section>\n  </Accordion>\n      </div>\n  \n    </Playground>\n    <p>{`Here we have just an Accordion.Section. It is fully in control of when it is opened or closed.`}</p>\n    <Playground __position={3} __code={'<div style={{ backgroundColor: \\'#F5F7F7\\', padding: \\'10px\\', width: \\'100%\\' }}>\\n  <Accordion.Section label=\\\"Sections can exist standalone\\\">\\n    <div style={{ height: 100 }}>\\n      You don\\'t always need to wrap Sections in an Accordion!\\n    </div>\\n  </Accordion.Section>\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Accordion,\n      Section,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row'\n    }} mdxType=\"Playground\">\n      <div style={{\n        backgroundColor: \"#F5F7F7\",\n        padding: \"10px\",\n        width: \"100%\"\n      }}>\n  <Accordion.Section label=\"Sections can exist standalone\">\n    \n    <div style={{\n            height: 100\n          }}>\n      You don't always need to wrap Sections in an Accordion!\n    </div>\n  </Accordion.Section>\n      </div>\n    </Playground>\n    <p>{`You can use the \"header\" prop on the Accordion.Section to add a custom Title for the section.`}</p>\n    <Playground __position={4} __code={'<div style={{ backgroundColor: \\'#F5F7F7\\', padding: \\'10px\\', width: \\'100%\\' }}>\\n  <Accordion.Section\\n    open={false}\\n    header={\\n      <div\\n        style={{\\n          width: \\'100%\\',\\n          textAlign: \\'center\\',\\n          cursor: \\'pointer\\',\\n          height: \\'40px\\',\\n          paddingTop: \\'15px\\',\\n        }}\\n      >\\n        Can also define a completely custom Header as well ðŸŒ´\\n      </div>\\n    }\\n  >\\n    <div style={{ height: 100 }}>ðŸŒ²ðŸŒ²ðŸŒ²</div>\\n  </Accordion.Section>\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Accordion,\n      Section,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row'\n    }} mdxType=\"Playground\">\n      <div style={{\n        backgroundColor: \"#F5F7F7\",\n        padding: \"10px\",\n        width: \"100%\"\n      }}>\n  <Accordion.Section open={false} header={<div style={{\n          width: \"100%\",\n          textAlign: \"center\",\n          cursor: \"pointer\",\n          height: \"40px\",\n          paddingTop: \"15px\"\n        }}>\n        Can also define a completely custom Header as well ðŸŒ´\n      </div>}>\n          <div style={{\n            height: 100\n          }}>\n  ðŸŒ²ðŸŒ²ðŸŒ²\n          </div>\n  </Accordion.Section>\n      </div>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}