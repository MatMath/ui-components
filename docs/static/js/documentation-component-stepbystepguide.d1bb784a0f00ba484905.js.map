{"version":3,"sources":["/Users/mamiot/Documents/Repositories/dashlane/ui-components/documentation/COMPONENT_STEPBYSTEPGUIDE.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4VAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,+BADR,+BAGA,yUAAwT,0BAAYC,WAAW,KAAvB,UAAxT,cACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,sBACE,kBAAIA,WAAW,MAAf,6DAAkF,+BAAGA,WAAW,MAAS,CACrG,KAAQ,sBADsE,kBAAlF,qCAEiE,+BAAGA,WAAW,MAAS,CACpF,KAAQ,8CADqD,cAFjE,MAMF,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,+BAEL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,oCAAyD,0BAAYA,WAAW,MAAvB,cAAzD,oCAAqJ,+BAAGA,WAAW,MAAS,CACxK,KAAQ,uDADyI,cAArJ,KAGA,kBAAIA,WAAW,MAAf,qEAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,4SAiBL,8BACE,iBAAGA,WAAW,cAAd,+FAA2H,0BAAYA,WAAW,KAAvB,iBAA3H,uDAA4O,0BAAYA,WAAW,KAAvB,cAA5O,YAEF,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,SAA8B,0BAAYA,WAAW,MAAvB,QAA9B,SAAyF,0BAAYA,WAAW,MAAvB,sBAAzF,0CAAmM,0BAAYA,WAAW,MAAvB,UAAnM,eAAsQ,0BAAYA,WAAW,MAAvB,cAAtQ,QAAsU,0BAAYA,WAAW,MAAvB,cAAtU,eAA6Y,0BAAYA,WAAW,MAAvB,kBAA7Y,uCAAgf,0BAAYA,WAAW,MAAvB,gBAAhf,2DAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+uCA2DL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,sGAAiH,0BAAYA,WAAW,MAAvB,iBAAjH,OAAmL,0BAAYA,WAAW,MAAvB,2BAAnL,gDAAwS,0BAAYA,WAAW,MAAvB,UAAxS,aAAyW,0BAAYA,WAAW,MAAvB,gBAAzW,uDAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,gQAWL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,kDAAuE,0BAAYA,WAAW,MAAvB,QAAvE,oBAA6I,0BAAYA,WAAW,MAAvB,cAA7I,6CAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qeAsCL,gCAAe,+BAAGA,WAAW,KAAQ,CACjC,KAAQ,0CADG,mBAAf,0EAGA,8BACE,iBAAGA,WAAW,cAAd,wIAA0J,0BAAYA,WAAW,KAAvB,kBAA1J,QAA6N,0BAAYA,WAAW,KAAvB,mBAA7N,qIAEF,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,oDAAyE,+BAAGA,WAAW,MAAS,CAC5F,KAAQ,uBAD6D,QAAzE,QAE0B,+BAAGA,WAAW,MAAS,CAC7C,KAAQ,uCADc,UAF1B,kDAIsE,0BAAYA,WAAW,MAAvB,qBAExE,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,0jCA6CL,mDAAkC,0BAAYA,WAAW,KAAvB,QAAlC,iKACA,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,gK,gMAMNJ,EAAWK,gBAAiB","file":"static/js/documentation-component-stepbystepguide.c66aaf81.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"create-your-first-component\"\n    }}>{`Create your first component`}</h1>\n    <p>{`Are you working on a feature that requires a new component? Do you want to migrate a duplicated component into the component library? Do you want to have fun with Dashlane Design System? You are in the right place! Here you'll find a step by step guide to add a new component. In this example we create a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component`}</p>\n    <h2 {...{\n      \"id\": \"add-your-component\"\n    }}>{`Add your component`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`As a first step, create a folder for your component under `}<a parentName=\"li\" {...{\n          \"href\": \"../src/components\"\n        }}>{`src/components`}</a>{`. Naming convention for folder is `}<a parentName=\"li\" {...{\n          \"href\": \"https://en.wiktionary.org/wiki/kebab_case\"\n        }}>{`kebab-case`}</a>{`.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`src/components/my-button\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Create a file for your component `}<inlineCode parentName=\"li\">{`Button.tsx`}</inlineCode>{`. Naming convention for files is `}<a parentName=\"li\" {...{\n          \"href\": \"https://en.wiktionary.org/wiki/Pascal_case#English\"\n        }}>{`PascalCase`}</a>{`.`}</li>\n      <li parentName=\"ol\">{`Add a props interface and a functional component implementation.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`import * as React from 'react';\n\ntype ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  size?: ButtonSize;\n}\n\nexport const Button = (props: ButtonProps) => {\n  return <button {...props}></button>;\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If your file is larger than ~100 lines you can split it to subcomponents and move them to a `}<inlineCode parentName=\"p\">{`subcomponents`}</inlineCode>{` folder, and move interfaces to separate files in a `}<inlineCode parentName=\"p\">{`interfaces`}</inlineCode>{` folder`}</p>\n    </blockquote>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`Add a `}<inlineCode parentName=\"li\">{`Sass`}</inlineCode>{` file `}<inlineCode parentName=\"li\">{`Button.module.scss`}</inlineCode>{` and add the style of your button. Use `}<inlineCode parentName=\"li\">{`colors`}</inlineCode>{` defined in `}<inlineCode parentName=\"li\">{`src/colors`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`typography`}</inlineCode>{` defined in `}<inlineCode parentName=\"li\">{`src/typography`}</inlineCode>{` to use Design System tokens. Using `}<inlineCode parentName=\"li\">{`*.module.css`}</inlineCode>{` will enable the CSS module transpilation on this file`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@use '../../colors/colors';\n@use '../../typography/typography';\n\n.button {\n  border-width: 1px;\n  border-style: solid;\n  display: flex;\n  flex-direction: row;\n  border-radius: 4px;\n\n  background-color: colors.$primary-background;\n  border-color: colors.$primary-border;\n  color: colors.$primary-foreground;\n\n  &:hover:enabled,\n  &:focus {\n    cursor: pointer;\n    outline: none;\n    background-color: colors.$primary-background-hover;\n    border-color: colors.$primary-border-hover;\n    color: colors.$primary-foreground-hover;\n  }\n\n  &:active:enabled {\n    background-color: colors.$primary-background-active;\n    border-color: colors.$primary-border-active;\n    color: colors.$primary-foreground-active;\n  }\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: default;\n    background-color: colors.$primary-background-disabled;\n    border-color: colors.$primary-border-disabled;\n    color: colors.$primary-foreground-disabled;\n  }\n}\n\n/** Sizes **/\n.small {\n  padding: 8px 16px;\n  height: 32px;\n  @include typography.button-small;\n}\n\n.medium {\n  padding: 10px 16px;\n  height: 40px;\n  @include typography.button-medium;\n}\n\n.large {\n  padding: 14px 24px;\n  height: 48px;\n  @include typography.button-large;\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`Let's style your component üé®. Add classNames to elements in your component. You can use `}<inlineCode parentName=\"li\">{`getClassNames`}</inlineCode>{` in `}<inlineCode parentName=\"li\">{`src/utility/cssUtils.ts`}</inlineCode>{` to build a className based on props. Import `}<inlineCode parentName=\"li\">{`styles`}</inlineCode>{` from the `}<inlineCode parentName=\"li\">{`.module.scss`}</inlineCode>{` to navigate the stylesheet as a javascript object`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`import {getClassNames} from '@utility/cssUtils'\nimport styles from './Button.module.scss'\n\nexport const Button = (props: ButtonProps) => {\n  return <button {getClassNames(styles.button, styles[props.size ?? \"medium\"]) {...props}></button>;\n};\n`}</code></pre>\n    <ol {...{\n      \"start\": 6\n    }}>\n      <li parentName=\"ol\">{`You are almost done! Add a documentation file (`}<inlineCode parentName=\"li\">{`docz`}</inlineCode>{` file): create a `}<inlineCode parentName=\"li\">{`Button.mdx`}</inlineCode>{` file and add your component description`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`---\nname: Button\nmenu: Components\n---\n\nimport { Playground, Props } from 'docz';\nimport { Button } from './Button';\n\n# Button\n\nA button component\n\n## Properties\n\n<Props of={Button} />\n\n## Usage\n\n### Basic usage\n\nExamples below show usage of the Button\n\n<Playground\nstyle={{\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  }}>\n\n  <Button />\n\n  <Button size='small' />\n\n  <Button nature='large'/>\n</Playground>\n`}</code></pre>\n    <p>{`Now you `}<a parentName=\"p\" {...{\n        \"href\": \"../CONTRIBUTING.md#developing-on-docz\"\n      }}>{`can launch docz`}</a>{` and see your working component in the live documentation üéâ`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üêûdocz has a known bug with props cache and TypeScript, sometimes Props aren't displayed in the documentation. docz tasks (`}<inlineCode parentName=\"p\">{`yarn docoz:dev`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`yarn docz:build`}</inlineCode>{`) will clean up docz cache automatically, but if you experience this while docz is runing in watch mode, kill it and relaunch it`}</p>\n    </blockquote>\n    <ol {...{\n      \"start\": 7\n    }}>\n      <li parentName=\"ol\">{`Last but not least, let's add some tests. We use `}<a parentName=\"li\" {...{\n          \"href\": \"https://jestjs.io/\"\n        }}>{`jest`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"https://enzymejs.github.io/enzyme/\"\n        }}>{`Enzyme`}</a>{` to run snapshot and unit tests. Create a file `}<inlineCode parentName=\"li\">{`Button.spec.tsx`}</inlineCode></li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`import * as React from 'react';\nimport { mount } from 'enzyme';\nimport 'jest-styled-components';\nimport { Button, ButtonProps } from './Button';\n\ndescribe('<Button>', () => {\n  let wrapper: ReactWrapper;\n\n  const createWrapper = ({ nature, size, children }: ButtonProps) => {\n    return mount(\n      <Button nature={nature} size={size}>\n        {children}\n      </Button>\n    );\n  };\n\n  describe('Global render', () => {\n    it('should render default', () => {\n      wrapper = createWrapper({});\n      expect(wrapper).toMatchSnapshot();\n      expect(wrapper.exists('.root.medium')).toEqual(true);\n    });\n\n    it('should render small', () => {\n      wrapper = createWrapper({\n        size: 'small'\n      });\n      expect(wrapper).toMatchSnapshot();\n      expect(wrapper.exists('.root.small')).toEqual(true);\n    });\n\n    it('should render large', () => {\n      wrapper = createWrapper({\n        size: 'large'\n      });\n      expect(wrapper).toMatchSnapshot();\n      expect(wrapper.exists('.root.large')).toEqual(true);\n    });\n  });\n});\n`}</code></pre>\n    <p>{`The first time you run it, `}<inlineCode parentName=\"p\">{`jest`}</inlineCode>{` will create a snapshot of your component that will be used as a reference for further test runs to make sure your component's UI doesn't change unexpectedly`}</p>\n    <ol {...{\n      \"start\": 8\n    }}>\n      <li parentName=\"ol\">{`And now you're done! Congrats, you created your first design system component. You can commit your work, open a PR and have a ‚òïÔ∏è or üç∫`}</li>\n    </ol>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}