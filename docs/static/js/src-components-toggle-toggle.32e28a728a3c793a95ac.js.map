{"version":3,"sources":["/Users/mamiot/Documents/Repositories/dashlane/ui-components/src/components/toggle/Toggle.tsx","/Users/mamiot/Documents/Repositories/dashlane/ui-components/src/components/toggle/ToggleDemo.tsx","/Users/mamiot/Documents/Repositories/dashlane/ui-components/src/components/toggle/Toggle.mdx","/Users/mamiot/Documents/Repositories/dashlane/ui-components/src/components/toggle/Toggle.module.scss","/Users/mamiot/Documents/Repositories/dashlane/ui-components/src/utility/cssUtils.ts"],"names":["HiddenInput","props","checked","inputProps","labelOn","labelOff","className","styles","hiddenInput","type","defaultChecked","Groove","getClassNames","groove","disabled","children","Handle","handle","Label","text","Toggle","root","onChange","ToggleDemo","React","isChecked","setIsChecked","e","currentTarget","layoutProps","MDXLayout","MDXContent","components","mdxType","of","parentName","__position","__code","__scope","this","Playground","Props","style","display","flexDirection","justifyContent","pointerEvents","isMDXComponent","module","exports","result","classes","forEach","value","push","Object","entries","key","join"],"mappings":"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","file":"static/js/src-components-toggle-toggle.3fbc9977.js","sourcesContent":["import * as React from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport styles from './Toggle.module.scss';\n\ninterface ToggleProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  labelOff?: string;\n  labelOn?: string;\n}\n\nconst HiddenInput: React.FC<ToggleProps> = props => {\n  const {\n    checked,\n    labelOn: labelon,\n    labelOff: labeloff,\n    ...inputProps\n  } = props;\n  return (\n    <input\n      className={styles.hiddenInput}\n      type='checkbox'\n      {...inputProps}\n      defaultChecked={checked}\n    />\n  );\n};\n\nconst Groove: React.FC<ToggleProps> = props => {\n  return (\n    <div\n      className={getClassNames(styles.groove, {\n        [styles.checked]: props.checked,\n        [styles.disabled]: props.disabled\n      })}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nconst Handle: React.FC<ToggleProps> = props => {\n  return (\n    <div\n      className={getClassNames(styles.handle, {\n        [styles.checked]: props.checked,\n        [styles.disabled]: props.disabled\n      })}\n    />\n  );\n};\n\nconst Label: React.FC<ToggleProps> = props => {\n  return (props.checked && props.labelOn) ||\n    (!props.checked && props.labelOff) ? (\n    <span className={styles.text}>\n      {props.checked ? props.labelOn : props.labelOff}\n    </span>\n  ) : null;\n};\n\nexport const Toggle: React.FC<ToggleProps> = props => {\n  return (\n    <label\n      className={getClassNames(styles.root, {\n        [styles.checked]: props.checked,\n        [styles.disabled]: props.disabled\n      })}\n    >\n      <HiddenInput {...props} onChange={props.onChange} />\n      <Groove {...props}>\n        <Handle {...props} />\n      </Groove>\n      <Label {...props} />\n    </label>\n  );\n};\n","import * as React from 'react';\nimport { Toggle } from './Toggle';\n\nexport const ToggleDemo = () => {\n  const [isChecked, setIsChecked] = React.useState(false);\n  return (\n    <div>\n      <Toggle\n        labelOn='Activated'\n        labelOff='Deactivated'\n        checked={isChecked}\n        onChange={e => setIsChecked(e.currentTarget.checked)}\n      />\n    </div>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from './Toggle';\nimport { ToggleDemo } from './ToggleDemo';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <p>{`An On/Off checkable toggle component.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Toggle} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below shows the `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{` in its checked and unchecked states, both in enabled and disabled modes:`}</p>\n    <Playground __position={1} __code={'<Toggle />\\n<Toggle checked />\\n<Toggle disabled />\\n<Toggle disabled checked />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      ToggleDemo\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      pointerEvents: 'none'\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\" />\n  <Toggle checked mdxType=\"Toggle\" />\n  <Toggle disabled mdxType=\"Toggle\" />\n  <Toggle disabled checked mdxType=\"Toggle\" />\n    </Playground>\n    <p>{`The example below shows an interactive `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{`.`}</p>\n    <Playground __position={2} __code={'<ToggleDemo />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      ToggleDemo\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <ToggleDemo mdxType=\"ToggleDemo\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Toggle_root__3KLjs\",\"handle\":\"Toggle_handle__9XSnI\",\"checked\":\"Toggle_checked__3dIX1\",\"groove\":\"Toggle_groove__Fd-XI\",\"disabled\":\"Toggle_disabled__31vLU\",\"hiddenInput\":\"Toggle_hiddenInput__A1LPy\",\"text\":\"Toggle_text__IDbPZ\"};","interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (typeof value === 'string') {\n      result.push(value);\n    } else {\n      Object.entries(value).forEach(([key, value]) => {\n        if (value) {\n          result.push(key);\n        }\n      });\n    }\n  });\n  return result.join(' ');\n};\n"],"sourceRoot":""}