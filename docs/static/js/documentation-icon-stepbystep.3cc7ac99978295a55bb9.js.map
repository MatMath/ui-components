{"version":3,"sources":["/home/oclero/Development/ui-components-github/documentation/ICON_STEPBYSTEP.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kVAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,4KAA4J,0BAAYC,WAAW,KAAvB,mBAA5J,yFACA,sBACE,kBAAIA,WAAW,MAAf,oBAAyC,0BAAYA,WAAW,MAAvB,OAAzC,6BAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gXAML,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,sCAA2D,0BAAYA,WAAW,MAAvB,SAA3D,kBAAgI,0BAAYA,WAAW,MAAvB,QAAhI,gBAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oPAIL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,cAAmC,0BAAYA,WAAW,MAAvB,KAAnC,wBAA0G,0BAAYA,WAAW,MAAvB,SAE5G,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mRAIL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,8BAAmD,+BAAGA,WAAW,MAAS,CACtE,KAAQ,+CACP,0BAAYA,WAAW,KAAvB,4CAFL,uCAIF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gTAOL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,gCAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oCAIL,8CAA6B,+BAAGA,WAAW,KAAQ,CAC/C,KAAQ,+CADiB,eAA7B,2CAEoE,0BAAYA,WAAW,KAAvB,mBAFpE,cAE8I,+BAAGA,WAAW,KAAQ,CAChK,KAAQ,4DADkI,iBAF9I,yBAIoD,0BAAYA,WAAW,KAAvB,0BAJpD,wCAKA,8BACE,iBAAGA,WAAW,cAAd,qI,sLAMNJ,EAAWK,gBAAiB","file":"static/js/documentation-icon-stepbystep.80c91d80.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"how-to-add-an-icon\"\n    }}>{`How to add an icon`}</h1>\n    <p>{`In order to avoid repetitive/manual work to create svg icons components (since they are all similar and only the content of the svg changes `}{`[see `}<inlineCode parentName=\"p\">{`src/atoms/icons`}</inlineCode>{` folder]`}{`), we choose to generate them. Here's a step by step guide to add an icon:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Extract the icon `}<inlineCode parentName=\"li\">{`svg`}</inlineCode>{` and open it in your IDE`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<svg width=\"22\" height=\"20\" viewBox=\"0 0 22 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 0H22V14.9398H11.3508L5 20V14.9398H0V0ZM2 1.99197V12.9478H7V15.8555L10.6492 12.9478H20V1.99197H2ZM7 7.96788H6V5.97591H9V9.95985H7V7.96788ZM13 7.96788H12V5.97591H15V9.95985H13V7.96788Z\" fill=\"#0E353D\"/>\n</svg>\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Copy the svg content, removing the `}<inlineCode parentName=\"li\">{`<svg>`}</inlineCode>{` container and `}<inlineCode parentName=\"li\">{`fill`}</inlineCode>{` attributes`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 0H22V14.9398H11.3508L5 20V14.9398H0V0ZM2 1.99197V12.9478H7V15.8555L10.6492 12.9478H20V1.99197H2ZM7 7.96788H6V5.97591H9V9.95985H7V7.96788ZM13 7.96788H12V5.97591H15V9.95985H13V7.96788Z\"/>\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Escape all `}<inlineCode parentName=\"li\">{`\"`}</inlineCode>{` replacing them with `}<inlineCode parentName=\"li\">{`\\\\\"`}</inlineCode></li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<path fill-rule=\\\\\"evenodd\\\\\" clip-rule=\\\\\"evenodd\\\\\" d=\\\\\"M0 0H22V14.9398H11.3508L5 20V14.9398H0V0ZM2 1.99197V12.9478H7V15.8555L10.6492 12.9478H20V1.99197H2ZM7 7.96788H6V5.97591H9V9.95985H7V7.96788ZM13 7.96788H12V5.97591H15V9.95985H13V7.96788Z\\\\\" fill=\\\\\"#0E353D\\\\\"/>\n`}</code></pre>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`Add the escaped content to `}<a parentName=\"li\" {...{\n          \"href\": \"../src/design-tokens/icons/icons-defs.json\"\n        }}><inlineCode parentName=\"a\">{`src/design-tokens/icons/icons-defs.json`}</inlineCode></a>{`, or update it if already existing`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  ...,\n  \"my icon\": \"<path fill-rule=\\\\\"evenodd\\\\\" clip-rule=\\\\\"evenodd\\\\\" d=\\\\\"M0 0H22V14.9398H11.3508L5 20V14.9398H0V0ZM2 1.99197V12.9478H7V15.8555L10.6492 12.9478H20V1.99197H2ZM7 7.96788H6V5.97591H9V9.95985H7V7.96788ZM13 7.96788H12V5.97591H15V9.95985H13V7.96788Z\\\\\" fill=\\\\\"#0E353D\\\\\"/>\"\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`Run the icon generator task`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn generate-icon-components\n`}</code></pre>\n    <p>{`This commandline runs `}<a parentName=\"p\" {...{\n        \"href\": \"../config/generator/icons/generateIcons.js\"\n      }}>{`this script`}</a>{`, that generates all specified icons in `}<inlineCode parentName=\"p\">{`icons-defs.json`}</inlineCode>{` following `}<a parentName=\"p\" {...{\n        \"href\": \"../config/generator/icons/IconComponentTemplate.tsx.hbs\"\n      }}>{`this template`}</a>{`. It also updates the `}<inlineCode parentName=\"p\">{`src/atoms/svg/index.ts`}</inlineCode>{` to export the generated components.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: this process is safe: no duplicated components/exports will be generated (if files already exist they will be overridden)`}</p>\n    </blockquote>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}