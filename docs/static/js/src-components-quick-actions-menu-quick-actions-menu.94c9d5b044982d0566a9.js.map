{"version":3,"sources":["/Users/dmatos/Documents/git/webplatform/ui-components/src/components/button/Button.module.scss","/Users/dmatos/Documents/git/webplatform/ui-components/src/components/button/Button.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/ions/text/StyledText.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/components/dropdown/DropdownElement.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/components/dropdown/subcomponents/DropdownCard.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/components/dropdown/helpers.ts","/Users/dmatos/Documents/git/webplatform/ui-components/src/components/dropdown/DropdownMenu.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/atoms/icons/MoreIcon.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/components/quick-actions-menu/QuickActionsMenu.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/components/quick-actions-menu/QuickActionsMenu.mdx","/Users/dmatos/Documents/git/webplatform/ui-components/src/ions/icon/base/Icon.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/ions/icon/wrapper/SvgWrapper.tsx","/Users/dmatos/Documents/git/webplatform/ui-components/src/utility/cssUtils.ts"],"names":["module","exports","Button","nature","size","theme","children","htmlButtonProps","className","getClassNames","styles","button","content","StyledText","styled","span","Wrapper","dashGreen00","dashGreen06","DropdownElement","props","type","onClick","elementClassName","DropdownCard","div","white","dashGreen04","maxHeight","isDropdownOutOfContainer","elementDimensions","containerDimensions","placement","rect","top","totalHeight","minHeight","height","assertUnreachable","getControllerAndMenuDimensions","params","menuRef","current","left","right","bottom","width","totalWidth","dropdownStyle","getCSSComputedStyle","element","getBeforePseudoElement","elementIsBefore","isHeightAndWidthSet","getAlternativeStyle","computeElementHeight","computeElementWidth","getBoundingRect","controllerRef","getDropdownPosition","dockingSide","MenuWrapper","isReadyForDisplay","POSSIBLE_PLACEMENTS","DropdownMenu","React","setPlacement","prevIsOpen","isOpen","containerElement","containerRef","window","getContainerBoundaries","newPlacement","getElementPlacement","isElementOutOfContainerMethod","possibilities","e","console","error","ref","menuMaxHeight","menuClassName","MoreIcon","SvgWrapper","d","SquareButton","QuickActionsMenu","Tooltip","title","tooltipTitle","options","tooltipMaxWidth","disabled","isDisabled","icon","maxMenuHeight","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","of","__position","__code","__scope","this","Playground","Props","style","display","flexDirection","justifyContent","useState","setIsOpen","preventDefault","isMDXComponent","getColor","propName","animated","Icon","svg","attrs","viewBox","version","xmlns","isAnimated","Array","from","find","child","isAnimatedSvg","result","classes","forEach","value","push","Object","entries","key","join"],"mappings":"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","file":"static/js/src-components-quick-actions-menu-quick-actions-menu.1d952ab6.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__33yyN\",\"small\":\"Button_small__Jubez\",\"medium\":\"Button_medium__1KRtb\",\"large\":\"Button_large__2kVRM\",\"light\":\"Button_light__OKfkl\",\"primary\":\"Button_primary__2lG16\",\"secondary\":\"Button_secondary__39g86\",\"danger\":\"Button_danger__3jDhW\",\"ghost\":\"Button_ghost__3a4w8\",\"dark\":\"Button_dark__2I5af\",\"content\":\"Button_content__3L-Lb\"};","import * as React from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport styles from './Button.module.scss';\n\ntype ButtonNature = 'primary' | 'secondary' | 'danger' | 'ghost';\ntype ButtonSize = 'small' | 'medium' | 'large';\ntype ButtonTheme = 'light' | 'dark';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  nature?: ButtonNature;\n  size?: ButtonSize;\n  theme?: ButtonTheme;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  nature = 'primary',\n  size = 'medium',\n  theme = 'light',\n  children,\n  ...htmlButtonProps\n}) => {\n  return (\n    <button\n      {...htmlButtonProps}\n      className={getClassNames(\n        styles.button,\n        styles[nature],\n        styles[size],\n        styles[theme]\n      )}\n    >\n      {children ? <span className={styles.content}>{children}</span> : null}\n    </button>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledText = styled.span`\n  font-family: inherit;\n  font-weight: 600;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { StyledText } from '@ions/text/StyledText';\nimport { dashGreen00, dashGreen06 } from '@colors';\n\ninterface Props {\n  onClick: (e: React.MouseEvent) => void;\n  elementClassName?: string;\n}\n\nconst Wrapper = styled.button`\n  color: ${dashGreen00};\n  line-height: 20px;\n  font-size: 16px;\n  cursor: pointer;\n  border: transparent 0px;\n  outline: none;\n  display: flex;\n  box-sizing: border-box;\n  height: 36px;\n  flex-shrink: 0;\n  padding: 8px 16px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  &:hover {\n    background-color: ${dashGreen06};\n  }\n`;\n\nexport const DropdownElement: React.FC<Props> = props => {\n  return (\n    <Wrapper\n      type='button'\n      onClick={props.onClick}\n      className={props.elementClassName}\n    >\n      <StyledText>{props.children}</StyledText>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { dashGreen04, white } from '@colors';\n\ninterface Props {\n  maxHeight?: number;\n  className?: string;\n}\n\nexport const DropdownCard = styled.div<Props>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${white};\n  border: 1px solid ${dashGreen04};\n  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  padding: 8px 0;\n  max-height: ${props => props.maxHeight || 100}px;\n  overflow-y: scroll;\n`;\n","import { Placement } from './types';\nimport { assertUnreachable } from '@utility/helpers';\nimport {\n  computeElementHeight,\n  computeElementWidth,\n  ElementDimensions,\n  getAlternativeStyle,\n  getBoundingRect,\n  getCSSComputedStyle,\n  IsElementOutOfContainerMethod,\n  isHeightAndWidthSet\n} from '@utility/positionCompute';\nimport { MenuWrapperProps } from './DropdownMenu';\n\nconst MARGIN = 4;\n\nexport const isDropdownOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n        containerDimensions.minHeight\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n        containerDimensions.maxHeight\n      );\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\ninterface GetControllerAndMenuDimensionsParams {\n  menuRef: React.RefObject<HTMLElement>;\n  controllerRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}\n\nexport const getControllerAndMenuDimensions = (\n  params: GetControllerAndMenuDimensionsParams\n): ElementDimensions => {\n  if (!params.menuRef.current) {\n    return {\n      rect: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        width: 0,\n        height: 0\n      },\n      totalHeight: 0,\n      totalWidth: 0\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.menuRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.menuRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.controllerRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport const getDropdownPosition = ({\n  dockingSide,\n  placement\n}: MenuWrapperProps) => {\n  return `${placement === 'top' ? 'bottom' : 'top'}: 100%;\n  transform: translateY(${placement === 'top' ? -1 * MARGIN : MARGIN}px);\n  ${dockingSide}: 0;`;\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { DropdownCard } from './subcomponents/DropdownCard';\nimport { DockingSide, Placement } from './types';\nimport {\n  getControllerAndMenuDimensions,\n  getDropdownPosition,\n  isDropdownOutOfContainer\n} from './helpers';\nimport {\n  getContainerBoundaries,\n  getElementPlacement\n} from '@utility/positionCompute';\n\ninterface Props {\n  isOpen: boolean;\n  controllerRef: React.RefObject<HTMLElement>;\n  menuMaxHeight?: number;\n  dockingSide?: DockingSide;\n  placement?: Placement;\n  containerRef?: React.RefObject<HTMLElement>;\n  menuClassName?: string;\n}\n\nexport interface MenuWrapperProps {\n  placement: Placement;\n  dockingSide: DockingSide;\n  isReadyForDisplay: boolean;\n}\n\nconst MenuWrapper = styled.div<MenuWrapperProps>`\n  position: absolute;\n  opacity: ${props => (props.isReadyForDisplay ? 1 : 0)};\n  ${getDropdownPosition}\n  max-width: 318px;\n`;\n\nconst DEFAULT_PLACEMENT = 'bottom';\nconst POSSIBLE_PLACEMENTS: Placement[] = ['top', 'bottom'];\n\nexport const DropdownMenu: React.FC<Props> = props => {\n  const [placement, setPlacement] = React.useState<Placement | null>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n  const prevIsOpen = React.useRef(false);\n\n  React.useEffect(() => {\n    if (props.isOpen === prevIsOpen.current) {\n      return;\n    }\n    prevIsOpen.current = props.isOpen;\n    setPlacement(null);\n\n    if (!menuRef.current || !props.controllerRef.current) {\n      return;\n    }\n    const elementDimensions = getControllerAndMenuDimensions({\n      menuRef,\n      controllerRef: props.controllerRef\n    });\n\n    const containerElement =\n      (props.containerRef && props.containerRef.current) || window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n\n    try {\n      const newPlacement = getElementPlacement({\n        isElementOutOfContainerMethod: isDropdownOutOfContainer,\n        placement: props.placement || DEFAULT_PLACEMENT,\n        possibilities: POSSIBLE_PLACEMENTS,\n        elementDimensions,\n        containerDimensions\n      });\n      setPlacement(newPlacement);\n    } catch (e) {\n      console.error('Error while computing DropdownMenu position', e);\n      setPlacement(DEFAULT_PLACEMENT);\n    }\n  });\n\n  return (\n    <>\n      {props.isOpen && (\n        <MenuWrapper\n          placement={placement || DEFAULT_PLACEMENT}\n          ref={menuRef}\n          dockingSide={props.dockingSide || 'left'}\n          isReadyForDisplay={placement !== null}\n        >\n          <DropdownCard\n            maxHeight={props.menuMaxHeight}\n            className={props.menuClassName}\n          >\n            {props.children}\n          </DropdownCard>\n        </MenuWrapper>\n      )}\n    </>\n  );\n};\n","import * as React from 'react';\nimport { SvgWrapper } from '@ions/icon/wrapper/SvgWrapper';\n\nexport const MoreIcon: React.FunctionComponent<\n  import('../../ions/icon/types').IconProps\n> = (props: import('../../ions/icon/types').IconProps): JSX.Element => (\n  <SvgWrapper {...props}>\n    <React.Fragment>\n      <path d='M4 9H6V11H4V9Z' />\n      <path d='M9 9H11V11H9V9Z' />\n      <path d='M14 9H16V11H14V9Z' />\n    </React.Fragment>\n  </SvgWrapper>\n);\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@components/button/Button';\nimport { DropdownMenu } from '@components/dropdown/DropdownMenu';\nimport { Tooltip } from '@components/tooltip/Tooltip';\nimport { dashGreen00 } from '@colors';\n\ninterface Props {\n  isOpen: boolean;\n  icon: JSX.Element;\n  onClick: React.MouseEventHandler;\n  tooltipTitle: string;\n  maxMenuHeight?: number;\n  containerRef?: React.RefObject<HTMLElement>;\n  isDisabled?: boolean;\n  menuClassName?: string;\n}\n\nconst SquareButton = styled(Button)`\n  width: 32px;\n  height: 32px;\n  fill: ${dashGreen00};\n`;\n\nconst Wrapper = styled.div`\n  width: 32px;\n  height: 32px;\n  position: relative;\n`;\n\nexport const QuickActionsMenu: React.FC<Props> = props => {\n  const controllerRef = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <Wrapper>\n      <div ref={controllerRef}>\n        <Tooltip\n          placement='left'\n          title={props.tooltipTitle}\n          options={{ tooltipMaxWidth: 172 }}\n        >\n          <SquareButton\n            nature='ghost'\n            onClick={props.onClick}\n            disabled={props.isDisabled}\n          >\n            {props.icon}\n          </SquareButton>\n        </Tooltip>\n      </div>\n      <DropdownMenu\n        dockingSide='right'\n        menuMaxHeight={props.maxMenuHeight}\n        isOpen={props.isOpen}\n        controllerRef={controllerRef}\n        containerRef={props.containerRef}\n        menuClassName={props.menuClassName}\n      >\n        {props.children}\n      </DropdownMenu>\n    </Wrapper>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Button } from '../../components/button/Button';\nimport { MoreIcon } from '../../atoms/icons/MoreIcon';\nimport { DropdownElement } from '../dropdown/DropdownElement.tsx';\nimport { QuickActionsMenu } from './QuickActionsMenu';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"quick-actions-menu\"\n    }}>{`Quick Actions Menu`}</h1>\n    <p>{`Quick action menu is a specific components meant for users to quickly copy\na credential's information like login and password.\nIt is not meant to be used in an other context. If you're looking for customizable dropdown,\ncheck out the `}<a parentName=\"p\" {...{\n        \"href\": \"./src-components-dropdown-dropdown-menu\"\n      }}>{`Dropdown Menu component`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={QuickActionsMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [isOpen, setIsOpen] = React.useState(false)\\n  const onClick = e => {\\n    e.preventDefault()\\n    setIsOpen(!isOpen)\\n  }\\n  return (\\n    <QuickActionsMenu\\n      icon={<MoreIcon />}\\n      isOpen={isOpen}\\n      onClick={onClick}\\n      tooltipTitle=\\\"Tooltip\\\"\\n    >\\n      <DropdownElement>Copy Password</DropdownElement>\\n      <DropdownElement>Copy Login</DropdownElement>\\n    </QuickActionsMenu>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      MoreIcon,\n      DropdownElement,\n      QuickActionsMenu\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      height: '200px'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isOpen, setIsOpen] = React.useState(false);\n\n        const onClick = e => {\n          e.preventDefault();\n          setIsOpen(!isOpen);\n        };\n\n        return <QuickActionsMenu icon={<MoreIcon mdxType=\"MoreIcon\" />} isOpen={isOpen} onClick={onClick} tooltipTitle='Tooltip' mdxType=\"QuickActionsMenu\">\n        <DropdownElement mdxType=\"DropdownElement\">Copy Password</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Copy Login</DropdownElement>\n      </QuickActionsMenu>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import styled from 'styled-components';\nimport { Props as IconProps } from '@ions/icon/types';\nimport { dashGreen00 } from '@colors';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getWidth = ({ width, size }: Props) => `${size || width || 20}px`;\nconst getHeight = ({ height, size }: Props) => `${size || height || 20}px`;\nconst getColor = (propName: ColorProps = 'color') => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || props['color'] || dashGreen00;\n\nexport const Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getWidth};\n  height: ${getHeight};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'inherit')};\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor()};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)};\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n","import * as React from 'react';\nimport { Icon } from '@ions/icon/base/Icon';\nimport { Props } from '@ions/icon/types';\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\n\nexport const SvgWrapper: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n","interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (typeof value === 'string') {\n      result.push(value);\n    } else {\n      Object.entries(value).forEach(([key, value]) => {\n        if (value) {\n          result.push(key);\n        }\n      });\n    }\n  });\n  return result.join(' ');\n};\n"],"sourceRoot":""}