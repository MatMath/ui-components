{"version":3,"sources":["/Users/pducolin/repos/ui-components/src/components/TextInput/TextInput.tsx","/Users/pducolin/repos/ui-components/src/components/TextInput/TextInput.mdx"],"names":["classNameFromFeedbackType","error","success","warning","TextInput","props","feedbackType","className","type","feedbackText","shouldShowFeedback","layoutProps","MDXLayout","MDXContent","components","mdxType","of","__position","__code","__scope","this","Playground","Props","style","display","flexDirection","justifyContent","isMDXComponent"],"mappings":"4YAcMA,EAAmE,CACvEC,MAAO,QACPC,QAAS,UACTC,QAAS,WAWEC,EAAgC,SAAAC,GAC3C,IAToCC,EAS9BC,GAT8BD,EASWD,EAAMC,cAR/BN,EAA0BM,GAAgB,GAUhE,OACE,yBAAKC,UAAW,QAAUA,GACxB,2CAAWF,EAAX,CAAkBE,UAAW,SAAWA,EAAWC,KAAK,UATnC,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,aAAcH,EAAmC,EAAnCA,aAC1C,OAAOG,GAAgBH,EASlBI,CAAmBL,GAClB,0BAAME,UAAW,YAAcA,GAAYF,EAAMI,cAC/C,O,yPC5BV,IAKME,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGT,EACF,8BACD,OAAO,YAACO,EAAD,iBAAeD,EAAiBN,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAE5E,iBAAQ,CACN,GAAM,aADR,aAGA,+CACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIZ,EAAWW,QAAQ,UAC9B,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,eADR,eAGA,mEACA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,gBAAiBC,QAAS,CAC3Dd,MAAOe,KAAOA,KAAKf,MAAQA,EAC3BgB,eACAC,UACAlB,aACCmB,MAAO,CACRC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBACfX,QAAQ,cACb,YAAC,EAAD,CAAWA,QAAQ,gB,4LAMrBF,EAAWc,gBAAiB","file":"static/js/src-components-text-input-text-input.7e28151a.js","sourcesContent":["import React, { FC } from 'react';\nimport './TextInput.css';\n\ntype TextInputFeedbackType = 'error' | 'success' | 'warning';\n\ntype _ForbiddenProps = 'size' | 'prefix' | 'type';\n\ninterface TextInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, _ForbiddenProps> {\n  placeholder?: string;\n  feedbackType?: TextInputFeedbackType;\n  feedbackText?: string;\n}\n\nconst classNameFromFeedbackType: Record<TextInputFeedbackType, string> = {\n  error: 'error',\n  success: 'success',\n  warning: 'warning'\n};\n\nconst getClassNameFromFeedbackType = (feedbackType?: TextInputFeedbackType) => {\n  return feedbackType ? classNameFromFeedbackType[feedbackType] : '';\n};\n\nconst shouldShowFeedback = ({ feedbackText, feedbackType }: TextInputProps) => {\n  return feedbackText && feedbackType;\n};\n\nexport const TextInput: FC<TextInputProps> = props => {\n  const className = getClassNameFromFeedbackType(props.feedbackType);\n\n  return (\n    <div className={'root ' + className}>\n      <input {...props} className={'input ' + className} type='text' />\n      {shouldShowFeedback(props) ? (\n        <span className={'feedback ' + className}>{props.feedbackText}</span>\n      ) : null}\n    </div>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { TextInput } from './TextInput';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`A text input component`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={TextInput} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show usage of the TextInput`}</p>\n    <Playground __position={1} __code={'<TextInput />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TextInput\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <TextInput mdxType=\"TextInput\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}