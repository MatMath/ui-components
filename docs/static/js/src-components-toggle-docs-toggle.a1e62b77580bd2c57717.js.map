{"version":3,"sources":["/Users/pducolin/repos/ui-components/src/utility/cssUtils.ts","/Users/pducolin/repos/ui-components/src/components/Toggle/Toggle.tsx","/Users/pducolin/repos/ui-components/src/components/Toggle/docs/ToggleDemo.tsx","/Users/pducolin/repos/ui-components/src/components/Toggle/docs/Toggle.mdx"],"names":["getClassNames","result","classes","forEach","value","push","Object","entries","key","join","HiddenInput","props","type","Handle","className","unchecked","checked","hover","isHover","disabled","Groove","children","Label","labelOn","labelOff","Toggle","useState","setIsHover","onMouseLeave","onMouseEnter","onChange","ToggleDemo","isChecked","setIsChecked","e","currentTarget","layoutProps","MDXLayout","MDXContent","components","mdxType","of","__position","__code","__scope","this","Playground","Props","style","display","flexDirection","justifyContent","isMDXComponent"],"mappings":"ifAYaA,EAAgB,WAAiD,IAC5E,IAAMC,EAAmB,GADmD,mBAA7CC,EAA6C,yBAA7CA,EAA6C,gBAa5E,OAXAA,EAAQC,QAAQ,SAAAC,GACO,kBAAVA,EACTH,EAAOI,KAAKD,GAEZE,OAAOC,QAAQH,GAAOD,QAAQ,YAAmB,IAAD,mBAAhBK,EAAgB,WAE5CP,EAAOI,KAAKG,OAKbP,EAAOQ,KAAK,M,2bCXrB,IAAMC,EAAc,SAACC,GACnB,OAAO,yCAAOC,KAAK,YAAeD,KAG9BE,EAAS,SAACF,GACd,OACE,wCACEG,UAAWd,EAAc,SAAU,CACjCe,UAAWJ,EAAMK,QACjBC,MAAON,EAAMO,QACbC,SAAUR,EAAMQ,YAEdR,KAKJS,EAA+B,SAAAT,GACnC,OACE,2BACEG,UAAWd,EAAc,SAAU,CACjCgB,QAASL,EAAMK,QACfC,MAAON,EAAMO,QACbC,SAAUR,EAAMQ,YAGjBR,EAAMU,WAKPC,EAAQ,SAACX,GACb,OACE,2BACEG,UAAWd,EAAc,QAAS,CAChCmB,SAAUR,EAAMQ,YAGjBR,EAAMY,SACHZ,EAAMK,QACJL,EAAMY,QAERZ,EAAMa,WAKHC,EAAS,SAACd,GAAwB,IAAD,EACde,oBAAS,GADK,mBACrCR,EADqC,KAC5BS,EAD4B,KAG5C,OACE,2BACEb,UAAU,OACVc,aAAc,WACPjB,EAAMQ,UACTQ,GAAW,IAGfE,aAAc,WACPlB,EAAMQ,UACTQ,GAAW,KAIf,kBAAC,EAAD,iBAAiBhB,EAAjB,CAAwBmB,SAAUnB,EAAMmB,YACxC,kBAAC,EAAD,iBAAYnB,EAAZ,CAAmBO,QAASA,IAC1B,kBAAC,EAAD,iBAAYP,EAAZ,CAAmBO,QAASA,MAE9B,kBAAC,EAAD,iBAAWP,EAAX,CAAkBO,QAASA,O,0MC/E1B,IAAMa,EAAa,WAAO,IAAD,EACML,oBAAS,GADf,mBACrBM,EADqB,KACVC,EADU,KAG5B,OAAQ,kBAAC,EAAD,CAAQjB,QAASgB,EAAWF,SAAU,SAAAI,GAAC,OAAID,EAAaC,EAAEC,cAAcnB,a,6PCGpF,IAKMoB,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACG5B,EACF,8BACD,OAAO,YAAC0B,EAAD,iBAAeD,EAAiBzB,EAAhC,CAAuC4B,WAAYA,EAAYC,QAAQ,cAE5E,iBAAQ,CACN,GAAM,UADR,UAGA,2CACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIhB,EAAQe,QAAQ,UAC3B,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,eADR,eAGA,gEACA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,aAAcC,QAAS,CACxDjC,MAAOkC,KAAOA,KAAKlC,MAAQA,EAC3BmC,eACAC,UACAtB,SACAM,cACCiB,MAAO,CACRC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBACfX,QAAQ,cACb,YAAC,EAAD,CAAQA,QAAQ,YAEd,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,iBAAkBC,QAAS,CAC5DjC,MAAOkC,KAAOA,KAAKlC,MAAQA,EAC3BmC,eACAC,UACAtB,SACAM,cACCiB,MAAO,CACRC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBACfX,QAAQ,cACb,YAAC,EAAD,CAAYA,QAAQ,iB,2LAMtBF,EAAWc,gBAAiB","file":"static/js/src-components-toggle-docs-toggle.7eb9604f.js","sourcesContent":["interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (typeof value === 'string') {\n      result.push(value);\n    } else {\n      Object.entries(value).forEach(([key, value]) => {\n        if (value) {\n          result.push(key);\n        }\n      });\n    }\n  });\n  return result.join(' ');\n};\n","import React, { FC, useState } from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport './Toggle.css';\n\nexport interface ToggleProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  labelOff?: string;\n  labelOn?: string;\n}\n\ninterface ToggleChildProps extends ToggleProps {\n  isHover: boolean;\n}\n\nconst HiddenInput = (props: ToggleProps) => {\n  return <input type='checkbox' {...props} />;\n};\n\nconst Handle = (props: ToggleChildProps) => {\n  return (\n    <span\n      className={getClassNames('handle', {\n        unchecked: props.checked,\n        hover: props.isHover,\n        disabled: props.disabled\n      })}\n      {...props}\n    />\n  );\n};\n\nconst Groove: FC<ToggleChildProps> = props => {\n  return (\n    <label\n      className={getClassNames('groove', {\n        checked: props.checked,\n        hover: props.isHover,\n        disabled: props.disabled\n      })}\n    >\n      {props.children}\n    </label>\n  );\n};\n\nconst Label = (props: ToggleChildProps) => {\n  return (\n    <label\n      className={getClassNames('label', {\n        disabled: props.disabled\n      })}\n    >\n      {props.labelOn\n        ? props.checked\n          ? props.labelOn\n          : props.labelOff\n        : props.labelOff}\n    </label>\n  );\n};\n\nexport const Toggle = (props: ToggleProps) => {\n  const [isHover, setIsHover] = useState(false);\n\n  return (\n    <label\n      className='root'\n      onMouseLeave={() => {\n        if (!props.disabled) {\n          setIsHover(false);\n        }\n      }}\n      onMouseEnter={() => {\n        if (!props.disabled) {\n          setIsHover(true);\n        }\n      }}\n    >\n      <HiddenInput {...props} onChange={props.onChange} />\n      <Groove {...props} isHover={isHover}>\n        <Handle {...props} isHover={isHover} />\n      </Groove>\n      <Label {...props} isHover={isHover} />\n    </label>\n  );\n};\n","import React, { useState } from 'react'\nimport {Toggle} from '../Toggle'\n\nexport const ToggleDemo = () => {\n    const [isChecked, setIsChecked] = useState(false)\n\n    return (<Toggle checked={isChecked} onChange={e => setIsChecked(e.currentTarget.checked)}/>)\n}","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from '../Toggle';\nimport {ToggleDemo} from './ToggleDemo'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <p>{`A toggle component`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Toggle} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show usage of the Toggle`}</p>\n    <Playground __position={1} __code={'<Toggle />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      ToggleDemo\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\" />\n    </Playground>\n    <Playground __position={2} __code={'<ToggleDemo />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      ToggleDemo\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <ToggleDemo mdxType=\"ToggleDemo\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}