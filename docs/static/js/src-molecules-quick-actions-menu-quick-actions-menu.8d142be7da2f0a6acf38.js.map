{"version":3,"sources":["/Users/agauvrit/Dashlane/projects/ui-components/src/ions/button/base/BaseButton.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/button/themes/ThemeWrapper.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/button/themes/danger/ButtonDanger.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/button/themes/secondary/ButtonSecondary.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/button/themes/primary/ButtonPrimary.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/button/themes/ghost/ButtonGhost.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/button/Button.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/dropdown/card/DropdownCard.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/dropdownMenu/helpers.ts","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/dropdownMenu/DropdownMenu.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/dropdown/element/DropdownElement.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/icon/base/Icon.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/icon/wrapper/SvgWrapper.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/ions/text/StyledText.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/icons/MoreIcon.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/molecules/quick-actions-menu/QuickActionsMenu.mdx","/Users/agauvrit/Dashlane/projects/ui-components/src/molecules/quick-actions-menu/QuickActionsMenu.tsx"],"names":["getBgColorByState","state","theme","backgroundColor","transparent","getBorderByState","borderColor","baseStyle","css","textColor","white","props","customStyle","SmallButton","styled","button","MediumButton","LargeButton","StyledContent","StyledText","BaseButton","children","size","content","assertUnreachable","ThemeWrapper","colors","buttonTheme","dark","dangerColors","default","idle","functionalRed02","hover","functionalRed01","active","functionalRed00","ButtonDanger","secondaryColors","dashGreen05","dashGreen03","dashGreen00","dashGreen01","dashGreen02","ButtonSecondary","primaryColors","midGreen00","dashDarkerGreen00","midGreen03","midGreen01","ButtonPrimary","ghostStyle","ButtonGhost","Button","nature","renderButtonByType","DropdownCard","div","dashGreen04","maxHeight","isDropdownOutOfContainer","elementDimensions","containerDimensions","placement","rect","top","totalHeight","minHeight","height","getControllerAndMenuDimensions","menuRef","buttonRef","elementIsBefore","dropdownStyle","getCSSComputedStyle","current","checkIsStyleComputed","getAlternativeStyle","width","computeElementHeight","totalWidth","computeElementWidth","getBoundingRect","getDropdownPosition","dockingSide","MenuWrapper","isReadyForDisplay","POSSIBLE_PLACEMENTS","DropdownMenu","React","setPlacement","prevIsOpen","isOpen","controllerRef","containerElement","containerRef","window","getContainerBoundaries","newPlacement","getElementPlacement","e","console","error","ref","menuMaxHeight","className","menuClassName","Wrapper","dashGreen06","DropdownElement","type","onClick","elementClassName","getSize","getColor","propName","animated","Icon","svg","attrs","viewBox","version","xmlns","disabled","SvgWrapper","title","isAnimated","Array","from","find","child","isAnimatedSvg","span","MoreIcon","d","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","of","QuickActionsMenu","__position","__code","__scope","this","Playground","Props","style","display","flexDirection","justifyContent","useState","setIsOpen","icon","tooltipTitle","isMDXComponent","SquareButton","preventDefault","isDisabled","maxMenuHeight"],"mappings":"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","file":"static/js/src-molecules-quick-actions-menu-quick-actions-menu.0ca1993b.js","sourcesContent":["import * as React from 'react';\nimport styled, {\n  css,\n  DefaultTheme,\n  FlattenInterpolation,\n  ThemedStyledProps\n} from 'styled-components';\nimport { transparent, white } from '@colors';\nimport { StyledText } from '@ions/text/StyledText';\nimport { Props } from '@atoms/button/Button';\nimport { assertUnreachable } from '@utility/helpers';\nimport { ButtonState } from '@ions/button/themes/types';\n\nexport type BaseButtonProps = Omit<Props, 'nature' | 'theme'>;\ntype Theme = {\n  [key in keyof DefaultTheme]: DefaultTheme[key];\n};\n\nexport interface BaseProps extends BaseButtonProps {\n  children?: React.ReactNode;\n  customStyle?: FlattenInterpolation<ThemedStyledProps<{}, DefaultTheme>>;\n  theme: Theme;\n}\n\nconst getBgColorByState = (state: ButtonState) => ({ theme }: BaseProps) =>\n  theme.backgroundColor[state] || transparent;\nconst getColor = ({ theme }: BaseProps) => theme.textColor || white;\nconst getBorderByState = (state: ButtonState) => ({ theme }: BaseProps) =>\n  theme.borderColor\n    ? `1px solid ${theme.borderColor[state] || transparent}`\n    : 'none';\n\nconst baseStyle = css`\n  color: ${getColor};\n  font-size: 16px;\n  line-height: 20px;\n  background-color: ${getBgColorByState('idle')};\n  cursor: pointer;\n  border: ${getBorderByState('idle')};\n  border-radius: 4px;\n  min-width: 60px;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  outline: none;\n  transition: all 0.1s;\n  ${props => props.customStyle};\n\n  &:hover:not(:disabled),\n  &:focus:not(:disabled) {\n    border: ${getBorderByState('hover')};\n    background-color: ${getBgColorByState('hover')};\n  }\n  &:active:not(:disabled) {\n    border: ${getBorderByState('active')};\n    background-color: ${getBgColorByState('active')};\n  }\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    span {\n      pointer-events: none;\n    }\n  }\n`;\n\nconst SmallButton = styled.button<BaseProps>`\n  ${baseStyle}\n  padding: 8px 16px;\n  height: 32px;\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst MediumButton = styled.button<BaseProps>`\n  ${baseStyle}\n  padding: 10px 16px;\n  height: 40px;\n`;\n\nconst LargeButton = styled.button<BaseProps>`\n  ${baseStyle}\n  padding: 14px 24px;\n  height: 48px;\n`;\n\nconst StyledContent = styled(StyledText)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst BaseButton: React.FunctionComponent<BaseProps> = ({\n  children,\n  size = 'medium',\n  ...props\n}: BaseProps) => {\n  const content = <StyledContent>{children || 'Default'}</StyledContent>;\n  switch (size) {\n    case 'small':\n      return <SmallButton {...props}>{content}</SmallButton>;\n    case 'medium':\n      return <MediumButton {...props}>{content}</MediumButton>;\n    case 'large':\n      return <LargeButton {...props}>{content}</LargeButton>;\n    default:\n      return assertUnreachable(size);\n  }\n};\n\nexport default BaseButton;\n","import * as React from 'react';\nimport { BaseButton } from '@ions';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport {\n  DefaultTheme,\n  FlattenInterpolation,\n  ThemedStyledProps\n} from 'styled-components';\n\ninterface Props extends ThemeWrapperProps {\n  colors: ThemeColors;\n  customStyle?: FlattenInterpolation<ThemedStyledProps<{}, DefaultTheme>>;\n}\n\nexport const ThemeWrapper = ({\n  colors,\n  theme = 'default',\n  ...props\n}: Props) => {\n  const buttonTheme =\n    theme === 'dark' && colors.dark ? colors.dark : colors.default;\n\n  return <BaseButton theme={buttonTheme} {...props} />;\n};\n","import * as React from 'react';\nimport { functionalRed00, functionalRed01, functionalRed02 } from '@colors';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport { ThemeWrapper } from '@ions/button/themes/ThemeWrapper';\n\nconst dangerColors: ThemeColors = {\n  default: {\n    backgroundColor: {\n      idle: functionalRed02,\n      hover: functionalRed01,\n      active: functionalRed00\n    }\n  }\n};\n\nconst ButtonDanger = (props: ThemeWrapperProps) => (\n  <ThemeWrapper colors={dangerColors} {...props} />\n);\n\nexport default ButtonDanger;\n","import * as React from 'react';\nimport {\n  dashGreen00,\n  dashGreen01,\n  dashGreen02,\n  dashGreen03,\n  dashGreen05,\n  transparent\n} from '@colors';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport { ThemeWrapper } from '@ions/button/themes/ThemeWrapper';\n\nconst secondaryColors: ThemeColors = {\n  default: {\n    backgroundColor: {\n      idle: transparent,\n      hover: dashGreen05,\n      active: dashGreen03\n    },\n    textColor: dashGreen00,\n    borderColor: {\n      idle: dashGreen05,\n      hover: dashGreen05,\n      active: dashGreen03\n    }\n  },\n  dark: {\n    backgroundColor: {\n      idle: transparent,\n      hover: dashGreen01,\n      active: dashGreen02\n    },\n    borderColor: {\n      idle: dashGreen01,\n      hover: dashGreen01,\n      active: dashGreen02\n    }\n  }\n};\n\nconst ButtonSecondary = (props: ThemeWrapperProps) => (\n  <ThemeWrapper colors={secondaryColors} {...props} />\n);\n\nexport default ButtonSecondary;\n","import * as React from 'react';\nimport {\n  dashDarkerGreen00,\n  dashGreen00,\n  midGreen00,\n  midGreen01,\n  midGreen03,\n  white\n} from '@colors';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport { ThemeWrapper } from '@ions/button/themes/ThemeWrapper';\n\nconst primaryColors: ThemeColors = {\n  default: {\n    backgroundColor: {\n      idle: midGreen00,\n      hover: dashGreen00,\n      active: dashDarkerGreen00\n    }\n  },\n  dark: {\n    backgroundColor: {\n      idle: white,\n      hover: midGreen03,\n      active: midGreen01\n    },\n    textColor: dashGreen00\n  }\n};\n\nconst ButtonPrimary = (props: ThemeWrapperProps) => (\n  <ThemeWrapper colors={primaryColors} {...props} />\n);\n\nexport default ButtonPrimary;\n","import * as React from 'react';\nimport { css } from 'styled-components';\nimport { dashGreen00, dashGreen01, dashGreen05, transparent } from '@colors';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport { ThemeWrapper } from '@ions/button/themes/ThemeWrapper';\n\nconst primaryColors: ThemeColors = {\n  default: {\n    backgroundColor: {\n      idle: transparent,\n      hover: transparent,\n      active: dashGreen05\n    },\n    textColor: dashGreen00,\n    borderColor: {\n      idle: transparent,\n      hover: dashGreen05,\n      active: dashGreen05\n    }\n  },\n  dark: {\n    backgroundColor: {\n      idle: transparent,\n      hover: transparent,\n      active: dashGreen01\n    },\n    borderColor: {\n      idle: transparent,\n      hover: dashGreen01,\n      active: dashGreen01\n    }\n  }\n};\n\n/**\n * Ghost button special styling\n */\nconst ghostStyle = css`\n  min-width: 32px;\n  svg {\n    margin: -8px -16px;\n  }\n`;\n\nconst ButtonGhost = (props: ThemeWrapperProps) => (\n  <ThemeWrapper customStyle={ghostStyle} colors={primaryColors} {...props} />\n);\n\nexport default ButtonGhost;\n","import * as React from 'react';\nimport {\n  ButtonDanger,\n  ButtonGhost,\n  ButtonPrimary,\n  ButtonSecondary\n} from '@ions/button/themes';\nimport { assertUnreachable } from '@utility/helpers';\n\n// Downside: Docz will display all props including React.ButtonHTMLAttributes ones\n// https://github.com/doczjs/docz/issues/895\nexport interface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The button's nature\n   */\n  nature: 'danger' | 'secondary' | 'primary' | 'ghost';\n  /**\n   * Activates the button dark mode\n   */\n  theme?: 'default' | 'dark';\n  /**\n   * Disabled state of the button\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * A large style option\n   @default false\n   */\n  size?: 'small' | 'medium' | 'large';\n}\n\nconst Button: React.FunctionComponent<Props> = (props): JSX.Element | null => {\n  const renderButtonByType = ({\n    nature,\n    ...props\n  }: Props): JSX.Element | null => {\n    switch (nature) {\n      case 'danger':\n        return <ButtonDanger {...props} />;\n      case 'secondary':\n        return <ButtonSecondary {...props} />;\n      case 'primary':\n        return <ButtonPrimary {...props} />;\n      case 'ghost':\n        return <ButtonGhost {...props} />;\n      default:\n        return assertUnreachable(nature);\n    }\n  };\n\n  return renderButtonByType(props);\n};\n\nexport default Button;\n","import styled from 'styled-components';\nimport { dashGreen04, white } from '@colors';\n\ninterface Props {\n  maxHeight?: number;\n  className?: string;\n}\n\nconst DropdownCard = styled.div<Props>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${white};\n  border: 1px solid ${dashGreen04};\n  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  padding: 8px 0;\n  max-height: ${props => props.maxHeight || 100}px;\n  overflow-y: scroll;\n`;\n\nexport default DropdownCard;\n","import { Placement } from './types';\nimport { assertUnreachable } from '@utility/helpers';\nimport {\n  checkIsStyleComputed,\n  computeElementHeight,\n  computeElementWidth,\n  ElementDimensions,\n  getAlternativeStyle,\n  getBoundingRect,\n  getCSSComputedStyle,\n  IsElementOutOfContainerMethod\n} from '@utility/positionCompute';\nimport { MenuWrapperProps } from './DropdownMenu';\n\nconst MARGIN = 4;\n\nexport const isDropdownOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n        containerDimensions.minHeight\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n        containerDimensions.maxHeight\n      );\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\nexport const getControllerAndMenuDimensions = (\n  menuRef: React.RefObject<HTMLElement>,\n  buttonRef: React.RefObject<HTMLElement>,\n  elementIsBefore?: boolean\n): ElementDimensions => {\n  const dropdownStyle = getCSSComputedStyle(menuRef.current, elementIsBefore);\n  const isStyleComputed = checkIsStyleComputed(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, menuRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(buttonRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport const getDropdownPosition = ({\n  dockingSide,\n  placement\n}: MenuWrapperProps) => {\n  return `${placement === 'top' ? 'bottom' : 'top'}: 100%;\n  transform: translateY(${placement === 'top' ? -1 * MARGIN : MARGIN}px);\n  ${dockingSide}: 0;`;\n};\n","import * as React from 'react';\nimport DropdownCard from '@ions/dropdown/card/DropdownCard';\nimport styled from 'styled-components';\nimport { DockingSide, Placement } from './types';\nimport {\n  getControllerAndMenuDimensions,\n  getDropdownPosition,\n  isDropdownOutOfContainer\n} from './helpers';\nimport {\n  getContainerBoundaries,\n  getElementPlacement\n} from '@utility/positionCompute';\n\ninterface Props {\n  isOpen: boolean;\n  controllerRef: React.RefObject<HTMLElement>;\n  menuMaxHeight?: number;\n  dockingSide?: DockingSide;\n  placement?: Placement;\n  containerRef?: React.RefObject<HTMLElement>;\n  menuClassName?: string;\n}\nexport interface MenuWrapperProps {\n  placement: Placement;\n  dockingSide: DockingSide;\n  isReadyForDisplay: boolean;\n}\n\nconst MenuWrapper = styled.div<MenuWrapperProps>`\n  position: absolute;\n  opacity: ${props => (props.isReadyForDisplay ? 1 : 0)};\n  ${getDropdownPosition}\n  max-width: 318px;\n`;\n\nconst DEFAULT_PLACEMENT = 'bottom';\nconst POSSIBLE_PLACEMENTS: Placement[] = ['top', 'bottom'];\n\nconst DropdownMenu: React.FC<Props> = props => {\n  const [placement, setPlacement] = React.useState<Placement | null>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n  const prevIsOpen = React.useRef(false);\n\n  React.useEffect(() => {\n    if (props.isOpen === prevIsOpen.current) {\n      return;\n    }\n    prevIsOpen.current = props.isOpen;\n    setPlacement(null);\n\n    if (!menuRef.current || !props.controllerRef.current) {\n      return;\n    }\n    const elementDimensions = getControllerAndMenuDimensions(\n      menuRef,\n      props.controllerRef\n    );\n\n    const containerElement =\n      (props.containerRef && props.containerRef.current) || window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n\n    try {\n      const newPlacement = getElementPlacement(\n        isDropdownOutOfContainer,\n        props.placement || DEFAULT_PLACEMENT,\n        POSSIBLE_PLACEMENTS,\n        elementDimensions,\n        containerDimensions\n      );\n      setPlacement(newPlacement);\n    } catch (e) {\n      console.error('Error while computing DropdownMenu position', e);\n      setPlacement(DEFAULT_PLACEMENT);\n    }\n  });\n\n  return (\n    <>\n      {props.isOpen && (\n        <MenuWrapper\n          placement={placement || DEFAULT_PLACEMENT}\n          ref={menuRef}\n          dockingSide={props.dockingSide || 'left'}\n          isReadyForDisplay={placement !== null}\n        >\n          <DropdownCard\n            maxHeight={props.menuMaxHeight}\n            className={props.menuClassName}\n          >\n            {props.children}\n          </DropdownCard>\n        </MenuWrapper>\n      )}\n    </>\n  );\n};\n\nexport default DropdownMenu;\n","import * as React from 'react';\nimport { StyledText } from '@ions/text/StyledText';\nimport styled from 'styled-components';\nimport { dashGreen00, dashGreen06 } from '@colors';\n\ninterface Props {\n  onClick: (e: React.MouseEvent) => void;\n  elementClassName?: string;\n}\n\nconst Wrapper = styled.button`\n  color: ${dashGreen00};\n  line-height: 20px;\n  font-size: 16px;\n  cursor: pointer;\n  border: transparent 0px;\n  outline: none;\n  display: flex;\n  box-sizing: border-box;\n  height: 36px;\n  flex-shrink: 0;\n  padding: 8px 16px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  &:hover {\n    background-color: ${dashGreen06};\n  }\n`;\n\nconst DropdownElement: React.FC<Props> = props => {\n  return (\n    <Wrapper\n      type='button'\n      onClick={props.onClick}\n      className={props.elementClassName}\n    >\n      <StyledText>{props.children}</StyledText>\n    </Wrapper>\n  );\n};\n\nexport default DropdownElement;\n","import styled from 'styled-components';\nimport { Props as IconProps } from '@ions/icon/types';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getSize = ({ size = 20 }) => `${size}px`;\nconst getColor = (propName: ColorProps = 'color') => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || props['color'] || 'inherit';\n\nconst Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getSize};\n  height: ${getSize};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')};\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor()};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)};\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n\nexport default Icon;\n","import * as React from 'react';\nimport Icon from '@ions/icon/base/Icon';\nimport { Props } from '@ions/icon/types';\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\nconst SvgWrapper: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n\nexport default SvgWrapper;\n","import styled from 'styled-components';\n\nexport const StyledText = styled.span`\n  font-family: inherit;\n  font-weight: 600;\n`;\n","import * as React from 'react';\nimport SvgWrapper from '@ions/icon/wrapper/SvgWrapper';\n\nconst MoreIcon: React.FunctionComponent<\n  import('../../ions/icon/types').IconProps\n> = (props: import('../../ions/icon/types').IconProps): JSX.Element => (\n  <SvgWrapper {...props}>\n    <React.Fragment>\n      <path d='M4 9H6V11H4V9Z' />\n      <path d='M9 9H11V11H9V9Z' />\n      <path d='M14 9H16V11H14V9Z' />\n    </React.Fragment>\n  </SvgWrapper>\n);\n\nexport default MoreIcon;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport Button from '../../atoms/button/Button';\nimport MoreIcon from '../../atoms/icons/MoreIcon';\nimport DropdownElement from '../../ions/dropdown/element/DropdownElement.tsx';\nimport QuickActionsMenu from './QuickActionsMenu';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"quick-actions-menu\"\n    }}>{`Quick Actions Menu`}</h1>\n    <p>{`Quick action menu is a specific components meant for users to quickly copy\na credential's information like login and password.\nIt is not meant to be used in an other context. If you're looking for customizable dropdown,\ncheck out the `}<a parentName=\"p\" {...{\n        \"href\": \"./src-atoms-button-button\"\n      }}>{`Dropdown Menu component`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={QuickActionsMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [isOpen, setIsOpen] = React.useState(false)\\n  return (\\n    <QuickActionsMenu\\n      icon={<MoreIcon />}\\n      isOpen={isOpen}\\n      setIsOpen={setIsOpen}\\n      tooltipTitle=\\\"Tooltip\\\"\\n    >\\n      <DropdownElement>Copy Password</DropdownElement>\\n      <DropdownElement>Copy Login</DropdownElement>\\n    </QuickActionsMenu>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      MoreIcon,\n      DropdownElement,\n      QuickActionsMenu\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      height: '200px'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isOpen, setIsOpen] = React.useState(false);\n        return <QuickActionsMenu icon={<MoreIcon mdxType=\"MoreIcon\" />} isOpen={isOpen} setIsOpen={setIsOpen} tooltipTitle='Tooltip' mdxType=\"QuickActionsMenu\">\n        <DropdownElement mdxType=\"DropdownElement\">Copy Password</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Copy Login</DropdownElement>\n      </QuickActionsMenu>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import * as React from 'react';\nimport DropdownMenu from '@atoms/dropdownMenu/DropdownMenu';\nimport { Button, Tooltip } from '@atoms';\nimport styled from 'styled-components';\nimport { dashGreen00 } from '@colors';\n\ninterface Props {\n  isOpen: boolean;\n  icon: JSX.Element;\n  setIsOpen: (isOpen: boolean) => void;\n  tooltipTitle: string;\n  maxMenuHeight?: number;\n  containerRef?: React.RefObject<HTMLElement>;\n  isDisabled?: boolean;\n  menuClassName?: string;\n}\n\nconst SquareButton = styled(Button)`\n  width: 32px;\n  height: 32px;\n  fill: ${dashGreen00};\n`;\n\nconst Wrapper = styled.div`\n  width: 32px;\n  height: 32px;\n  position: relative;\n`;\n\nconst QuickActionsMenu: React.FC<Props> = props => {\n  const controllerRef = React.useRef<HTMLDivElement>(null);\n\n  const onButtonClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    props.setIsOpen(!props.isOpen);\n  };\n\n  return (\n    <Wrapper>\n      <div ref={controllerRef}>\n        <Tooltip placement='left' title={props.tooltipTitle}>\n          <div>\n            <SquareButton\n              nature='ghost'\n              onClick={onButtonClick}\n              disabled={props.isDisabled}\n            >\n              {props.icon}\n            </SquareButton>\n          </div>\n        </Tooltip>\n      </div>\n      <DropdownMenu\n        dockingSide='right'\n        menuMaxHeight={props.maxMenuHeight}\n        isOpen={props.isOpen}\n        controllerRef={controllerRef}\n        containerRef={props.containerRef}\n        menuClassName={props.menuClassName}\n      >\n        {props.children}\n      </DropdownMenu>\n    </Wrapper>\n  );\n};\n\nexport default QuickActionsMenu;\n"],"sourceRoot":""}