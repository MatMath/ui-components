{"version":3,"sources":["/Users/mlouati/Documents/work/ui-components/src/atoms/button/Button.mdx","/Users/mlouati/Documents/work/ui-components/src/atoms/button/Button.tsx","/Users/mlouati/Documents/work/ui-components/src/atoms/button/types.ts","/Users/mlouati/Documents/work/ui-components/src/globals/colors.ts","/Users/mlouati/Documents/work/ui-components/src/ions/icon/Icon.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/text/Text.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/button/base/BaseButton.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/button/themes/themeWrapper/withTheme.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/button/themes/danger/ButtonDanger.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/button/themes/dark/ButtonDark.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/button/themes/light/ButtonLight.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/button/themes/secondary/ButtonSecondary.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/button/themes/success/ButtonSuccess.tsx","/Users/mlouati/Documents/work/ui-components/src/ions/index.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","of","Button","__position","__code","__scope","this","Playground","Props","style","display","flexDirection","justifyContent","type","variant","className","flexFlow","margin","disabled","isMDXComponent","ButtonTypes","danger","ButtonDanger","secondary","ButtonSecondary","dark","ButtonDark","light","ButtonLight","success","ButtonSuccess","ButtonName","Error","renderButtonByType","ButtonVariant","$primary","100","300","500","600","700","800","900","$secondary","$success","$danger","$warning","$info","$light","200","400","getSize","size","getColor","propName","Icon","styled","svg","Text","span","getActiveColor","theme","activeBackground","button","color","background","hoverBorder","BaseButton","children","WithTheme","text","bgPrimary","primary","bgSecondary","textPrimary","transparentTheme","flatTheme","contained"],"mappings":"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","file":"static/js/src-atoms-button-button.e0fbe678.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport Button from './Button';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"button\"\n    }}>{`Button`}</h1>\n    <p>{`A Button that allows users to take actions, and make choices, with a single tap. It can be a either:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Contained (filled) button`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Text button`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Button} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"default-variant-for-the-button-is-contained\"\n    }}>{`Default variant for the button is `}<inlineCode parentName=\"h3\">{`contained`}</inlineCode></h3>\n    <Playground __position={1} __code={'<div>\\n  <Button type=\\\"danger\\\">Danger Button</Button>\\n</div>\\n<div>\\n  <Button type=\\\"dark\\\">Dark Button</Button>\\n</div>\\n<div>\\n  <Button type=\\\"light\\\">Light Button</Button>\\n</div>\\n<div>\\n  <Button type=\\\"secondary\\\">Secondary Button</Button>\\n</div>\\n<div>\\n  <Button type=\\\"success\\\">Success Button</Button>\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <div>\n    <Button type=\"danger\" mdxType=\"Button\">Danger Button</Button>\n  </div>\n      <div>\n  <Button type='dark' mdxType=\"Button\">Dark Button</Button>\n      </div>\n      <div>\n  <Button type='light' mdxType=\"Button\">Light Button</Button>\n      </div>\n      <div>\n  <Button type='secondary' mdxType=\"Button\">Secondary Button</Button>\n      </div>\n  <div>\n    <Button type=\"success\" mdxType=\"Button\">Success Button</Button>\n  </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"you-can-have-a-text-button-by-specifying-variant-property-to-text\"\n    }}>{`You can have a text button by specifying `}<inlineCode parentName=\"h3\">{`variant`}</inlineCode>{` property to `}<inlineCode parentName=\"h3\">{`text`}</inlineCode></h3>\n    <Playground __position={2} __code={'<div>\\n  <Button type=\\\"danger\\\" variant=\\\"text\\\">\\n    Danger Button\\n  </Button>\\n</div>\\n<div>\\n  <Button type=\\\"dark\\\" variant=\\\"text\\\">\\n    Dark Button\\n  </Button>\\n</div>\\n<div>\\n  <Button type=\\\"light\\\" variant=\\\"text\\\">\\n    Light Button\\n  </Button>\\n</div>\\n<div>\\n  <Button type=\\\"secondary\\\" variant=\\\"text\\\">\\n    Secondary Button\\n  </Button>\\n</div>\\n<div>\\n  <Button type=\\\"success\\\" variant=\\\"text\\\">\\n    Success Button\\n  </Button>\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <div>\n    <Button type=\"danger\" variant=\"text\" mdxType=\"Button\">Danger Button</Button>\n  </div>\n      <div>\n  <Button type='dark' variant='text' mdxType=\"Button\">\n    Dark Button\n  </Button>\n      </div>\n      <div>\n  <Button type='light' variant='text' mdxType=\"Button\">\n    Light Button\n  </Button>\n      </div>\n      <div>\n  <Button type='secondary' variant='text' mdxType=\"Button\">\n    Secondary Button\n  </Button>\n      </div>\n  <div>\n    <Button type=\"success\" variant=\"text\" mdxType=\"Button\">Success Button</Button>\n  </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"in-disabled-mode-buttons-will-behave-as-following\"\n    }}>{`In disabled mode, buttons will behave as following`}</h3>\n    <Playground __position={3} __code={'<div style={{ display: \\'flex\\', margin: \\'8px\\' }}>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"danger\\\" disabled>\\n      Danger Button\\n    </Button>\\n  </div>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"dark\\\" disabled>\\n      Dark Button\\n    </Button>\\n  </div>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"light\\\" disabled>\\n      Light Button\\n    </Button>\\n  </div>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"secondary\\\" disabled>\\n      Secondary Button\\n    </Button>\\n  </div>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"success\\\" disabled>\\n      Success Button\\n    </Button>\\n  </div>\\n</div>\\n<div style={{ display: \\'flex\\', margin: \\'8px\\' }}>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"danger\\\" variant=\\\"text\\\" disabled>\\n      Danger Button\\n    </Button>\\n  </div>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"dark\\\" variant=\\\"text\\\" disabled>\\n      Dark Button\\n    </Button>\\n  </div>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"light\\\" variant=\\\"text\\\" disabled>\\n      Light Button\\n    </Button>\\n  </div>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"secondary\\\" variant=\\\"text\\\" disabled>\\n      Secondary Button\\n    </Button>\\n  </div>\\n  <div style={{ margin: \\'8px\\' }}>\\n    <Button type=\\\"success\\\" variant=\\\"text\\\" disabled>\\n      Success Button\\n    </Button>\\n  </div>\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button\n    }} className=\"test\" style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      flexFlow: 'wrap'\n    }} mdxType=\"Playground\">\n      <div style={{\n        display: 'flex',\n        margin: '8px'\n      }}>\n  <div style={{\n          margin: '8px'\n        }}>\n    <Button type=\"danger\" disabled mdxType=\"Button\">Danger Button</Button>\n  </div>\n        <div style={{\n          margin: '8px'\n        }}>\n  <Button type='dark' disabled mdxType=\"Button\">\n    Dark Button\n  </Button>\n        </div>\n        <div style={{\n          margin: '8px'\n        }}>\n  <Button type='light' disabled mdxType=\"Button\">\n    Light Button\n  </Button>\n        </div>\n        <div style={{\n          margin: '8px'\n        }}>\n  <Button type='secondary' disabled mdxType=\"Button\">\n    Secondary Button\n  </Button>\n        </div>\n  <div style={{\n          margin: '8px'\n        }}>\n    <Button type=\"success\" disabled mdxType=\"Button\">Success Button</Button>\n  </div>\n      </div>\n      <div style={{\n        display: 'flex',\n        margin: '8px'\n      }}>\n  <div style={{\n          margin: '8px'\n        }}>\n    <Button type=\"danger\" variant=\"text\" disabled mdxType=\"Button\">Danger Button</Button>\n  </div>\n        <div style={{\n          margin: '8px'\n        }}>\n  <Button type='dark' variant='text' disabled mdxType=\"Button\">\n    Dark Button\n  </Button>\n        </div>\n        <div style={{\n          margin: '8px'\n        }}>\n  <Button type='light' variant='text' disabled mdxType=\"Button\">\n    Light Button\n  </Button>\n        </div>\n        <div style={{\n          margin: '8px'\n        }}>\n  <Button type='secondary' variant='text' disabled mdxType=\"Button\">\n    Secondary Button\n  </Button>\n        </div>\n  <div style={{\n          margin: '8px'\n        }}>\n    <Button type=\"success\" variant=\"text\" disabled mdxType=\"Button\">Success Button</Button>\n  </div>\n  </div>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import * as React from 'react';\nimport { BaseButtonProps } from '@atoms/button/types';\nimport {\n  ButtonDanger,\n  ButtonDark,\n  ButtonLight,\n  ButtonSecondary,\n  ButtonSuccess\n} from '@ions';\n\nexport const ButtonTypes = {\n  danger: ButtonDanger,\n  secondary: ButtonSecondary,\n  dark: ButtonDark,\n  light: ButtonLight,\n  success: ButtonSuccess\n};\n\ninterface Props extends BaseButtonProps {\n  type: keyof typeof ButtonTypes;\n}\n\nconst Button: React.FunctionComponent<Props> = (props: Props): JSX.Element => {\n  const renderButtonByType = ({ type, ...props }: Props): JSX.Element => {\n    const ButtonName = ButtonTypes[type];\n    if (!ButtonName) {\n      throw new Error(\n        'Unknown button type. Please refer to the documentation to see possible types'\n      );\n    }\n\n    return <ButtonName {...props} />;\n  };\n\n  return renderButtonByType(props);\n};\n\nexport default Button;\n","import * as React from 'react';\n\nexport enum ButtonVariant {\n  contained = 'contained',\n  text = 'text'\n}\n\nexport interface BaseButtonProps extends React.HTMLProps<HTMLButtonElement> {\n  /**\n   * Default is \"false\"\n   */\n  disabled?: boolean;\n  /**\n   * Default is \"contained\"\n   */\n  variant?: keyof typeof ButtonVariant;\n  children?: React.ReactNode;\n}\n","import { BasicColor, ColorExclude } from '@globals/Color.d';\n\nexport const $primary: ColorExclude<200 | 400> = {\n  100: '#cce5ea',\n  300: '#8cc4d0',\n  500: '#007c97',\n  600: '#005d71',\n  700: '#003945',\n  800: '#002e38',\n  900: '#062931'\n};\n\nexport const $secondary: BasicColor = {\n  300: '#ffc1a3',\n  500: '#ff5412',\n  700: '#b34015'\n};\n\nexport const $success: BasicColor = {\n  300: '#c1eac1',\n  500: '#20b422',\n  700: '#157917'\n};\n\nexport const $danger: BasicColor = {\n  300: '#ffe3dd',\n  500: '#ff002d',\n  700: '#8b0018'\n};\n\nexport const $warning: BasicColor = {\n  300: '#fffac1',\n  500: '#ffe900',\n  700: '#595200'\n};\n\nexport const $info: BasicColor = {\n  300: '#00b8ff',\n  500: '#007dad',\n  700: '#00e042'\n};\n\nexport const $light: ColorExclude<800> = {\n  100: '#ffffff',\n  200: '#fafafa',\n  300: '#f6f6f6',\n  400: '#e7e7e7',\n  500: '#d6d6d6',\n  600: '#9b9b9b',\n  700: '#474747',\n  900: '#191919'\n};\n\nexport const $transparent = 'transparent';\n","import styled from 'styled-components';\nimport { $light } from '@globals/colors';\n\ntype ColorTypes = 'color' | 'hoverColor' | 'activeColor';\ntype ColorProps = {\n  [color in ColorTypes]?: string;\n};\n\nexport interface Props extends ColorProps {\n  size?: number;\n  disabled?: boolean;\n}\n\nconst getSize = ({ size = 2 }) => `${size}em`;\nconst getColor = (propName: ColorTypes) => (props: Props): string =>\n  props[propName] || $light[700];\n\nconst Icon = styled.svg<Props>`\n  display: flex;\n  width: ${getSize};\n  height: ${getSize};\n  stroke-width: 0;\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')}\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor('color')};\n  opacity: ${({ disabled }): number => (disabled ? 0.2 : 1)}\n  transition: all 0.2s ease-in;\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n\nexport default Icon;\n","import styled from 'styled-components';\n\nconst Text = styled.span<{}>`\n  line-height: 1.75;\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n  font-weight: 500;\n  font-size: 0.875rem;\n`;\n\nexport default Text;\n","import * as React from 'react';\nimport styled, { DefaultTheme } from 'styled-components';\nimport { $light, $transparent } from '@globals/colors';\nimport { Text } from '@ions';\nimport { BaseButtonProps } from '@atoms/button/types';\n\ntype Theme = {\n  [key in keyof DefaultTheme]: string;\n};\n\nexport interface BaseProps extends BaseButtonProps {\n  children?: React.ReactNode;\n  theme: Theme;\n}\n\nconst getActiveColor = ({ theme }: BaseProps): string => theme.activeBackground;\n\nconst Button = styled.button<BaseProps>`\n  color: ${({ theme }): string => theme.color || $light[100]};\n  background-color: ${({ theme }): string => theme.background};\n  opacity: ${({ disabled }): number => (disabled ? 0.2 : 1)}\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')}\n  border: 1px solid ${$transparent};\n  transition: all 0.2s ease-in;\n  border-radius: 4px;  \n  line-height: 1.75;\n  padding: 6px 16px;\n  min-width: 64px;\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n  font-weight: 500;\n  font-size: 0.875rem;\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  outline: 0;\n  &:hover, &:active {\n    border: 1px solid ${({ theme }): string => theme.hoverBorder}\n  }\n  &:active {\n    background-color: ${getActiveColor};\n    border-color: ${getActiveColor}\n    color: ${({ theme }): string =>\n      theme.color !== $light[700] ? $light[100] : theme.color};\n  }\n  &:disabled span {\n    pointer-events: none;\n  }\n`;\n\nconst BaseButton: React.FunctionComponent<BaseProps> = ({\n  children,\n  ...props\n}: BaseProps) => (\n  <Button {...props}>\n    <Text>{children || 'Default'}</Text>\n  </Button>\n);\n\nexport default BaseButton;\n","import * as React from 'react';\nimport { DefaultTheme } from 'styled-components';\nimport { BaseButton } from '@ions';\nimport { $transparent } from '@globals/colors';\nimport { BaseButtonProps, ButtonVariant } from '@atoms/button/types';\n\nexport interface ThemeColors {\n  background: {\n    primary: string;\n    secondary: string;\n  };\n  text: {\n    primary: string;\n    secondary?: string;\n  };\n}\n\nexport const WithTheme = ({ background, text }: ThemeColors) => {\n  const { primary: bgPrimary, secondary: bgSecondary } = background;\n  const { primary: textPrimary, secondary: textSecondary } = text;\n\n  const transparentTheme: DefaultTheme = {\n    background: $transparent,\n    color: textSecondary || bgPrimary,\n    hoverBorder: bgPrimary,\n    activeBackground: bgSecondary\n  };\n\n  const flatTheme: DefaultTheme = {\n    background: bgPrimary,\n    color: textPrimary,\n    hoverBorder: bgSecondary,\n    activeBackground: bgSecondary\n  };\n\n  const WrappedButton = ({\n    variant = ButtonVariant.contained,\n    ...props\n  }: BaseButtonProps) => {\n    const theme = variant === ButtonVariant.text ? transparentTheme : flatTheme;\n    return <BaseButton {...props} theme={theme} />;\n  };\n  return WrappedButton;\n};\n","import { $danger, $light } from '@globals/colors';\nimport {\n  ThemeColors,\n  WithTheme\n} from '@ions/button/themes/themeWrapper/withTheme';\n\nconst dangerColors: ThemeColors = {\n  background: {\n    primary: $danger[500],\n    secondary: $danger[700]\n  },\n  text: {\n    primary: $light[100]\n  }\n};\n\nconst ButtonDanger = WithTheme(dangerColors);\n\nexport default ButtonDanger;\n","import { $light } from '@globals/colors';\nimport {\n  ThemeColors,\n  WithTheme\n} from '@ions/button/themes/themeWrapper/withTheme';\n\nconst darkColors: ThemeColors = {\n  background: {\n    primary: $light[400],\n    secondary: $light[500]\n  },\n  text: {\n    primary: $light[700],\n    secondary: $light[700]\n  }\n};\n\nconst ButtonDark = WithTheme(darkColors);\n\nexport default ButtonDark;\n","import { $light } from '@globals/colors';\nimport {\n  ThemeColors,\n  WithTheme\n} from '@ions/button/themes/themeWrapper/withTheme';\n\nconst lightColors: ThemeColors = {\n  background: {\n    primary: $light[300],\n    secondary: $light[400]\n  },\n  text: {\n    primary: $light[700],\n    secondary: $light[700]\n  }\n};\n\nconst ButtonLight = WithTheme(lightColors);\n\nexport default ButtonLight;\n","import { $light, $secondary } from '@globals/colors';\nimport {\n  ThemeColors,\n  WithTheme\n} from '@ions/button/themes/themeWrapper/withTheme';\n\nconst secondaryColors: ThemeColors = {\n  background: {\n    primary: $secondary[500],\n    secondary: $secondary[700]\n  },\n  text: {\n    primary: $light[100]\n  }\n};\n\nconst ButtonSecondary = WithTheme(secondaryColors);\n\nexport default ButtonSecondary;\n","import { $light, $success } from '@globals/colors';\nimport {\n  ThemeColors,\n  WithTheme\n} from '@ions/button/themes/themeWrapper/withTheme';\n\nconst successColors: ThemeColors = {\n  background: {\n    primary: $success[500],\n    secondary: $success[700]\n  },\n  text: {\n    primary: $light[100]\n  }\n};\n\nconst ButtonSuccess = WithTheme(successColors);\n\nexport default ButtonSuccess;\n","export { default as Icon } from '@ions/icon/Icon';\nexport { default as Text } from '@ions/text/Text';\nexport * from '@ions/button';\n"],"sourceRoot":""}