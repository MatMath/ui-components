{"version":3,"sources":["/home/oclero/Development/ui-components-github/src/components/text-input/TextInput.tsx","/home/oclero/Development/ui-components-github/src/components/text-input/TextInput.mdx","/home/oclero/Development/ui-components-github/src/components/text-input/TextInput.module.scss","/home/oclero/Development/ui-components-github/src/utility/cssUtils.ts"],"names":["TextInput","feedbackType","feedbackText","htmlInputProps","feedbackCssClass","styles","className","getClassNames","root","input","type","feedback","layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","__position","__code","__scope","this","Playground","Props","style","display","flexDirection","justifyContent","isMDXComponent","module","exports","result","classes","forEach","value","push","Object","entries","key","join"],"mappings":"ocAaaA,EAAsC,SAAC,GAI7C,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACGC,EACC,+CACEC,EACJH,GAAgBI,IAAOJ,GAAgBI,IAAOJ,GAAgB,GAEhE,OACE,uBAAKK,UAAWC,YAAcF,IAAOG,KAAMJ,IACzC,yCACMD,EADN,CAEEG,UAAWC,YAAcF,IAAOI,MAAOL,GACvCM,KAAK,UAENR,GAAgBD,EACf,wBAAMK,UAAWC,YAAcF,IAAOM,SAAUP,IAC7CF,GAED,O,0PCxBV,IAKMU,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,aADR,aAGA,+CACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIlB,EAAWiB,QAAQ,UAC9B,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,eADR,eAGA,mEACA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,gBAAiBC,QAAS,CAC3DL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAxB,aACCyB,MAAO,CACRC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBACfX,QAAQ,cACb,YAAC,EAAD,CAAWA,QAAQ,gB,6LAMrBH,EAAWe,gBAAiB,G,oECrD5BC,EAAOC,QAAU,CAAC,KAAO,wBAAwB,MAAQ,yBAAyB,QAAU,2BAA2B,MAAQ,yBAAyB,SAAW,8B,+JCWtJxB,EAAgB,WAAiD,IAC5E,IAAMyB,EAAmB,GADmD,mBAA7CC,EAA6C,yBAA7CA,EAA6C,gBAa5E,OAXAA,EAAQC,QAAQ,SAAAC,GACO,kBAAVA,EACTH,EAAOI,KAAKD,GAEZE,OAAOC,QAAQH,GAAOD,QAAQ,YAAmB,IAAD,mBAAhBK,EAAgB,WAE5CP,EAAOI,KAAKG,OAKbP,EAAOQ,KAAK,M","file":"static/js/src-components-text-input-text-input.f9913c9f.js","sourcesContent":["import * as React from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport styles from './TextInput.module.scss';\n\ntype TextInputFeedbackType = 'error' | 'warning';\ntype _ForbiddenProps = 'size' | 'prefix' | 'type';\n\ninterface TextInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, _ForbiddenProps> {\n  feedbackType?: TextInputFeedbackType;\n  feedbackText?: string;\n}\n\nexport const TextInput: React.FC<TextInputProps> = ({\n  feedbackType,\n  feedbackText,\n  ...htmlInputProps\n}) => {\n  const feedbackCssClass =\n    feedbackType && styles[feedbackType] ? styles[feedbackType] : '';\n\n  return (\n    <div className={getClassNames(styles.root, feedbackCssClass)}>\n      <input\n        {...htmlInputProps}\n        className={getClassNames(styles.input, feedbackCssClass)}\n        type='text'\n      />\n      {feedbackText && feedbackType ? (\n        <span className={getClassNames(styles.feedback, feedbackCssClass)}>\n          {feedbackText}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { TextInput } from './TextInput';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`A text input component`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={TextInput} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show usage of the TextInput`}</p>\n    <Playground __position={1} __code={'<TextInput />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TextInput\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <TextInput mdxType=\"TextInput\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TextInput_root__36KLL\",\"input\":\"TextInput_input__2PlqE\",\"warning\":\"TextInput_warning__14SYn\",\"error\":\"TextInput_error__2jlAE\",\"feedback\":\"TextInput_feedback__3ZSkk\"};","interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (typeof value === 'string') {\n      result.push(value);\n    } else {\n      Object.entries(value).forEach(([key, value]) => {\n        if (value) {\n          result.push(key);\n        }\n      });\n    }\n  });\n  return result.join(' ');\n};\n"],"sourceRoot":""}