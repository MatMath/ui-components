{"version":3,"sources":["/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/tooltip/helpers.ts","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/tooltip/Tooltip.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/colors/colors.ts","/Users/agauvrit/Dashlane/projects/ui-components/src/utility/helpers.ts","/Users/agauvrit/Dashlane/projects/ui-components/src/utility/positionCompute.ts"],"names":["rightTooltipStyle","leftTooltipStyle","bottomTooltipStyle","handleTooltipPosition","placement","assertUnreachable","handleTooltipArrowPosition","getTooltipBgColorByType","type","dashGreen00","validatorGreen","functionalRed02","isTooltipOutOfContainer","elementDimensions","containerDimensions","rect","top","totalHeight","minHeight","left","width","totalWidth","maxWidth","minWidth","height","maxHeight","removeOutOfScreenPlacement","possibilities","filter","possiblePlacement","TooltipWrapper","styled","span","white","options","tooltipMaxWidth","Tooltip","props","ref","React","coordinates","tooltipPossiblePlacements","defaultPlacement","onHover","event","target","currentTarget","previousTop","previousLeft","getBoundingRect","positionTooltip","cloneChildren","title","child","key","onMouseEnter","state","prevProps","prevState","this","current","getElementDimensions","containerElement","container","window","getContainerBoundaries","getElementPlacement","setState","e","console","error","children","childrenWithProps","map","dashGreen01","dashGreen02","dashGreen03","dashGreen04","dashGreen05","dashGreen06","dashDarkerGreen00","midGreen00","midGreen01","midGreen03","pink00","pink01","pink02","pink03","pink04","pink05","functionalRed00","functionalRed01","red00","red01","red02","red03","red04","red05","grey00","grey01","grey02","grey03","grey04","grey05","grey06","black","transparent","_","Error","containsNumber","value","test","containsChar","char","indexOf","checkIsStyleComputed","style","returnNumber","isNaN","computeElementHeight","elementStyle","alternativeHeight","parseInt","paddingTop","paddingBottom","marginTop","marginBottom","computeElementWidth","tooltipStyle","alternativeWidth","paddingLeft","paddingRight","marginLeft","marginRight","getAlternativeStyle","initialStyle","element","innerDiv","document","createElement","Object","values","forEach","property","toString","appendChild","getBoundingClientRect","remove","right","bottom","innerHeight","innerWidth","containerRect","getCSSComputedStyle","getBeforePseudoElement","getComputedStyle","undefined","menuRef","elementIsBefore","dropdownStyle","isElementOutOfContainerMethod","newPossibilities"],"mappings":"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","file":"static/js/src-atoms-dropdown-menu-dropdown-menu~src-atoms-tooltip-tooltip~src-molecules-quick-actions-menu-qui~5e183e60.6a65757b.js","sourcesContent":["import { dashGreen00, functionalRed02, validatorGreen } from '@colors';\nimport { assertUnreachable } from '@utility/helpers';\nimport { WrapperProps } from './Tooltip';\nimport { Placement, TooltipType } from './types';\nimport { IsElementOutOfContainerMethod } from '@utility/positionCompute';\nexport const tooltipMargin = 10;\nconst rightTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: ${tooltipMargin}px;\n`;\n\nconst leftTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: ${tooltipMargin}px;\n`;\n\nconst topTooltipStyle = `\n  margin-bottom: 10px;\n  bottom: 100%;\n  left: 50%;\n`;\n\nconst bottomTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  left: 50%;\n  top: 100%;\n  margin-top: ${tooltipMargin}px;\n`;\n\nconst topTooltipArrowStyle = `\n  margin-bottom: 5px;\n  bottom: 100%;\n  transform: translate(-50%, 0);\n  left: 50%;\n`;\n\nconst rightTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(90deg) translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: -2px;\n  margin-top: -4px;\n`;\n\nconst leftTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(-90deg) translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: -2px;\n  margin-top: -4px;\n`;\n\nconst bottomTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(180deg) translate(-50%, 0);\n  top: 100%;\n  left: unset;\n  right: 50%\n  margin-top: 5px;\n`;\n\nexport const handleTooltipPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipStyle;\n    case 'right':\n      return rightTooltipStyle;\n    case 'left':\n      return leftTooltipStyle;\n    case 'bottom':\n      return bottomTooltipStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const handleTooltipArrowPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipArrowStyle;\n    case 'right':\n      return rightTooltipArrowStyle;\n    case 'left':\n      return leftTooltipArrowStyle;\n    case 'bottom':\n      return bottomTooltipArrowStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const getTooltipBgColorByType = (type: TooltipType) => {\n  switch (type) {\n    case 'info':\n      return dashGreen00;\n    case 'success':\n      return validatorGreen;\n    case 'error':\n      return functionalRed02;\n    default:\n      return assertUnreachable(type);\n  }\n};\n\nexport const isTooltipOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }): boolean => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n          containerDimensions.maxHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'right':\n      return (\n        elementDimensions.rect.left +\n          elementDimensions.rect.width +\n          elementDimensions.totalWidth >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n    case 'left':\n      return (\n        elementDimensions.rect.left - elementDimensions.totalWidth <\n          containerDimensions.minWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\nexport const removeOutOfScreenPlacement = (\n  possibilities: Placement[],\n  placement: Placement\n) => {\n  return possibilities.filter(\n    possiblePlacement => possiblePlacement !== placement\n  );\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { white } from '@colors';\nimport { Placement } from '@atoms/tooltip/types';\nimport {\n  getTooltipBgColorByType,\n  handleTooltipArrowPosition,\n  handleTooltipPosition,\n  isTooltipOutOfContainer\n} from '@atoms/tooltip/helpers';\nimport {\n  getBoundingRect,\n  getContainerBoundaries,\n  getElementDimensions,\n  getElementPlacement\n} from '@utility/positionCompute';\n\nexport interface Props {\n  title: string;\n  /**\n   * The position of the tooltip\n   * @default top\n   */\n  placement?: 'right' | 'left' | 'top' | 'bottom';\n  /**\n   * A type that defines the tooltip color\n   * @default info\n   */\n  type?: 'info' | 'success' | 'error';\n  /**\n   * Extra options\n   * @default {tooltipMaxWidth: 300 (in px), container: window}\n   */\n  options?: {\n    /**\n     * A max width for the tooltip\n     */\n    tooltipMaxWidth?: number;\n    /**\n     * An element as a container (if not the default window)\n     */\n    container?: React.RefObject<HTMLElement>;\n  };\n}\n\ninterface State {\n  placement: Placement | null;\n}\n\nexport type WrapperProps = Omit<Required<Props>, 'title'>;\n\nconst TooltipWrapper = styled.span<WrapperProps>`\n  > :first-child:hover {\n    position: relative;\n  }\n\n  > :first-child::before {\n    font-family: inherit;\n    visibility: hidden;\n    opacity: 0;\n    font-size: 0.75rem;\n    line-height: 1.25;\n    display: inline-block;\n    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    padding: 8px;\n    background-color: ${({ type }: WrapperProps) =>\n      getTooltipBgColorByType(type)};\n    content: attr(data-tooltip);\n    color: ${white};\n    position: absolute;\n    max-width: ${({ options }: WrapperProps) =>\n      options.tooltipMaxWidth ? `${options.tooltipMaxWidth}px` : '300px'};\n    width: max-content;\n    @supports (-ms-ime-align: auto) {\n      min-width: 50px;\n    }\n    word-wrap: break-word;\n    transform: translate(-50%, 0);\n    text-align: center;\n    z-index: 1001;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipPosition}\n  }\n\n  > :first-child:hover::before {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  > :first-child::after {\n    display: inline-block;\n    visibility: hidden;\n    opacity: 0;\n    width: 0;\n    height: 0;\n    border-left: 7px solid transparent;\n    border-right: 7px solid transparent;\n    border-top: 7px solid\n      ${({ type }: WrapperProps) => getTooltipBgColorByType(type)};\n    position: absolute;\n    content: '';\n    z-index: 1002;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipArrowPosition}\n  }\n\n  > :first-child:hover::after {\n    visibility: visible;\n    opacity: 1;\n  }\n`;\n\nclass Tooltip extends React.PureComponent<Props, State> {\n  private ref: React.RefObject<HTMLElement> = React.createRef();\n  private coordinates: { top: number | null; left: number | null };\n  private readonly tooltipPossiblePlacements: Placement[] = [];\n  private readonly defaultPlacement: Placement;\n\n  public constructor(props: Props) {\n    super(props);\n    this.defaultPlacement = 'top';\n    this.state = {\n      placement: props.placement || this.defaultPlacement\n    };\n    this.tooltipPossiblePlacements = ['top', 'left', 'right', 'bottom'];\n    this.coordinates = {\n      top: null,\n      left: null\n    };\n  }\n\n  public componentDidUpdate(prevProps: Props, prevState: State): void {\n    // if state is the same (the update came from prop change) do calculate else if state changed (update caused by new positioning) do not calculate again\n    if (prevState.placement !== this.state.placement || !this.ref) {\n      return;\n    }\n    this.positionTooltip();\n  }\n\n  private onHover = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.currentTarget;\n    const { top: previousTop, left: previousLeft } = this.coordinates;\n    const { top, left } = getBoundingRect(target);\n\n    if (top === previousTop && left === previousLeft) {\n      return;\n    }\n\n    this.coordinates = { ...this.coordinates, ...{ top, left } };\n    this.positionTooltip();\n  };\n\n  private positionTooltip() {\n    if (!this.ref.current) {\n      return;\n    }\n    const isBeforePseudoElement = true;\n    const elementDimensions = getElementDimensions(\n      this.ref,\n      isBeforePseudoElement\n    );\n\n    const containerElement =\n      (this.props.options &&\n        this.props.options.container &&\n        this.props.options.container.current) ||\n      window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n    try {\n      const placement = getElementPlacement<Placement>(\n        isTooltipOutOfContainer,\n        this.props.placement || this.defaultPlacement,\n        this.tooltipPossiblePlacements,\n        elementDimensions,\n        containerDimensions\n      );\n      this.setState({ placement: placement });\n    } catch (e) {\n      console.error('Error while computing DropdownMenu position', e);\n    }\n  }\n\n  private cloneChildren = (title: string) => (\n    child: React.ReactNode,\n    key: number\n  ) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        'data-tooltip': title,\n        onMouseEnter: this.onHover,\n        ref: key === 0 && this.ref\n      });\n    }\n  };\n\n  public render() {\n    const {\n      title = 'Default',\n      type = 'info',\n      children,\n      options = {}\n    } = this.props;\n    const childrenWithProps = React.Children.map(\n      children,\n      this.cloneChildren(title)\n    );\n\n    return (\n      <TooltipWrapper\n        type={type}\n        placement={this.state.placement || this.defaultPlacement}\n        options={options}\n      >\n        {childrenWithProps}\n      </TooltipWrapper>\n    );\n  }\n}\n\nexport default Tooltip;\n","/* -- DASH_GREEN -- */\nexport const dashGreen00 = '#0E353D';\nexport const dashGreen01 = '#3E5D64';\nexport const dashGreen02 = '#6E868B';\nexport const dashGreen03 = '#9FAEB1';\nexport const dashGreen04 = '#CFD7D8';\nexport const dashGreen05 = '#D9DFE0';\nexport const dashGreen06 = '#F5F7F7';\n\n/* -- DASH_DARKER_GREEN -- */\nexport const dashDarkerGreen00 = '#071A1E';\n\n/* -- MID_GREEN -- */\nexport const midGreen00 = '#0E6476';\nexport const midGreen01 = '#3E8391';\nexport const midGreen02 = '#6EA2AD';\nexport const midGreen03 = '#9FC1C8';\nexport const midGreen04 = '#CFE0E4';\nexport const midGreen05 = '#D9E6E9';\n\n/* -- PINK -- */\nexport const pink00 = '#FDB5AF';\nexport const pink01 = '#FDC4BF';\nexport const pink02 = '#FED3CF';\nexport const pink03 = '#FEE1DF';\nexport const pink04 = '#FFF0EF';\nexport const pink05 = '#FFF3F2';\n\n/* -- ORANGE -- */\nexport const orange00 = '#FE5B33';\nexport const orange01 = '#FE7C5C';\nexport const orange02 = '#FE9D85';\nexport const orange03 = '#FFBDAD';\nexport const orange04 = '#FFDED6';\nexport const orange05 = '#FFE5DE';\n\n/* -- FUNCTIONAL_RED -- */\nexport const functionalRed00 = '#4E000D';\nexport const functionalRed01 = '#8B0018';\nexport const functionalRed02 = '#FF002D';\nexport const functionalRed03 = '#FFA49F';\n\n/* -- RED -- */\nexport const red00 = '#BF0A33';\nexport const red01 = '#CC3B5C';\nexport const red02 = '#D96C85';\nexport const red03 = '#E59DAD';\nexport const red04 = '#F2CED6';\nexport const red05 = '#F5D8DE';\n\n/* -- GREY -- */\nexport const grey00 = '#615B57';\nexport const grey01 = '#999592';\nexport const grey02 = '#CCC7C2';\nexport const grey03 = '#D6D2CE';\nexport const grey04 = '#E0DDDA';\nexport const grey05 = '#EBE9E7';\nexport const grey06 = '#F5F4F3';\n\n/* -- BLACK -- */\nexport const black = '#000000';\n\n/* -- WHITE -- */\nexport const white = '#FFFFFF';\n\n/* -- VALIDATOR_GREEN -- */\nexport const validatorGreen = '#20B422';\n\n/* -- TRANSPARENT -- */\nexport const transparent = 'transparent';\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n","/** Both tooltips and dropdown use the DOM to make sure\n * they are fitting in a container\n */\n\nconst containsNumber = (value: string) => /\\d/.test(value);\nconst containsChar = (value: string, char: string) =>\n  value.indexOf(char) !== -1;\n\nexport const checkIsStyleComputed = (style: CSSStyleDeclaration) => {\n  const { height, width } = style;\n  if (!height || !width) {\n    return false;\n  }\n\n  return (\n    containsNumber(height) ||\n    containsNumber(width) ||\n    !containsChar(height, '%') ||\n    !containsChar(width, '%')\n  );\n};\n\nconst returnNumber = (value: number) => (isNaN(value) ? 0 : value);\n\nexport const computeElementHeight = (\n  elementStyle: CSSStyleDeclaration,\n  alternativeHeight: string | null\n) => {\n  const height =\n    parseInt(elementStyle.paddingTop || '0', 10) +\n    parseInt(elementStyle.paddingBottom || '0', 10) +\n    parseInt(elementStyle.marginTop || '0', 10) +\n    parseInt(elementStyle.marginBottom || '0', 10) +\n    parseInt(alternativeHeight || elementStyle.height || '0', 10);\n  return returnNumber(height);\n};\n\nexport const computeElementWidth = (\n  tooltipStyle: CSSStyleDeclaration,\n  alternativeWidth: string | null\n) => {\n  const width =\n    parseInt(tooltipStyle.paddingLeft || '0', 10) +\n    parseInt(tooltipStyle.paddingRight || '0', 10) +\n    parseInt(tooltipStyle.marginLeft || '0', 10) +\n    parseInt(tooltipStyle.marginRight || '0', 10) +\n    parseInt(alternativeWidth || tooltipStyle.width || '0', 10);\n\n  return returnNumber(width);\n};\n\nexport const getAlternativeStyle = (\n  initialStyle: CSSStyleDeclaration,\n  element: EventTarget | null\n) => {\n  let innerDiv = document.createElement('div');\n  (Object.values(initialStyle) as (keyof CSSStyleDeclaration)[]).forEach(\n    property => {\n      if (\n        property &&\n        property !== 'length' &&\n        property !== 'parentRule' &&\n        !containsNumber(property.toString())\n      ) {\n        innerDiv.style[property] = initialStyle[property];\n      }\n    }\n  );\n  (element as Element).appendChild(innerDiv);\n  let { height, width } = innerDiv.getBoundingClientRect();\n  innerDiv.remove();\n\n  return { height: height.toString(), width: width.toString() };\n};\n\nexport const getBoundingRect = (element: Element | null): ClientRect => {\n  if (element) {\n    return element.getBoundingClientRect();\n  } else {\n    return {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      width: 0,\n      height: 0\n    };\n  }\n};\n\nexport const getContainerBoundaries = (\n  container: Element | Window\n): ContainerDimensions => {\n  if (container === window) {\n    return {\n      maxHeight: window.innerHeight,\n      minHeight: 0,\n      maxWidth: window.innerWidth,\n      minWidth: 0\n    };\n  }\n  const containerRect = getBoundingRect(container as Element);\n\n  return {\n    maxHeight: containerRect.top + containerRect.height,\n    minHeight: containerRect.top,\n    minWidth: containerRect.left,\n    maxWidth: containerRect.left + containerRect.width\n  };\n};\n\nexport const getCSSComputedStyle = (\n  ref: Element | null,\n  getBeforePseudoElement?: boolean\n) =>\n  window.getComputedStyle(\n    ref as Element,\n    getBeforePseudoElement ? ':before' : undefined\n  );\n\nexport const getElementDimensions = (\n  menuRef: React.RefObject<HTMLElement>,\n  elementIsBefore?: boolean\n): ElementDimensions => {\n  const dropdownStyle = getCSSComputedStyle(menuRef.current, elementIsBefore);\n  const isStyleComputed = checkIsStyleComputed(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, menuRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(menuRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport interface ElementDimensions {\n  rect: ClientRect;\n  totalHeight: number;\n  totalWidth: number;\n}\n\ninterface ContainerDimensions {\n  maxHeight: number;\n  maxWidth: number;\n  minHeight: number;\n  minWidth: number;\n}\n\nexport type IsElementOutOfContainerMethod<T> = (params: {\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n  placement: T;\n}) => boolean;\n\nexport const getElementPlacement = <T>(\n  isElementOutOfContainerMethod: IsElementOutOfContainerMethod<T>,\n  placement: T,\n  possibilities: T[],\n  elementDimensions: ElementDimensions,\n  containerDimensions: ContainerDimensions\n): T | null => {\n  if (!placement) {\n    throw new Error(\n      'Element cannot be displayed in the container Element/Window due to its incompatible size.' +\n        'Please consider reducing it or better position tooltiped' +\n        'element in the screen.'\n    );\n  }\n\n  if (\n    !isElementOutOfContainerMethod({\n      elementDimensions,\n      containerDimensions,\n      placement\n    })\n  ) {\n    return placement;\n  }\n\n  const newPossibilities = possibilities.filter(\n    possiblePlacement => placement !== possiblePlacement\n  );\n  const [firstPossiblePlacement] = newPossibilities;\n\n  return getElementPlacement(\n    isElementOutOfContainerMethod,\n    firstPossiblePlacement,\n    newPossibilities,\n    elementDimensions,\n    containerDimensions\n  );\n};\n"],"sourceRoot":""}