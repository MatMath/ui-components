{"version":3,"sources":["/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/icon/Icon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/base/SvgIcon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/icons/CopyPasswordIcon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/icons/EditIcon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/wrapper/SvgIconWrapper.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/wrapper/SvgIconWrapper.mdx","/Users/agauvrit/Dashlane/Projects/ui-components/src/colors/colors.ts","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/helpers/themeHelper.ts","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/base/BaseButton.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/helpers/ThemedButton.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/light/ButtonLight.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/text/StyledText.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/utility/helpers.ts"],"names":["getSize","size","getColor","propName","props","animated","Icon","styled","svg","attrs","viewBox","version","xmlns","disabled","SvgIcon","title","children","isAnimated","Array","from","find","child","type","isAnimatedSvg","CopyPasswordIcon","d","fillRule","clipRule","EditIcon","SvgIconWrapper","ButtonLight","variant","style","minWidth","padding","height","makeShortcode","name","console","warn","CopyPassword","Edit","layoutProps","MDXContent","components","mdxType","of","__position","__code","__scope","this","Playground","Props","display","justifyContent","flexDirection","isMDXComponent","pink00","pink01","pink02","pink03","pink04","pink05","red00","red01","red02","red03","red04","red05","grey00","grey01","grey02","grey03","grey04","grey05","grey06","black","white","getThemeByVariant","colors","background","text","border","bgPrimary","primary","bgSecondary","secondary","bgTertiary","tertiary","textPrimary","textSecondary","borderPrimary","borderSecondary","borderTertiary","$transparent","color","hover","active","assertUnreachable","Button","button","large","theme","$light","BaseButton","StyledText","ThemedButton","lightColors","fontFamily","css","span","_","Error"],"mappings":"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","file":"static/js/src-atoms-svg-wrapper-svg-icon-wrapper.32a7cfe9.js","sourcesContent":["import styled from 'styled-components';\nimport { Props as IconProps } from '@atoms/svg/base/SvgIcon';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getSize = ({ size = 20 }) => `${size}px`;\nconst getColor = (propName: ColorProps) => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || 'inherit';\n\nconst Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getSize};\n  height: ${getSize};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')};\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor('color')};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)};\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n\nexport default Icon;\n","import * as React from 'react';\nimport Icon from '@ions/icon/Icon';\n\nexport interface Props {\n  /**\n   * The svg content to display\n   */\n  children: React.ReactElement;\n  /**\n   * The icon title (displayed on svg hover)\n   */\n  title?: string;\n  /**\n   * The icon size in px\n   * @default 20px\n   */\n  size?: number;\n  /**\n   * A disabled state for the icon wrapper\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The icon color\n   * @default 'inherit' (parent's fill property)\n   */\n  color?: string;\n  /**\n   * The icon color when hovered\n   * @default  'inherit' (parent's fill property)\n   */\n  hoverColor?: string;\n  /**\n   * The icon color when active\n   * @default 'inherit' (parent's fill property)\n   */\n  activeColor?: string;\n  /**\n   * Allows to redefine the coordinates of the SVG element.\n   * @default '0 0 20 20'\n   **/\n  viewBox?: string;\n}\n\nexport type IconProps = Pick<Props, Exclude<keyof Props, 'children'>>; // Using this rather than Omit<Props, 'children'> because Docz is not able to understand the Omit syntax and to parse the props\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\nconst SvgIcon: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n\nexport default SvgIcon;\n","import * as React from 'react';\nimport SvgIcon from '@atoms/svg/base/SvgIcon';\n\nconst CopyPasswordIcon: React.FunctionComponent<import('../base/SvgIcon').IconProps> = (\n  props: import('../base/SvgIcon').IconProps\n): JSX.Element => (\n  <SvgIcon {...props}>\n    <React.Fragment>\n      <path d='M12.25 9.75V10.75H13.25V12.25H12.25V13.25H10.75V12.25H9.75V10.75H10.75V9.75H12.25Z' />{' '}\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M6.5 17.5H16.5V5.50006H6.5V17.5ZM15 7.00006V16H8V7.00006H15Z'\n      />{' '}\n      <path d='M3.5 5.07142H5V4H7.7857V2.5H3.5V5.07142Z' />{' '}\n      <path d='M9.21427 2.5H13.5V5.07142H12V4H9.21427V2.5Z' />{' '}\n      <path d='M6.5 14.5V13H5V11.9286H3.5V14.5H6.5Z' />{' '}\n      <path d='M3.5 11.0714V5.92856H5V11.0714H3.5Z' />{' '}\n    </React.Fragment>\n  </SvgIcon>\n);\n\nexport default CopyPasswordIcon;\n","import * as React from 'react';\nimport SvgIcon from '@atoms/svg/base/SvgIcon';\n\nconst EditIcon: React.FunctionComponent<import('../base/SvgIcon').IconProps> = (\n  props: import('../base/SvgIcon').IconProps\n): JSX.Element => (\n  <SvgIcon {...props}>\n    <React.Fragment>\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M14.8833 1L19 5.11667L16.6355 7.48114L15.5802 6.42584L16.8894 5.11667L14.8833 3.1106L13.5742 4.41977L12.5189 3.36447L14.8833 1ZM11.2097 4.67365L15.3264 8.79032L6.48889 17.6278L1 19L2.37222 13.5111L11.2097 4.67365ZM3.71982 14.2741L3.05113 16.9489L5.7259 16.2802L13.2158 8.79032L11.2097 6.78424L3.71982 14.2741Z'\n      />\n    </React.Fragment>\n  </SvgIcon>\n);\n\nexport default EditIcon;\n","import * as React from 'react';\nimport { ButtonLight } from '@ions/button/themes';\nimport { Props as SvgProps } from '@atoms/svg/base/SvgIcon';\n\ninterface Props {\n  /**\n   * The icon to wrap\n   */\n  children: React.ReactElement<SvgProps, 'svg'>;\n}\n\n// const IconWrapper = styled(ButtonLight)` // Unused currently due to styled-components tree-shaking issues.\n//   min-width: 0;\n//   padding: 6px;\n//   height: 100%;\n// `;\n\nconst SvgIconWrapper: React.FunctionComponent<Props> = ({\n  children,\n  ...props\n}: Props): JSX.Element => (\n  <ButtonLight\n    variant='text'\n    {...props}\n    style={{ minWidth: 0, padding: '6px', height: '100%' }}\n  >\n    {children}\n  </ButtonLight>\n);\n\nexport default SvgIconWrapper;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport SvgIconWrapper from './SvgIconWrapper';\nimport EditIcon from '../icons/EditIcon';\nimport CopyPasswordIcon from '../icons/CopyPasswordIcon';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst CopyPassword = makeShortcode(\"CopyPassword\");\nconst Edit = makeShortcode(\"Edit\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"svgiconwrapper\"\n    }}>{`SvgIconWrapper`}</h1>\n    <p>{`This is a simple button wrapper for your svg icons`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={SvgIconWrapper} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <Playground __position={1} __code={'<SvgIconWrapper>\\n  <CopyPassword />\\n</SvgIconWrapper>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIconWrapper,\n      EditIcon,\n      CopyPasswordIcon\n    }} style={{\n      display: 'flex',\n      justifyContent: 'center'\n    }} mdxType=\"Playground\">\n  <SvgIconWrapper mdxType=\"SvgIconWrapper\">\n    <CopyPassword mdxType=\"CopyPassword\" />\n  </SvgIconWrapper>\n    </Playground>\n    <h3 {...{\n      \"id\": \"the-contained-svg-can-have-a-bigger-size\"\n    }}>{`The contained svg can have a bigger size`}</h3>\n    <Playground __position={2} __code={'<SvgIconWrapper>\\n  <Edit />\\n</SvgIconWrapper>\\n<SvgIconWrapper>\\n  <Edit size={3} />\\n</SvgIconWrapper>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIconWrapper,\n      EditIcon,\n      CopyPasswordIcon\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <SvgIconWrapper mdxType=\"SvgIconWrapper\">\n    <Edit mdxType=\"Edit\" />\n  </SvgIconWrapper>\n  <SvgIconWrapper mdxType=\"SvgIconWrapper\">\n    <Edit size={3} mdxType=\"Edit\" />\n  </SvgIconWrapper>\n    </Playground>\n    <h3 {...{\n      \"id\": \"as-in-the-example-below-for-a-disabled-behaviour-wrapper-should-be-disabled-and-icons-as-well\"\n    }}>{`As in the example below, for a disabled behaviour, wrapper should be disabled and icons as well`}</h3>\n    <Playground __position={3} __code={'<SvgIconWrapper disabled>\\n  <CopyPassword disabled />\\n</SvgIconWrapper>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIconWrapper,\n      EditIcon,\n      CopyPasswordIcon\n    }} style={{\n      display: 'flex',\n      justifyContent: 'center'\n    }} mdxType=\"Playground\">\n  <SvgIconWrapper disabled mdxType=\"SvgIconWrapper\">\n    <CopyPassword disabled mdxType=\"CopyPassword\" />\n  </SvgIconWrapper>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","/* -- DASH_GREEN -- */\nexport const dashGreen00 = '#0E353D';\nexport const dashGreen01 = '#3E5D64';\nexport const dashGreen02 = '#6E868B';\nexport const dashGreen03 = '#9FAEB1';\nexport const dashGreen04 = '#CFD7D8';\nexport const dashGreen05 = '#D9DFE0';\nexport const dashGreen06 = '#F5F7F7';\n\n/* -- DASH_DARKER_GREEN -- */\nexport const dashDarkerGreen00 = '#071A1E';\n\n/* -- MID_GREEN -- */\nexport const midGreen00 = '#0E6476';\nexport const midGreen01 = '#3E8391';\nexport const midGreen02 = '#6EA2AD';\nexport const midGreen03 = '#9FC1C8';\nexport const midGreen04 = '#CFE0E4';\nexport const midGreen05 = '#D9E6E9';\n\n/* -- PINK -- */\nexport const pink00 = '#FDB5AF';\nexport const pink01 = '#FDC4BF';\nexport const pink02 = '#FED3CF';\nexport const pink03 = '#FEE1DF';\nexport const pink04 = '#FFF0EF';\nexport const pink05 = '#FFF3F2';\n\n/* -- ORANGE -- */\nexport const orange00 = '#FE5B33';\nexport const orange01 = '#FE7C5C';\nexport const orange02 = '#FE9D85';\nexport const orange03 = '#FFBDAD';\nexport const orange04 = '#FFDED6';\nexport const orange05 = '#FFE5DE';\n\n/* -- FUNCTIONAL_RED -- */\nexport const functionalRed00 = '#4E000D';\nexport const functionalRed01 = '#8B0018';\nexport const functionalRed02 = '#FF002D';\nexport const functionalRed03 = '#FFA49F';\n\n/* -- RED -- */\nexport const red00 = '#BF0A33';\nexport const red01 = '#CC3B5C';\nexport const red02 = '#D96C85';\nexport const red03 = '#E59DAD';\nexport const red04 = '#F2CED6';\nexport const red05 = '#F5D8DE';\n\n/* -- GREY -- */\nexport const grey00 = '#615B57';\nexport const grey01 = '#999592';\nexport const grey02 = '#CCC7C2';\nexport const grey03 = '#D6D2CE';\nexport const grey04 = '#E0DDDA';\nexport const grey05 = '#EBE9E7';\nexport const grey06 = '#F5F4F3';\n\n/* -- BLACK -- */\nexport const black = '#000000';\n\n/* -- WHITE -- */\nexport const white = '#FFFFFF';\n\n/* -- VALIDATOR_GREEN -- */\nexport const validatorGreen = '#20B422';\n","import { DefaultTheme } from 'styled-components';\nimport { $transparent } from '@colors';\nimport { ButtonVariant } from '@atoms/button/types';\nimport { assertUnreachable } from '@utility/helpers';\nimport { ThemeColors } from '@ions/button/themes/helpers/ThemedButton';\n\nexport const getThemeByVariant = (\n  colors: ThemeColors,\n  variant: ButtonVariant = 'contained'\n): DefaultTheme => {\n  const { background, text, border } = colors;\n  const {\n    primary: bgPrimary,\n    secondary: bgSecondary,\n    tertiary: bgTertiary\n  } = background;\n  const { primary: textPrimary, secondary: textSecondary } = text;\n  const {\n    primary: borderPrimary,\n    secondary: borderSecondary,\n    tertiary: borderTertiary\n  } = border;\n\n  switch (variant) {\n    case 'text':\n      return {\n        background: $transparent,\n        color: textSecondary || textPrimary,\n        hover: {\n          border: borderSecondary,\n          background: $transparent\n        },\n        active: {\n          color: textPrimary,\n          background: bgPrimary\n        },\n        disabled: {\n          color: borderTertiary || bgTertiary\n        }\n      };\n    case 'contained':\n      return {\n        background: bgPrimary,\n        color: textPrimary,\n        hover: {\n          background: bgSecondary\n        },\n        active: {\n          border: borderPrimary,\n          background: bgSecondary\n        },\n        disabled: {\n          color: borderTertiary || textPrimary,\n          background: bgTertiary\n        }\n      };\n\n    default:\n      return assertUnreachable(variant);\n  }\n};\n","import * as React from 'react';\nimport styled, { DefaultTheme } from 'styled-components';\nimport { $light, $transparent } from '@colors';\nimport { StyledText } from '@ions/text/StyledText';\nimport { Props } from '@atoms/button/Button';\n\nexport type BaseButtonProps = Omit<Props, 'nature' | 'variant'>;\n\ntype Theme = {\n  [key in keyof DefaultTheme]: DefaultTheme[key];\n};\n\nexport interface BaseProps extends BaseButtonProps {\n  children?: React.ReactNode;\n  theme: Theme;\n}\n\nconst getActiveBackground = ({ theme }: BaseProps): string =>\n  theme.active.background;\nconst getActiveColor = ({ theme }: BaseProps): string =>\n  theme.active.color || theme.color;\nconst getActiveBorderColor = ({ theme }: BaseProps): string =>\n  theme.active.border || $transparent;\nconst getHoverBackground = ({ theme }: BaseProps): string =>\n  theme.hover.background;\nconst getHoverColor = ({ theme }: BaseProps): string => theme.color;\nconst getHoverBorderColor = ({ theme }: BaseProps): string =>\n  theme.hover.border || $transparent;\nconst getBgColor = ({ disabled, theme }: BaseProps) =>\n  disabled ? theme.disabled.background : theme.background;\nconst getColor = ({ disabled, theme }: BaseProps) =>\n  disabled ? theme.disabled.color : theme.color;\n\nconst Button = styled.button<BaseProps>`\n  height: ${({ large = false }) => (large ? '48px' : '32px')};\n  color: ${getColor || $light[100]};\n  background-color: ${getBgColor};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')};\n  border: solid ${$transparent};\n  border-width: ${({ theme }) => (theme.active.border ? '2px' : '1px')};\n  border-radius: 4px;\n  line-height: 1.75;\n  padding: ${({ large = false }) => (large ? '0 24px' : '0 16px')};\n  min-width: 64px;\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  outline: 0;\n  &:hover {\n    color: ${getHoverColor};\n    border-color: ${getHoverBorderColor};\n    background-color: ${getHoverBackground};\n    transition: border-color 0.1s ease-in-out, background-color 0.1s ease-in-out;\n  }\n  &:active {\n    color: ${getActiveColor};\n    border-color: ${getActiveBorderColor};\n    background-color: ${getActiveBackground};\n    transition: color 0.1s ease-in-out, background-color 0.1s ease-in-out;\n  }\n\n  &:disabled {\n    span {\n      pointer-events: none;\n    }\n    &:hover {\n      border-color: ${$transparent};\n    }\n  }\n`;\n\nconst BaseButton: React.FunctionComponent<BaseProps> = ({\n  children,\n  ...props\n}: BaseProps) => (\n  <Button {...props}>\n    <StyledText large={props.large}>{children || 'Default'}</StyledText>\n  </Button>\n);\n\nexport default BaseButton;\n","import * as React from 'react';\nimport { Props as ButtonProps } from '@atoms/button/Button';\nimport { getThemeByVariant } from '@ions/button/themes/helpers/themeHelper';\nimport { BaseButton } from '@ions/index';\n\nexport interface ThemeColors {\n  background: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n  };\n  text: {\n    primary: string;\n    secondary?: string;\n  };\n  border: {\n    primary: string;\n    secondary: string;\n    tertiary?: string;\n  };\n}\n\nexport type ThemedButtonProps = Omit<ButtonProps, 'nature'>;\n\ninterface Props extends ThemedButtonProps {\n  colors: ThemeColors;\n}\n\nexport const ThemedButton = ({ colors, ...props }: Props) => {\n  const theme = getThemeByVariant(colors, props.variant);\n\n  return <BaseButton theme={theme} {...props} />;\n};\n","import * as React from 'react';\nimport { $light } from '@colors';\nimport {\n  ThemeColors,\n  ThemedButton,\n  ThemedButtonProps\n} from '@ions/button/themes/helpers/ThemedButton';\n\nconst lightColors: ThemeColors = {\n  background: {\n    primary: $light[300],\n    secondary: $light[400],\n    tertiary: $light[200]\n  },\n  text: {\n    primary: $light[700]\n  },\n  border: {\n    primary: $light[500],\n    secondary: $light[300],\n    tertiary: $light[600]\n  }\n};\n\nconst ButtonLight = (props: ThemedButtonProps) => (\n  <ThemedButton colors={lightColors} {...props} />\n);\n\nexport default ButtonLight;\n","import styled, { css } from 'styled-components';\n\ninterface TextProps {\n  large?: boolean;\n}\n\nexport const fontFamily = css`\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n`;\nexport const StyledText = styled.span<TextProps>`\n  ${fontFamily}\n  font-weight: 600;\n  line-height: 1.125rem;\n  font-size: ${({ large }) => (large ? '1.125rem' : '1rem')};\n  display: flex;\n`;\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n"],"sourceRoot":""}