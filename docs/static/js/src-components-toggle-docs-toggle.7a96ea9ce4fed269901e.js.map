{"version":3,"sources":["/Users/pducolin/repos/ui-components/src/components/Toggle/Toggle.tsx","/Users/pducolin/repos/ui-components/src/components/Toggle/docs/ToggleDemo.tsx","/Users/pducolin/repos/ui-components/src/components/Toggle/docs/Toggle.mdx","/Users/pducolin/repos/ui-components/src/utility/cssUtils.ts"],"names":["HiddenInput","props","className","type","Handle","getClassNames","checked","disabled","Groove","children","Toggle","onChange","labelOn","labelOff","defaultProps","ToggleDemo","useState","isChecked","setIsChecked","e","currentTarget","layoutProps","MDXLayout","MDXContent","components","mdxType","of","parentName","__position","__code","__scope","this","Playground","Props","style","display","flexDirection","justifyContent","pointerEvents","isMDXComponent","result","classes","forEach","value","push","Object","entries","key","join"],"mappings":"urBAUA,IAAMA,EAAc,SAACC,GACnB,OAAO,yCAAOC,UAAU,eAAeC,KAAK,YAAeF,KAGvDG,EAAS,SAACH,GACd,OACE,uCACEC,UAAWG,YAAc,SAAU,CACjCC,QAASL,EAAMK,QACfC,SAAUN,EAAMM,YAEdN,KAKJO,EAA0B,SAAAP,GAC9B,OACE,yBACEC,UAAWG,YAAc,SAAU,CACjCC,QAASL,EAAMK,QACfC,SAAUN,EAAMM,YAGjBN,EAAMQ,WAKAC,EAAS,SAACT,GACrB,OACE,2BACEC,UAAWG,YAAc,SAAU,CACjCC,QAASL,EAAMK,QACfC,SAAUN,EAAMM,YAGlB,kBAAC,EAAD,iBAAiBN,EAAjB,CAAwBU,SAAUV,EAAMU,YACxC,kBAAC,EAAWV,EACV,kBAAC,EAAWA,IAEd,0BAAMC,UAAU,QACbD,EAAMK,QAAUL,EAAMW,QAAUX,EAAMY,Y,0MAM/CH,EAAOI,aAAe,CACpBF,QAAS,KACTC,SAAU,O,0GCzDCE,EAAa,WAAO,IAAD,EACIC,oBAAS,GADb,mBACvBC,EADuB,KACZC,EADY,KAE9B,OACA,6BACE,kBAAC,EAAD,CACEN,QAAQ,YACRC,SAAS,cACTP,QAASW,EACTN,SAAU,SAAAQ,GAAC,OAAID,EAAaC,EAAEC,cAAcd,c,6PCFlD,IAKMe,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGvB,EACF,8BACD,OAAO,YAACqB,EAAD,iBAAeD,EAAiBpB,EAAhC,CAAuCuB,WAAYA,EAAYC,QAAQ,cAE5E,iBAAQ,CACN,GAAM,UADR,UAGA,8DACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIhB,EAAQe,QAAQ,UAC3B,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,eADR,eAGA,oDAAmC,0BAAYE,WAAW,KAAvB,UAAnC,6EACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,mFAAoFC,QAAS,CAC9H7B,MAAO8B,KAAOA,KAAK9B,MAAQA,EAC3B+B,eACAC,UACAvB,SACAK,cACCmB,MAAO,CACRC,QAAS,OACTC,cAAe,MACfC,eAAgB,eAChBC,cAAe,QACdb,QAAQ,cACb,YAAC,EAAD,CAAQA,QAAQ,WAChB,YAAC,EAAD,CAAQnB,SAAO,EAACmB,QAAQ,WACxB,YAAC,EAAD,CAAQlB,UAAQ,EAACkB,QAAQ,WACzB,YAAC,EAAD,CAAQlB,UAAQ,EAACD,SAAO,EAACmB,QAAQ,YAE/B,+DAA8C,0BAAYE,WAAW,KAAvB,UAA9C,KACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,iBAAkBC,QAAS,CAC5D7B,MAAO8B,KAAOA,KAAK9B,MAAQA,EAC3B+B,eACAC,UACAvB,SACAK,cACCmB,MAAO,CACRC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBACfZ,QAAQ,cACb,YAAC,EAAD,CAAYA,QAAQ,iB,2LAMtBF,EAAWgB,gBAAiB,G,mMC9DflC,EAAgB,WAAiD,IAC5E,IAAMmC,EAAmB,GADmD,mBAA7CC,EAA6C,yBAA7CA,EAA6C,gBAa5E,OAXAA,EAAQC,QAAQ,SAAAC,GACO,kBAAVA,EACTH,EAAOI,KAAKD,GAEZE,OAAOC,QAAQH,GAAOD,QAAQ,YAAmB,IAAD,mBAAhBK,EAAgB,WAE5CP,EAAOI,KAAKG,OAKbP,EAAOQ,KAAK,M","file":"static/js/src-components-toggle-docs-toggle.585c86b2.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport './Toggle.css';\n\nexport interface ToggleProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  labelOff?: string;\n  labelOn?: string;\n}\n\nconst HiddenInput = (props: ToggleProps) => {\n  return <input className='hidden-input' type='checkbox' {...props} />;\n};\n\nconst Handle = (props: ToggleProps) => {\n  return (\n    <div\n      className={getClassNames('handle', {\n        checked: props.checked,\n        disabled: props.disabled\n      })}\n      {...props}\n    />\n  );\n};\n\nconst Groove: FC<ToggleProps> = props => {\n  return (\n    <div\n      className={getClassNames('groove', {\n        checked: props.checked,\n        disabled: props.disabled\n      })}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport const Toggle = (props: ToggleProps) => {\n  return (\n    <label\n      className={getClassNames('Toggle', {\n        checked: props.checked,\n        disabled: props.disabled\n      })}\n    >\n      <HiddenInput {...props} onChange={props.onChange} />\n      <Groove {...props}>\n        <Handle {...props} />\n      </Groove>\n      <span className='text'>\n        {props.checked ? props.labelOn : props.labelOff}\n      </span>\n    </label>\n  );\n};\n\nToggle.defaultProps = {\n  labelOn: 'On',\n  labelOff: 'Off'\n};\n","import React, { useState } from 'react';\nimport { Toggle } from '../Toggle';\n\nexport const ToggleDemo = () => {\n  const [isChecked, setIsChecked] = useState(false);\n  return (\n  <div>\n    <Toggle\n      labelOn='Activated'\n      labelOff='Deactivated'\n      checked={isChecked} \n      onChange={e => setIsChecked(e.currentTarget.checked)}/>\n  </div>);\n}","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from '../Toggle';\nimport {ToggleDemo} from './ToggleDemo'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <p>{`An On/Off checkable toggle component.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Toggle} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`The example below shows the `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{` in its checked and unchecked states, both in enabled and disabled modes:`}</p>\n    <Playground __position={1} __code={'<Toggle />\\n<Toggle checked />\\n<Toggle disabled />\\n<Toggle disabled checked />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      ToggleDemo\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      pointerEvents: 'none'\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\" />\n  <Toggle checked mdxType=\"Toggle\" />\n  <Toggle disabled mdxType=\"Toggle\" />\n  <Toggle disabled checked mdxType=\"Toggle\" />\n    </Playground>\n    <p>{`The example below shows an interactive `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{`.`}</p>\n    <Playground __position={2} __code={'<ToggleDemo />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      ToggleDemo\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <ToggleDemo mdxType=\"ToggleDemo\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (typeof value === 'string') {\n      result.push(value);\n    } else {\n      Object.entries(value).forEach(([key, value]) => {\n        if (value) {\n          result.push(key);\n        }\n      });\n    }\n  });\n  return result.join(' ');\n};\n"],"sourceRoot":""}