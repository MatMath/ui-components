{"version":3,"sources":["/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/tooltip/helpers.ts","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/tooltip/Tooltip.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/icons/MoreIcon.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/molecules/quick-actions-menu/QuickActionsMenu.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/molecules/quick-actions-menu/QuickActionsMenu.mdx"],"names":["rightTooltipStyle","leftTooltipStyle","bottomTooltipStyle","handleTooltipPosition","placement","assertUnreachable","handleTooltipArrowPosition","getTooltipBgColorByType","type","dashGreen00","validatorGreen","functionalRed02","isTooltipOutOfContainer","elementDimensions","containerDimensions","rect","top","totalHeight","minHeight","left","width","totalWidth","maxWidth","minWidth","height","maxHeight","removeOutOfScreenPlacement","possibilities","filter","possiblePlacement","TooltipWrapper","styled","span","white","options","tooltipMaxWidth","Tooltip","props","ref","React","coordinates","tooltipPossiblePlacements","defaultPlacement","onHover","event","target","currentTarget","previousTop","previousLeft","getBoundingRect","positionTooltip","cloneChildren","title","child","childIndex","onMouseEnter","state","prevProps","prevState","this","current","getElementDimensions","elementRef","elementIsBefore","containerElement","container","window","getContainerBoundaries","getElementPlacement","isElementOutOfContainerMethod","setState","e","console","error","children","childrenWithProps","map","MoreIcon","SvgWrapper","d","SquareButton","Button","Wrapper","div","QuickActionsMenu","controllerRef","onButtonClick","preventDefault","setIsOpen","isOpen","tooltipTitle","nature","onClick","disabled","isDisabled","icon","DropdownMenu","dockingSide","menuMaxHeight","maxMenuHeight","containerRef","menuClassName","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","of","__position","__code","__scope","Playground","Props","DropdownElement","style","display","flexDirection","justifyContent","useState","isMDXComponent"],"mappings":"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","file":"static/js/src-molecules-quick-actions-menu-quick-actions-menu.7520562f.js","sourcesContent":["import { dashGreen00, functionalRed02, validatorGreen } from '@colors';\nimport { assertUnreachable } from '@utility/helpers';\nimport { WrapperProps } from './Tooltip';\nimport { Placement, TooltipType } from './types';\nimport { IsElementOutOfContainerMethod } from '@utility/positionCompute';\nexport const tooltipMargin = 10;\nconst rightTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: ${tooltipMargin}px;\n`;\n\nconst leftTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: ${tooltipMargin}px;\n`;\n\nconst topTooltipStyle = `\n  margin-bottom: 10px;\n  bottom: 100%;\n  left: 50%;\n`;\n\nconst bottomTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  left: 50%;\n  top: 100%;\n  margin-top: ${tooltipMargin}px;\n`;\n\nconst topTooltipArrowStyle = `\n  margin-bottom: 5px;\n  bottom: 100%;\n  transform: translate(-50%, 0);\n  left: 50%;\n`;\n\nconst rightTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(90deg) translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: -2px;\n  margin-top: -4px;\n`;\n\nconst leftTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(-90deg) translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: -2px;\n  margin-top: -4px;\n`;\n\nconst bottomTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(180deg) translate(-50%, 0);\n  top: 100%;\n  left: unset;\n  right: 50%\n  margin-top: 5px;\n`;\n\nexport const handleTooltipPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipStyle;\n    case 'right':\n      return rightTooltipStyle;\n    case 'left':\n      return leftTooltipStyle;\n    case 'bottom':\n      return bottomTooltipStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const handleTooltipArrowPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipArrowStyle;\n    case 'right':\n      return rightTooltipArrowStyle;\n    case 'left':\n      return leftTooltipArrowStyle;\n    case 'bottom':\n      return bottomTooltipArrowStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const getTooltipBgColorByType = (type: TooltipType) => {\n  switch (type) {\n    case 'info':\n      return dashGreen00;\n    case 'success':\n      return validatorGreen;\n    case 'error':\n      return functionalRed02;\n    default:\n      return assertUnreachable(type);\n  }\n};\n\nexport const isTooltipOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n          containerDimensions.maxHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'right':\n      return (\n        elementDimensions.rect.left +\n          elementDimensions.rect.width +\n          elementDimensions.totalWidth >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n    case 'left':\n      return (\n        elementDimensions.rect.left - elementDimensions.totalWidth <\n          containerDimensions.minWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\nexport const removeOutOfScreenPlacement = (\n  possibilities: Placement[],\n  placement: Placement\n) => {\n  return possibilities.filter(\n    possiblePlacement => possiblePlacement !== placement\n  );\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { white } from '@colors';\nimport { Placement } from '@atoms/tooltip/types';\nimport {\n  getTooltipBgColorByType,\n  handleTooltipArrowPosition,\n  handleTooltipPosition,\n  isTooltipOutOfContainer\n} from '@atoms/tooltip/helpers';\nimport {\n  getBoundingRect,\n  getContainerBoundaries,\n  getElementDimensions,\n  getElementPlacement\n} from '@utility/positionCompute';\n\nexport interface Props {\n  title: string;\n  /**\n   * The position of the tooltip\n   * @default top\n   */\n  placement?: 'right' | 'left' | 'top' | 'bottom';\n  /**\n   * A type that defines the tooltip color\n   * @default info\n   */\n  type?: 'info' | 'success' | 'error';\n  /**\n   * Extra options\n   * @default {tooltipMaxWidth: 300 (in px), container: window}\n   */\n  options?: {\n    /**\n     * A max width for the tooltip\n     */\n    tooltipMaxWidth?: number;\n    /**\n     * An element as a container (if not the default window)\n     */\n    container?: React.RefObject<HTMLElement>;\n  };\n}\n\ninterface State {\n  placement: Placement | null;\n}\n\nexport type WrapperProps = Omit<Required<Props>, 'title'>;\n\nconst TooltipWrapper = styled.span<WrapperProps>`\n  > :first-child:hover {\n    position: relative;\n  }\n\n  > :first-child::before {\n    font-family: inherit;\n    visibility: hidden;\n    opacity: 0;\n    font-size: 0.75rem;\n    line-height: 1.25;\n    display: inline-block;\n    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    padding: 8px;\n    background-color: ${({ type }: WrapperProps) =>\n      getTooltipBgColorByType(type)};\n    content: attr(data-tooltip);\n    color: ${white};\n    position: absolute;\n    max-width: ${({ options }: WrapperProps) =>\n      options.tooltipMaxWidth ? `${options.tooltipMaxWidth}px` : '300px'};\n    width: max-content;\n    @supports (-ms-ime-align: auto) {\n      min-width: 50px;\n    }\n    word-wrap: break-word;\n    transform: translate(-50%, 0);\n    text-align: center;\n    z-index: 1001;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipPosition}\n  }\n\n  > :first-child:hover::before {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  > :first-child::after {\n    display: inline-block;\n    visibility: hidden;\n    opacity: 0;\n    width: 0;\n    height: 0;\n    border-left: 7px solid transparent;\n    border-right: 7px solid transparent;\n    border-top: 7px solid\n      ${({ type }: WrapperProps) => getTooltipBgColorByType(type)};\n    position: absolute;\n    content: '';\n    z-index: 1002;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipArrowPosition}\n  }\n\n  > :first-child:hover::after {\n    visibility: visible;\n    opacity: 1;\n  }\n`;\n\nclass Tooltip extends React.PureComponent<Props, State> {\n  private ref: React.RefObject<HTMLElement> = React.createRef();\n  private coordinates: { top: number | null; left: number | null };\n  private readonly tooltipPossiblePlacements: Placement[] = [];\n  private readonly defaultPlacement: Placement;\n\n  public constructor(props: Props) {\n    super(props);\n    this.defaultPlacement = 'top';\n    this.state = {\n      placement: props.placement || this.defaultPlacement\n    };\n    this.tooltipPossiblePlacements = ['top', 'left', 'right', 'bottom'];\n    this.coordinates = {\n      top: null,\n      left: null\n    };\n  }\n\n  public componentDidUpdate(prevProps: Props, prevState: State): void {\n    // if state is the same (the update came from prop change) do calculate else if state changed (update caused by new positioning) do not calculate again\n    if (prevState.placement !== this.state.placement || !this.ref) {\n      return;\n    }\n    this.positionTooltip();\n  }\n\n  private onHover = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.currentTarget;\n    const { top: previousTop, left: previousLeft } = this.coordinates;\n    const { top, left } = getBoundingRect(target);\n\n    if (top === previousTop && left === previousLeft) {\n      return;\n    }\n\n    this.coordinates = { ...this.coordinates, ...{ top, left } };\n    this.positionTooltip();\n  };\n\n  private positionTooltip() {\n    if (!this.ref.current) {\n      return;\n    }\n    const isBeforePseudoElement = true;\n    const elementDimensions = getElementDimensions({\n      elementRef: this.ref,\n      elementIsBefore: isBeforePseudoElement\n    });\n\n    const containerElement =\n      (this.props.options &&\n        this.props.options.container &&\n        this.props.options.container.current) ||\n      window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n    try {\n      const placement = getElementPlacement({\n        isElementOutOfContainerMethod: isTooltipOutOfContainer,\n        placement: this.props.placement || this.defaultPlacement,\n        possibilities: this.tooltipPossiblePlacements,\n        elementDimensions,\n        containerDimensions\n      });\n      this.setState({ placement: placement });\n    } catch (e) {\n      console.error('Error while computing DropdownMenu position', e);\n    }\n  }\n\n  private cloneChildren = (title: string) => (\n    child: React.ReactNode,\n    childIndex: number\n  ) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        'data-tooltip': title,\n        onMouseEnter: this.onHover,\n        ref: childIndex === 0 && this.ref\n      });\n    }\n  };\n\n  public render() {\n    const {\n      title = 'Default',\n      type = 'info',\n      children,\n      options = {}\n    } = this.props;\n    const childrenWithProps = React.Children.map(\n      children,\n      this.cloneChildren(title)\n    );\n\n    return (\n      <TooltipWrapper\n        type={type}\n        placement={this.state.placement || this.defaultPlacement}\n        options={options}\n      >\n        {childrenWithProps}\n      </TooltipWrapper>\n    );\n  }\n}\n\nexport default Tooltip;\n","import * as React from 'react';\nimport SvgWrapper from '@ions/icon/wrapper/SvgWrapper';\n\nconst MoreIcon: React.FunctionComponent<\n  import('../../ions/icon/types').IconProps\n> = (props: import('../../ions/icon/types').IconProps): JSX.Element => (\n  <SvgWrapper {...props}>\n    <React.Fragment>\n      <path d='M4 9H6V11H4V9Z' />\n      <path d='M9 9H11V11H9V9Z' />\n      <path d='M14 9H16V11H14V9Z' />\n    </React.Fragment>\n  </SvgWrapper>\n);\n\nexport default MoreIcon;\n","import * as React from 'react';\nimport DropdownMenu from '@atoms/dropdownMenu/DropdownMenu';\nimport { Button, Tooltip } from '@atoms';\nimport styled from 'styled-components';\nimport { dashGreen00 } from '@colors';\n\ninterface Props {\n  isOpen: boolean;\n  icon: JSX.Element;\n  setIsOpen: (isOpen: boolean) => void;\n  tooltipTitle: string;\n  maxMenuHeight?: number;\n  containerRef?: React.RefObject<HTMLElement>;\n  isDisabled?: boolean;\n  menuClassName?: string;\n}\n\nconst SquareButton = styled(Button)`\n  width: 32px;\n  height: 32px;\n  fill: ${dashGreen00};\n`;\n\nconst Wrapper = styled.div`\n  width: 32px;\n  height: 32px;\n  position: relative;\n`;\n\nconst QuickActionsMenu: React.FC<Props> = props => {\n  const controllerRef = React.useRef<HTMLDivElement>(null);\n\n  const onButtonClick: React.MouseEventHandler = React.useCallback(\n    e => {\n      e.preventDefault();\n      props.setIsOpen(!props.isOpen);\n    },\n    [props.isOpen, props.setIsOpen]\n  );\n\n  return (\n    <Wrapper>\n      <div ref={controllerRef}>\n        <Tooltip placement='left' title={props.tooltipTitle}>\n          <div>\n            <SquareButton\n              nature='ghost'\n              onClick={onButtonClick}\n              disabled={props.isDisabled}\n            >\n              {props.icon}\n            </SquareButton>\n          </div>\n        </Tooltip>\n      </div>\n      <DropdownMenu\n        dockingSide='right'\n        menuMaxHeight={props.maxMenuHeight}\n        isOpen={props.isOpen}\n        controllerRef={controllerRef}\n        containerRef={props.containerRef}\n        menuClassName={props.menuClassName}\n      >\n        {props.children}\n      </DropdownMenu>\n    </Wrapper>\n  );\n};\n\nexport default QuickActionsMenu;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport Button from '../../atoms/button/Button';\nimport MoreIcon from '../../atoms/icons/MoreIcon';\nimport DropdownElement from '../../ions/dropdown/element/DropdownElement.tsx';\nimport QuickActionsMenu from './QuickActionsMenu';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"quick-actions-menu\"\n    }}>{`Quick Actions Menu`}</h1>\n    <p>{`Quick action menu is a specific components meant for users to quickly copy\na credential's information like login and password.\nIt is not meant to be used in an other context. If you're looking for customizable dropdown,\ncheck out the `}<a parentName=\"p\" {...{\n        \"href\": \"./src-atoms-button-button\"\n      }}>{`Dropdown Menu component`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={QuickActionsMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [isOpen, setIsOpen] = React.useState(false)\\n  return (\\n    <QuickActionsMenu\\n      icon={<MoreIcon />}\\n      isOpen={isOpen}\\n      setIsOpen={setIsOpen}\\n      tooltipTitle=\\\"Tooltip\\\"\\n    >\\n      <DropdownElement>Copy Password</DropdownElement>\\n      <DropdownElement>Copy Login</DropdownElement>\\n    </QuickActionsMenu>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      MoreIcon,\n      DropdownElement,\n      QuickActionsMenu\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      height: '200px'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isOpen, setIsOpen] = React.useState(false);\n        return <QuickActionsMenu icon={<MoreIcon mdxType=\"MoreIcon\" />} isOpen={isOpen} setIsOpen={setIsOpen} tooltipTitle='Tooltip' mdxType=\"QuickActionsMenu\">\n        <DropdownElement mdxType=\"DropdownElement\">Copy Password</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Copy Login</DropdownElement>\n      </QuickActionsMenu>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}