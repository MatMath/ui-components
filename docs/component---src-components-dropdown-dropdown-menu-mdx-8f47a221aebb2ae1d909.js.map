{"version":3,"sources":["webpack:///../src/utility/cssUtils.ts","webpack:///../src/ions/text/StyledText.tsx","webpack:///../src/components/dropdown/DropdownElement.tsx","webpack:///../src/utility/positionCompute.ts","webpack:///../node_modules/gatsby/node_modules/core-js/modules/es7.object.values.js","webpack:///../src/utility/helpers.ts","webpack:///../src/ions/icon/base/Icon.tsx","webpack:///../src/ions/icon/wrapper/SvgWrapper.tsx","webpack:///../src/atoms/icons/PhoneIcon.tsx","webpack:///../src/components/dropdown/subcomponents/DropdownCard.tsx","webpack:///../src/components/dropdown/helpers.ts","webpack:///../src/components/dropdown/DropdownMenu.tsx","webpack:///../src/components/button/Button.tsx","webpack:///../src/components/button/Button.module.scss","webpack:///../src/components/dropdown/DropdownMenu.mdx"],"names":["getClassNames","result","classes","forEach","value","push","Object","entries","key","join","StyledText","styled","span","Wrapper","button","dashGreen00","dashGreen06","DropdownElement","props","type","onClick","className","elementClassName","children","containsNumber","test","containsChar","char","indexOf","isHeightAndWidthSet","style","height","width","returnNumber","isNaN","computeElementHeight","elementStyle","alternativeHeight","parseInt","paddingTop","paddingBottom","marginTop","marginBottom","computeElementWidth","tooltipStyle","alternativeWidth","paddingLeft","paddingRight","marginLeft","marginRight","getAlternativeStyle","initialStyle","element","innerDiv","document","createElement","values","property","toString","appendChild","getBoundingClientRect","remove","defaultRect","top","left","right","bottom","getBoundingRect","getContainerBoundaries","container","window","maxHeight","innerHeight","minHeight","maxWidth","innerWidth","minWidth","containerRect","getCSSComputedStyle","params","getComputedStyle","getBeforePseudoElement","undefined","getElementDimensions","elementRef","current","totalHeight","totalWidth","rect","dropdownStyle","elementIsBefore","getElementPlacement","placement","Error","isElementOutOfContainerMethod","newPossibilities","possibilities","filter","possiblePlacement","firstPossiblePlacement","$export","$values","S","it","assertUnreachable","_","getColor","propName","animated","Icon","svg","attrs","viewBox","version","xmlns","size","disabled","SvgWrapper","title","isAnimated","Array","from","find","child","isAnimatedSvg","PhoneIcon","d","DropdownCard","div","white","dashGreen04","isDropdownOutOfContainer","elementDimensions","containerDimensions","getControllerAndMenuDimensions","menuRef","controllerRef","getDropdownPosition","dockingSide","MenuWrapper","isReadyForDisplay","POSSIBLE_PLACEMENTS","DropdownMenu","React","setPlacement","prevIsOpen","isOpen","containerElement","containerRef","newPlacement","e","console","error","ref","menuMaxHeight","menuClassName","Button","nature","theme","htmlButtonProps","styles","content","module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","parentName","__position","__code","__scope","Playground","Props","display","flexDirection","alignItems","justifyContent","dropdownIsOpen","setDropdownIsOpen","position","dropdown1IsOpen","setDropdown1IsOpen","dropdown2IsOpen","setDropdown2IsOpen","controller1Ref","controller2Ref","button1Ref","button2Ref","background","alignSelf","isMDXComponent"],"mappings":"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","file":"component---src-components-dropdown-dropdown-menu-mdx-8f47a221aebb2ae1d909.js","sourcesContent":["interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (value) {\n      if (typeof value === 'string') {\n        result.push(value);\n      } else {\n        Object.entries(value).forEach(([key, value]) => {\n          if (value) {\n            result.push(key);\n          }\n        });\n      }\n    }\n  });\n  return result.join(' ');\n};\n","import styled from 'styled-components';\n\nexport const StyledText = styled.span`\n  font-family: inherit;\n  font-weight: 600;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { StyledText } from '@ions/text/StyledText';\nimport { dashGreen00, dashGreen06 } from '@colors';\n\ninterface Props {\n  onClick: (e: React.MouseEvent) => void;\n  elementClassName?: string;\n}\n\nconst Wrapper = styled.button`\n  color: ${dashGreen00};\n  line-height: 20px;\n  font-size: 16px;\n  cursor: pointer;\n  border: transparent 0px;\n  outline: none;\n  display: flex;\n  box-sizing: border-box;\n  height: 36px;\n  flex-shrink: 0;\n  padding: 8px 16px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  &:hover {\n    background-color: ${dashGreen06};\n  }\n`;\n\nexport const DropdownElement: React.FC<Props> = props => {\n  return (\n    <Wrapper\n      type='button'\n      onClick={props.onClick}\n      className={props.elementClassName}\n    >\n      <StyledText>{props.children}</StyledText>\n    </Wrapper>\n  );\n};\n","import { Placement as TooltipPlacement } from '@components/tooltip/types';\nimport { Placement as DropdownPlacement } from '@components/dropdown/types';\n/** Both tooltips and dropdown use the DOM to make sure\n * they are fitting in a container\n */\n\nconst containsNumber = (value: string) => /\\d/.test(value);\nconst containsChar = (value: string, char: string) =>\n  value.indexOf(char) !== -1;\n\nexport const isHeightAndWidthSet = (style: CSSStyleDeclaration) => {\n  const { height, width } = style;\n  if (!height || !width) {\n    return false;\n  }\n\n  return (\n    containsNumber(height) ||\n    containsNumber(width) ||\n    !containsChar(height, '%') ||\n    !containsChar(width, '%')\n  );\n};\n\nconst returnNumber = (value: number) => (isNaN(value) ? 0 : value);\n\nexport const computeElementHeight = (\n  elementStyle: CSSStyleDeclaration,\n  alternativeHeight: string | null\n) => {\n  const height =\n    parseInt(elementStyle.paddingTop || '0', 10) +\n    parseInt(elementStyle.paddingBottom || '0', 10) +\n    parseInt(elementStyle.marginTop || '0', 10) +\n    parseInt(elementStyle.marginBottom || '0', 10) +\n    parseInt(alternativeHeight || elementStyle.height || '0', 10);\n  return returnNumber(height);\n};\n\nexport const computeElementWidth = (\n  tooltipStyle: CSSStyleDeclaration,\n  alternativeWidth: string | null\n) => {\n  const width =\n    parseInt(tooltipStyle.paddingLeft || '0', 10) +\n    parseInt(tooltipStyle.paddingRight || '0', 10) +\n    parseInt(tooltipStyle.marginLeft || '0', 10) +\n    parseInt(tooltipStyle.marginRight || '0', 10) +\n    parseInt(alternativeWidth || tooltipStyle.width || '0', 10);\n\n  return returnNumber(width);\n};\n\nexport const getAlternativeStyle = (\n  initialStyle: CSSStyleDeclaration,\n  element: Element | null\n) => {\n  if (!element) {\n    return { height: '0', width: '0' };\n  }\n  let innerDiv = document.createElement('div');\n  (Object.values(initialStyle) as (keyof CSSStyleDeclaration)[]).forEach(\n    property => {\n      if (\n        property &&\n        property !== 'length' &&\n        property !== 'parentRule' &&\n        !containsNumber(property.toString())\n      ) {\n        innerDiv.style[property] = initialStyle[property];\n      }\n    }\n  );\n  element.appendChild(innerDiv);\n  let { height, width } = innerDiv.getBoundingClientRect();\n  innerDiv.remove();\n\n  return { height: height.toString(), width: width.toString() };\n};\n\nconst defaultRect = {\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  width: 0,\n  height: 0\n};\n\nexport const getBoundingRect = (element: Element | null): ClientRect => {\n  if (element) {\n    return element.getBoundingClientRect();\n  } else {\n    return defaultRect;\n  }\n};\n\nexport const getContainerBoundaries = (\n  container: Element | Window\n): ContainerDimensions => {\n  const isWindow = (element: Element | Window): element is Window =>\n    element === window;\n\n  if (isWindow(container)) {\n    return {\n      maxHeight: window.innerHeight,\n      minHeight: 0,\n      maxWidth: window.innerWidth,\n      minWidth: 0\n    };\n  }\n  const containerRect = getBoundingRect(container);\n\n  return {\n    maxHeight: containerRect.top + containerRect.height,\n    minHeight: containerRect.top,\n    minWidth: containerRect.left,\n    maxWidth: containerRect.left + containerRect.width\n  };\n};\n\nexport const getCSSComputedStyle = (params: {\n  element: Element;\n  getBeforePseudoElement?: boolean;\n}) => {\n  return window.getComputedStyle(\n    params.element,\n    params.getBeforePseudoElement ? ':before' : undefined\n  );\n};\n\nexport const getElementDimensions = (params: {\n  elementRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}) => {\n  if (!params.elementRef.current) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.elementRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  if (!dropdownStyle) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.elementRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.elementRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport interface ElementDimensions {\n  rect: ClientRect;\n  totalHeight: number;\n  totalWidth: number;\n}\n\ninterface ContainerDimensions {\n  maxHeight: number;\n  maxWidth: number;\n  minHeight: number;\n  minWidth: number;\n}\n\ntype AllPlacements = TooltipPlacement | DropdownPlacement;\n\nexport type IsElementOutOfContainerMethod<T extends AllPlacements> = (params: {\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n  placement: T;\n}) => boolean;\n\ninterface ElementPlacementParams<T extends AllPlacements> {\n  isElementOutOfContainerMethod: IsElementOutOfContainerMethod<T>;\n  placement: T;\n  possibilities: T[];\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n}\n\nexport const getElementPlacement = <T extends AllPlacements>(\n  params: ElementPlacementParams<T>\n): T | null => {\n  if (!params.placement) {\n    throw new Error(\n      'Element cannot be displayed in the container Element/Window due to its incompatible size.' +\n        'Please consider reducing it or better position tooltiped' +\n        'element in the screen.'\n    );\n  }\n\n  if (\n    !params.isElementOutOfContainerMethod({\n      ...params\n    })\n  ) {\n    return params.placement;\n  }\n\n  const newPossibilities = params.possibilities.filter(\n    possiblePlacement => params.placement !== possiblePlacement\n  );\n  const [firstPossiblePlacement] = newPossibilities;\n\n  return getElementPlacement({\n    ...params,\n    placement: firstPossiblePlacement,\n    possibilities: newPossibilities\n  });\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n","import styled from 'styled-components';\nimport { Props as IconProps } from '@ions/icon/types';\nimport { dashGreen00 } from '@colors';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getWidth = ({ width, size }: Props) => `${size || width || 20}px`;\nconst getHeight = ({ height, size }: Props) => `${size || height || 20}px`;\nconst getColor = (propName: ColorProps = 'color') => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || props['color'] || dashGreen00;\n\nexport const Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getWidth};\n  height: ${getHeight};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'inherit')};\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor()};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)};\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n","import * as React from 'react';\nimport { Icon } from '@ions/icon/base/Icon';\nimport { Props } from '@ions/icon/types';\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\n\nexport const SvgWrapper: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n","import * as React from 'react';\nimport { SvgWrapper } from '@ions/icon/wrapper/SvgWrapper';\nimport { IconProps } from '@ions/icon/types';\n\nexport const PhoneIcon: React.FC<IconProps> = (props: IconProps) => (\n  <SvgWrapper {...props}>\n    <React.Fragment>\n      <path d='M7.36858 3.75719C6.92619 3.3148 6.33526 3.03174 5.72341 3.00247C5.09285 2.9723 4.44915 3.21727 4.01059 3.80268C3.38635 4.63595 2.82029 5.9015 3.05368 7.58065C3.28431 9.24004 4.28091 11.1943 6.54354 13.457C7.51721 14.4307 8.43379 15.1699 9.29433 15.7145L10.3857 14.6231C9.56567 14.144 8.63883 13.431 7.6042 12.3963C5.47774 10.2699 4.7096 8.59876 4.53939 7.37415C4.37193 6.16929 4.76891 5.29225 5.21108 4.70203C5.32227 4.5536 5.4681 4.49197 5.65172 4.50076C5.85405 4.51044 6.10195 4.61188 6.30792 4.81785L7.48431 5.99424C7.97247 6.4824 7.97247 7.27385 7.48431 7.76201L7.32287 7.92345L7.31924 7.9271L7.31561 7.93081L7.30836 7.93837C7.30354 7.94346 7.29874 7.94868 7.29397 7.95401C7.28443 7.96468 7.27502 7.97581 7.26579 7.98739C7.24731 8.01061 7.22973 8.03544 7.21334 8.06187C7.18031 8.11512 7.15357 8.17247 7.13358 8.2328C7.09339 8.35409 7.08474 8.47407 7.09336 8.58289C7.10962 8.78819 7.18973 8.98741 7.29756 9.18096C7.51474 9.57076 7.97096 10.1574 8.90703 11.0935C9.8431 12.0296 10.4298 12.4858 10.8196 12.703C11.0131 12.8108 11.2123 12.8909 11.4176 12.9072C11.5265 12.9158 11.6464 12.9071 11.7677 12.867C11.8281 12.847 11.8854 12.8202 11.9387 12.7872C11.9651 12.7708 11.9899 12.7532 12.0131 12.7347C12.0247 12.7255 12.0358 12.7161 12.0465 12.7066C12.0519 12.7018 12.0571 12.697 12.0622 12.6922L12.0697 12.6849L12.0734 12.6813C12.0752 12.6795 12.0771 12.6777 12.0771 12.6777L12.2385 12.5162C12.7267 12.0281 13.5181 12.0281 14.0063 12.5162L15.1827 13.6926C15.3886 13.8986 15.4901 14.1465 15.4998 14.3488C15.5086 14.5324 15.4469 14.6783 15.2985 14.7894C14.7083 15.2316 13.8312 15.6286 12.6264 15.4611C12.5489 15.4504 12.4696 15.4372 12.3886 15.4215L11.1699 16.6401C11.6038 16.7914 12.0204 16.8913 12.4199 16.9469C14.099 17.1802 15.3646 16.6142 16.1978 15.9899C16.7833 15.5514 17.0282 14.9077 16.9981 14.2771C16.9688 13.6653 16.6857 13.0743 16.2433 12.6319L15.0669 11.4556C14.0554 10.444 12.4518 10.3852 11.3715 11.2793C11.1149 11.1004 10.6747 10.7398 9.96769 10.0328C9.26071 9.32585 8.90015 8.88565 8.72126 8.62902C9.61529 7.54869 9.55653 5.94514 8.54497 4.93358L7.36858 3.75719Z' />\n    </React.Fragment>\n  </SvgWrapper>\n);\n","import styled from 'styled-components';\nimport { dashGreen04, white } from '@colors';\n\ninterface Props {\n  maxHeight?: number;\n  className?: string;\n}\n\nexport const DropdownCard = styled.div<Props>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${white};\n  border: 1px solid ${dashGreen04};\n  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  padding: 8px 0;\n  max-height: ${props => props.maxHeight || 100}px;\n  overflow-y: scroll;\n`;\n","import { Placement } from './types';\nimport { assertUnreachable } from '@utility/helpers';\nimport {\n  computeElementHeight,\n  computeElementWidth,\n  ElementDimensions,\n  getAlternativeStyle,\n  getBoundingRect,\n  getCSSComputedStyle,\n  IsElementOutOfContainerMethod,\n  isHeightAndWidthSet\n} from '@utility/positionCompute';\nimport { MenuWrapperProps } from './DropdownMenu';\n\nconst MARGIN = 4;\n\nexport const isDropdownOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n        containerDimensions.minHeight\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n        containerDimensions.maxHeight\n      );\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\ninterface GetControllerAndMenuDimensionsParams {\n  menuRef: React.RefObject<HTMLElement>;\n  controllerRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}\n\nexport const getControllerAndMenuDimensions = (\n  params: GetControllerAndMenuDimensionsParams\n): ElementDimensions => {\n  if (!params.menuRef.current) {\n    return {\n      rect: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        width: 0,\n        height: 0\n      },\n      totalHeight: 0,\n      totalWidth: 0\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.menuRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.menuRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.controllerRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport const getDropdownPosition = ({\n  dockingSide,\n  placement\n}: MenuWrapperProps) => {\n  return `${placement === 'top' ? 'bottom' : 'top'}: 100%;\n  transform: translateY(${placement === 'top' ? -1 * MARGIN : MARGIN}px);\n  ${dockingSide}: 0;`;\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { DropdownCard } from './subcomponents/DropdownCard';\nimport { DockingSide, Placement } from './types';\nimport {\n  getControllerAndMenuDimensions,\n  getDropdownPosition,\n  isDropdownOutOfContainer\n} from './helpers';\nimport {\n  getContainerBoundaries,\n  getElementPlacement\n} from '@utility/positionCompute';\n\ninterface Props {\n  isOpen: boolean;\n  controllerRef: React.RefObject<HTMLElement>;\n  menuMaxHeight?: number;\n  dockingSide?: DockingSide;\n  placement?: Placement;\n  containerRef?: React.RefObject<HTMLElement>;\n  menuClassName?: string;\n}\n\nexport interface MenuWrapperProps {\n  placement: Placement;\n  dockingSide: DockingSide;\n  isReadyForDisplay: boolean;\n}\n\nconst MenuWrapper = styled.div<MenuWrapperProps>`\n  position: absolute;\n  opacity: ${props => (props.isReadyForDisplay ? 1 : 0)};\n  ${getDropdownPosition}\n  max-width: 318px;\n`;\n\nconst DEFAULT_PLACEMENT = 'bottom';\nconst POSSIBLE_PLACEMENTS: Placement[] = ['top', 'bottom'];\n\nexport const DropdownMenu: React.FC<Props> = props => {\n  const [placement, setPlacement] = React.useState<Placement | null>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n  const prevIsOpen = React.useRef(false);\n\n  React.useEffect(() => {\n    if (props.isOpen === prevIsOpen.current) {\n      return;\n    }\n    prevIsOpen.current = props.isOpen;\n    setPlacement(null);\n\n    if (!menuRef.current || !props.controllerRef.current) {\n      return;\n    }\n    const elementDimensions = getControllerAndMenuDimensions({\n      menuRef,\n      controllerRef: props.controllerRef\n    });\n\n    const containerElement =\n      (props.containerRef && props.containerRef.current) || window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n\n    try {\n      const newPlacement = getElementPlacement({\n        isElementOutOfContainerMethod: isDropdownOutOfContainer,\n        placement: props.placement || DEFAULT_PLACEMENT,\n        possibilities: POSSIBLE_PLACEMENTS,\n        elementDimensions,\n        containerDimensions\n      });\n      setPlacement(newPlacement);\n    } catch (e) {\n      console.error('Error while computing DropdownMenu position', e);\n      setPlacement(DEFAULT_PLACEMENT);\n    }\n  });\n\n  return (\n    <>\n      {props.isOpen && (\n        <MenuWrapper\n          placement={placement || DEFAULT_PLACEMENT}\n          ref={menuRef}\n          dockingSide={props.dockingSide || 'left'}\n          isReadyForDisplay={placement !== null}\n        >\n          <DropdownCard\n            maxHeight={props.menuMaxHeight}\n            className={props.menuClassName}\n          >\n            {props.children}\n          </DropdownCard>\n        </MenuWrapper>\n      )}\n    </>\n  );\n};\n","import * as React from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport styles from './Button.module.scss';\n\ntype ButtonNature = 'primary' | 'secondary' | 'danger' | 'ghost';\ntype ButtonSize = 'small' | 'medium' | 'large';\ntype ButtonTheme = 'light' | 'dark';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  nature?: ButtonNature;\n  size?: ButtonSize;\n  theme?: ButtonTheme;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  nature = 'primary',\n  size = 'medium',\n  theme = 'light',\n  children,\n  ...htmlButtonProps\n}) => {\n  return (\n    <button\n      {...htmlButtonProps}\n      className={getClassNames(\n        styles.button,\n        styles[nature],\n        styles[size],\n        styles[theme]\n      )}\n    >\n      {children ? <span className={styles.content}>{children}</span> : null}\n    </button>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button-module--button--3_mlL\",\"small\":\"Button-module--small--3iAdo\",\"medium\":\"Button-module--medium--zuKCu\",\"large\":\"Button-module--large--2PHKV\",\"light\":\"Button-module--light--1PI8o\",\"primary\":\"Button-module--primary--1fSDS\",\"secondary\":\"Button-module--secondary--2aogy\",\"danger\":\"Button-module--danger--up85X\",\"ghost\":\"Button-module--ghost--3kL3_\",\"dark\":\"Button-module--dark--Ytoiu\",\"content\":\"Button-module--content--18tRJ\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/alexandre/Documents/Programmation/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { DropdownMenu } from '@components/dropdown/DropdownMenu';\nimport { DropdownElement } from '@components/dropdown/DropdownElement';\nimport { Button } from '@components/button/Button';\nimport { PhoneIcon } from '@atoms/icons/PhoneIcon';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dropdown-menu\"\n    }}>{`Dropdown Menu`}</h1>\n    <p>{`The Dropdown Menu can be used to display a menu of options that can be hidden.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={DropdownMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The dropdown can be defined alongside a controller. To display it correctly:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`both components must be wrapped in a container with a relative or absolute position`}</strong></li>\n      <li parentName=\"ul\">{`the controller's ref must be passed to the Dropdown`}</li>\n    </ul>\n    <Playground __position={1} __code={'() => {\\n  const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false)\\n  const controllerRef = React.useRef(null)\\n  return (\\n    <div style={{ position: \\'relative\\' }}>\\n      <div ref={controllerRef}>\\n        <Button\\n          nature=\\\"primary\\\"\\n          onClick={() => setDropdownIsOpen(!dropdownIsOpen)}\\n        >\\n          Click Me\\n        </Button>\\n      </div>\\n      <DropdownMenu\\n        isOpen={dropdownIsOpen}\\n        dockingSide=\\\"left\\\"\\n        placement=\\\"bottom\\\"\\n        controllerRef={controllerRef}\\n      >\\n        <DropdownElement>Hello</DropdownElement>\\n        <DropdownElement>Holà</DropdownElement>\\n        <DropdownElement>Salut</DropdownElement>\\n        <DropdownElement>Hallo</DropdownElement>\\n      </DropdownMenu>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'space-around',\n      height: '200px'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false);\n        const controllerRef = React.useRef(null);\n        return <div style={{\n          position: 'relative'\n        }}>\n          <div ref={controllerRef}>\n            <Button nature='primary' onClick={() => setDropdownIsOpen(!dropdownIsOpen)} mdxType=\"Button\">\nClick Me\n            </Button>\n          </div>\n          <DropdownMenu isOpen={dropdownIsOpen} dockingSide='left' placement='bottom' controllerRef={controllerRef} mdxType=\"DropdownMenu\">\n            <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Hallo</DropdownElement>\n          </DropdownMenu>\n        </div>;\n      }}\n    </Playground>\n    <p>{`Dropdown can be defined as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`placed below or above their controllerRef,`}</li>\n      <li parentName=\"ul\">{`aligned on their controller left or right`}</li>\n    </ul>\n    <Playground __position={2} __code={'() => {\\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false)\\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false)\\n  const controller1Ref = React.useRef(null)\\n  const controller2Ref = React.useRef(null)\\n  return (\\n    <div\\n      style={{\\n        display: \\'flex\\',\\n        justifyContent: \\'space-between\\',\\n        alignItems: \\'center\\',\\n        width: \\'100%\\',\\n        height: \\'100%\\',\\n      }}\\n    >\\n      <div style={{ position: \\'relative\\' }}>\\n        <div ref={controller1Ref}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\\n          >\\n            TOP\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown1IsOpen}\\n          placement=\\\"top\\\"\\n          controllerRef={controller1Ref}\\n        >\\n          <DropdownElement>Hello</DropdownElement>\\n          <DropdownElement>Holà</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n      <div style={{ position: \\'relative\\' }}>\\n        <div ref={controller2Ref}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdown2IsOpen(!dropdown2IsOpen)}\\n          >\\n            RIGHT\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown2IsOpen}\\n          dockingSide=\\\"right\\\"\\n          controllerRef={controller2Ref}\\n        >\\n          <DropdownElement>Good Morning</DropdownElement>\\n          <DropdownElement>Konnichiha</DropdownElement>\\n          <DropdownElement>Guten Tag</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'space-around',\n      height: '200px'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n        const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n        const controller1Ref = React.useRef(null);\n        const controller2Ref = React.useRef(null);\n        return <div style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          width: \"100%\",\n          height: \"100%\"\n        }}>\n    <div style={{\n            position: 'relative'\n          }}>\n      <div ref={controller1Ref}>\n        <Button nature='primary' onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)} mdxType=\"Button\">\n          TOP\n        </Button>\n      </div>\n      <DropdownMenu isOpen={dropdown1IsOpen} placement='top' controllerRef={controller1Ref} mdxType=\"DropdownMenu\">\n        <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n      </DropdownMenu>\n    </div>\n    <div style={{\n            position: 'relative'\n          }}>\n      <div ref={controller2Ref}>\n        <Button nature='primary' onClick={() => setDropdown2IsOpen(!dropdown2IsOpen)} mdxType=\"Button\">\n          RIGHT\n        </Button>\n      </div>\n      <DropdownMenu isOpen={dropdown2IsOpen} dockingSide='right' controllerRef={controller2Ref} mdxType=\"DropdownMenu\">\n        <DropdownElement mdxType=\"DropdownElement\">Good Morning</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Konnichiha</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Guten Tag</DropdownElement>\n      </DropdownMenu>\n    </div>\n  </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"position-within-a-container\"\n    }}>{`Position within a container`}</h2>\n    <p>{`Dropdown computes its ideal position within a container:\nif you pass `}<inlineCode parentName=\"p\">{`top`}</inlineCode>{` as the placement prop but there is not enough space within the container,\nthe menu position will be overwritten to `}<inlineCode parentName=\"p\">{`bottom`}</inlineCode>{`.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false)\\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false)\\n  const containerRef = React.useRef(null)\\n  const button1Ref = React.useRef(null)\\n  const button2Ref = React.useRef(null)\\n  return (\\n    <div\\n      ref={containerRef}\\n      style={{\\n        height: \\'250px\\',\\n        display: \\'flex\\',\\n        background: \\'ghostwhite\\',\\n        justifyContent: \\'space-between\\',\\n      }}\\n    >\\n      <div style={{ position: \\'relative\\', height: \\'fit-content\\' }}>\\n        <div ref={button1Ref}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown1IsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"top\\\"\\n          containerRef={containerRef}\\n          controllerRef={button1Ref}\\n        >\\n          <DropdownElement>Hello</DropdownElement>\\n          <DropdownElement>Holà</DropdownElement>\\n          <DropdownElement>Salut</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n      <div\\n        style={{\\n          position: \\'relative\\',\\n          height: \\'fit-content\\',\\n          alignSelf: \\'flex-end\\',\\n        }}\\n      >\\n        <div ref={button2Ref}>\\n          <Button\\n            nature=\\\"secondary\\\"\\n            onClick={() => {\\n              setDropdown2IsOpen(!dropdown2IsOpen)\\n            }}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown2IsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"bottom\\\"\\n          containerRef={containerRef}\\n          controllerRef={button2Ref}\\n        >\\n          <DropdownElement>Hello</DropdownElement>\\n          <DropdownElement>Holà</DropdownElement>\\n          <DropdownElement>Salut</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n        const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n        const containerRef = React.useRef(null);\n        const button1Ref = React.useRef(null);\n        const button2Ref = React.useRef(null);\n        return <div ref={containerRef} style={{\n          height: '250px',\n          display: 'flex',\n          background: 'ghostwhite',\n          justifyContent: 'space-between'\n        }}>\n        <div style={{\n            position: 'relative',\n            height: 'fit-content'\n          }}>\n          <div ref={button1Ref}>\n            <Button nature='primary' onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)} mdxType=\"Button\">\n              Click Me\n            </Button>\n          </div>\n          <DropdownMenu isOpen={dropdown1IsOpen} dockingSide='left' placement='top' containerRef={containerRef} controllerRef={button1Ref} mdxType=\"DropdownMenu\">\n            <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n          </DropdownMenu>\n        </div>\n        <div style={{\n            position: 'relative',\n            height: 'fit-content',\n            alignSelf: 'flex-end'\n          }}>\n          <div ref={button2Ref}>\n            <Button nature='secondary' onClick={() => {\n                setDropdown2IsOpen(!dropdown2IsOpen);\n              }} mdxType=\"Button\">\n              Click Me\n            </Button>\n          </div>\n          <DropdownMenu isOpen={dropdown2IsOpen} dockingSide='left' placement='bottom' containerRef={containerRef} controllerRef={button2Ref} mdxType=\"DropdownMenu\">\n            <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n          </DropdownMenu>\n        </div>\n      </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}