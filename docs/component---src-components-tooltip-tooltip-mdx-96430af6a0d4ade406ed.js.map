{"version":3,"sources":["webpack:///../src/components/tooltip/TooltipDemo.tsx","webpack:///../src/components/tooltip/Tooltip.mdx","webpack:///../src/utility/positionCompute.ts","webpack:///../node_modules/gatsby/node_modules/core-js/modules/es7.object.values.js","webpack:///../src/utility/helpers.ts","webpack:///../src/components/tooltip/helpers.ts","webpack:///../src/components/tooltip/Tooltip.tsx"],"names":["ItemWithTooltip","props","clickCb","item","setState","itemOneClicked","setTimeout","getTitle","state","render","this","innerRef","style","border","padding","borderRadius","display","justifyContent","Tooltip","placement","type","options","tooltipMaxWidth","container","title","marginRight","onClick","React","TooltipDemo","ref","componentDidMount","height","width","overflow","overflowY","Array","map","_","key","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","of","__position","__code","__scope","useRef","Playground","Props","className","preview","isMDXComponent","containsNumber","value","test","containsChar","char","indexOf","isHeightAndWidthSet","returnNumber","isNaN","computeElementHeight","elementStyle","alternativeHeight","parseInt","paddingTop","paddingBottom","marginTop","marginBottom","computeElementWidth","tooltipStyle","alternativeWidth","paddingLeft","paddingRight","marginLeft","getAlternativeStyle","initialStyle","element","innerDiv","document","createElement","Object","values","forEach","property","toString","appendChild","getBoundingClientRect","remove","defaultRect","top","left","right","bottom","getBoundingRect","getContainerBoundaries","window","maxHeight","innerHeight","minHeight","maxWidth","innerWidth","minWidth","containerRect","getCSSComputedStyle","params","getComputedStyle","getBeforePseudoElement","undefined","getElementDimensions","elementRef","current","totalHeight","totalWidth","rect","dropdownStyle","elementIsBefore","getElementPlacement","Error","isElementOutOfContainerMethod","newPossibilities","possibilities","filter","possiblePlacement","firstPossiblePlacement","$export","$values","S","it","assertUnreachable","handleTooltipPosition","handleTooltipArrowPosition","displayIfInContainer","outOfContainer","getTooltipBgColorByType","dashGreen00","validatorGreen","functionalRed02","isTooltipOutOfContainer","elementDimensions","containerDimensions","removeOutOfScreenPlacement","TooltipWrapper","styled","span","white","tooltipPossiblePlacements","onHover","event","target","currentTarget","coordinates","previousTop","previousLeft","positionTooltip","cloneChildren","child","childIndex","onMouseEnter","defaultPlacement","componentDidUpdate","prevProps","prevState","containerElement","e","console","error","children","childrenWithProps"],"mappings":"snCAQMA,E,YAIJ,WAAmBC,GAAc,aAC/B,cAAMA,IAAN,MAMMC,QAAU,WACQ,IAApB,EAAKD,MAAME,OACb,EAAKC,SAAS,CAAEC,gBAAgB,IAChCC,WAAW,kBAAM,EAAKF,SAAS,CAAEC,gBAAgB,KAAU,OAV9B,EAczBE,SAAW,WAAM,IACfJ,EAAS,EAAKF,MAAdE,KACR,OAAY,GAARA,GAAc,EAAKK,MAAMH,eAEV,GAARF,GAAa,EAAKK,MAAMH,eACjC,6HAEA,oBAA2BF,EAA3B,aAJA,UAfF,EAAKK,MAAQ,CACXH,gBAAgB,GAHa,E,0BAyB1BI,OAAP,WAAgB,MACaC,KAAKT,MAAxBE,EADM,EACNA,KAAMQ,EADA,EACAA,SACd,OACE,YAAC,WAAD,KACE,kBACEC,MAAO,CACLC,OAAQ,sBACRC,QAAS,SACTC,aAAc,MACdC,QAAS,OACTC,eAAgB,iBAGlB,gCAAYd,GACZ,YAACe,EAAA,EAAD,CACEC,UAAoB,IAAThB,EAAa,OAAS,SACjCiB,KAAe,IAATjB,GAAcO,KAAKF,MAAMH,eAAiB,UAAY,OAC5DgB,QAAS,CACPC,gBAAiB,IACjBC,UAAWZ,GAEba,MAAOd,KAAKH,YAEZ,sBAAQK,MAAO,CAAEa,YAAa,QAAUC,QAAShB,KAAKR,SAAtD,cAKJ,yB,GAzDsByB,aA+DjBC,EAAb,YAKE,WAAmB3B,GAAW,aAC5B,cAAMA,IAAN,MACK4B,IAAMF,cACX,EAAKnB,MAAQ,CACXqB,IAAK,EAAKA,KAJgB,EALhC,kCAaSC,kBAAP,WACEpB,KAAKN,SAAS,CAAEyB,IAAKnB,KAAKmB,OAd9B,EAiBSpB,OAAP,WAAgB,WACd,OACE,kBACEoB,IAAKnB,KAAKmB,IACVjB,MAAO,CACLmB,OAAQ,QACRC,MAAO,QACPlB,QAAS,EACTmB,SAAU,SACVC,UAAW,WAGZ,EAAIC,MAAM,KAAKC,IAAI,SAACC,EAAGC,GAAJ,OAClB,YAAC,EAAD,CAAiB3B,SAAU,EAAKH,MAAMqB,IAAKS,IAAKA,EAAKnC,KAAMmC,QA9BrE,GAAiCX,a,4fC5D1B,IAAMY,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,cAFDC,EAEC,EAFDA,WACG3C,E,oIACF,mBACD,OAAO,YAACwC,EAAD,KAAeD,EAAiBvC,EAAhC,CAAuC2C,WAAYA,EAAYC,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,WAGA,uPACiG,0BAAYC,WAAW,KAAvB,SADjG,4OAC+X,0BAAYA,WAAW,KAAvB,sCAD/X,8WAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAI7B,IAAS2B,QAAQ,UAC5B,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,eADR,eAGA,gSACA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,wkDAAmmDC,SAAO,GAC3oDjD,QACAyC,kBACAS,gBACAC,eACAC,UACAnC,YACAU,eAP2oD,gBAQ3oDc,IAR2oD,EAS3oDH,eAT2oD,GAU1oDe,UAAW,CACZC,QAAS,mBACRV,QAAQ,cACX,uBACI,YAAC3B,EAAA,EAAD,CAASM,MAAM,QAAQJ,KAAK,QAAQyB,QAAQ,WACxC,+DAGR,uBACI,YAAC3B,EAAA,IAAD,GAASC,UAAU,OAAOK,MAAM,6BAAhC,UAAqE,QAArE,EAA6EqB,QAAQ,UAArF,GACI,uDAGN,uBACF,YAAC3B,EAAA,IAAD,GAASC,UAAU,SAASK,MAAM,isBAAlC,UAA2uB,SAA3uB,EAAovBJ,KAAK,UAAzvB,EAAmwByB,QAAQ,UAA3wB,GACI,qEAGF,uBACF,YAAC3B,EAAA,IAAD,GAASC,UAAU,QAAQK,MAAM,6OAAjC,UAAsR,QAAtR,EAA8RJ,KAAK,UAAnS,EAA6SyB,QAAQ,UAArT,GACI,yEAIJ,iBAAQ,CACN,GAAM,qBADR,qBAGA,sBACE,kBAAIC,WAAW,MAAf,+IAAoK,0BAAYA,WAAW,MAAvB,WAApK,WACA,kBAAIA,WAAW,MAAf,+JAAoL,0BAAYA,WAAW,MAAvB,UAApL,6CAAqR,0BAAYA,WAAW,MAAvB,KAArR,eAAmV,0BAAYA,WAAW,MAAvB,QAAnV,qEAA0c,0BAAYA,WAAW,MAAvB,mBAA1c,UACA,kBAAIA,WAAW,MAAf,gDAAqE,0BAAYA,WAAW,MAAvB,aAArE,SAAqI,0BAAYA,WAAW,MAAvB,MAArI,0LACA,kBAAIA,WAAW,MAAf,4BAAiD,0BAAYA,WAAW,MAAvB,mBAAjD,4HACA,kBAAIA,WAAW,MAAf,gJAAqK,0BAAYA,WAAW,MAAvB,UAArK,8LACA,kBAAIA,WAAW,MAAf,2FAAgH,0BAAYA,WAAW,MAAvB,KAAhH,kJAEF,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,kBAAmBC,SAAO,GAC3DjD,QACAyC,kBACAS,gBACAC,eACAC,UACAnC,YACAU,eAP2D,gBAQ3Dc,IAR2D,EAS3DH,eAT2D,GAU1De,UAAW,CACZC,QAAS,mBACRV,QAAQ,cACb,YAAC,EAAD,CAAaA,QAAQ,kB,2MAMvBF,EAAWa,gBAAiB,G,+kCCzG5B,IAAMC,EAAiB,SAACC,GAAD,MAAmB,KAAKC,KAAKD,IAC9CE,EAAe,SAACF,EAAeG,GAAhB,OACM,IAAzBH,EAAMI,QAAQD,IAEHE,EAAsB,SAACnD,GAA+B,IACzDmB,EAAkBnB,EAAlBmB,OAAQC,EAAUpB,EAAVoB,MAChB,SAAKD,IAAWC,KAKdyB,EAAe1B,IACf0B,EAAezB,KACd4B,EAAa7B,EAAQ,OACrB6B,EAAa5B,EAAO,Y,uNAIzB,IAAMgC,EAAe,SAACN,GAAD,OAAoBO,MAAMP,GAAS,EAAIA,GAE/CQ,EAAuB,SAClCC,EACAC,GAEA,IAAMrC,EACJsC,SAASF,EAAaG,YAAc,IAAK,IACzCD,SAASF,EAAaI,eAAiB,IAAK,IAC5CF,SAASF,EAAaK,WAAa,IAAK,IACxCH,SAASF,EAAaM,cAAgB,IAAK,IAC3CJ,SAASD,GAAqBD,EAAapC,QAAU,IAAK,IAC5D,OAAOiC,EAAajC,S,wNAGf,IAAM2C,EAAsB,SACjCC,EACAC,GAEA,IAAM5C,EACJqC,SAASM,EAAaE,aAAe,IAAK,IAC1CR,SAASM,EAAaG,cAAgB,IAAK,IAC3CT,SAASM,EAAaI,YAAc,IAAK,IACzCV,SAASM,EAAalD,aAAe,IAAK,IAC1C4C,SAASO,GAAoBD,EAAa3C,OAAS,IAAK,IAE1D,OAAOgC,EAAahC,S,uNAGf,IAAMgD,EAAsB,SACjCC,EACAC,GAEA,IAAKA,EACH,MAAO,CAAEnD,OAAQ,IAAKC,MAAO,KAE/B,IAAImD,EAAWC,SAASC,cAAc,OACrCC,OAAOC,OAAON,GAAgDO,QAC7D,SAAAC,GAEIA,GACa,WAAbA,GACa,eAAbA,IACChC,EAAegC,EAASC,cAEzBP,EAASvE,MAAM6E,GAAYR,EAAaQ,MAI9CP,EAAQS,YAAYR,GAjBjB,MAkBqBA,EAASS,wBAA3B7D,EAlBH,EAkBGA,OAAQC,EAlBX,EAkBWA,MAGd,OAFAmD,EAASU,SAEF,CAAE9D,OAAQA,EAAO2D,WAAY1D,MAAOA,EAAM0D,kB,uNAGnD,IAAMI,EAAc,CAClBC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRlE,MAAO,EACPD,OAAQ,GAGGoE,EAAkB,SAACjB,GAC9B,OAAIA,EACKA,EAAQU,wBAERE,Q,mNAIJ,IAAMM,EAAyB,SACpC7E,GAKA,GAAaA,IAFC8E,OAGZ,MAAO,CACLC,UAAWD,OAAOE,YAClBC,UAAW,EACXC,SAAUJ,OAAOK,WACjBC,SAAU,GAGd,IAAMC,EAAgBT,EAAgB5E,GAEtC,MAAO,CACL+E,UAAWM,EAAcb,IAAMa,EAAc7E,OAC7CyE,UAAWI,EAAcb,IACzBY,SAAUC,EAAcZ,KACxBS,SAAUG,EAAcZ,KAAOY,EAAc5E,a,0NAI1C,IAAM6E,EAAsB,SAACC,GAIlC,OAAOT,OAAOU,iBACZD,EAAO5B,QACP4B,EAAOE,uBAAyB,eAAYC,S,uNAIzC,IAAMC,EAAuB,SAACJ,GAInC,IAAKA,EAAOK,WAAWC,QACrB,MAAO,CACLC,YAAa,EACbC,WAAY,EACZC,KAAMzB,GAIV,IAAM0B,EAAgBX,EAAoB,CACxC3B,QAAS4B,EAAOK,WAAWC,QAC3BJ,uBAAwBF,EAAOW,kBAEjC,IAAKD,EACH,MAAO,CACLH,YAAa,EACbC,WAAY,EACZC,KAAMzB,GAIV,IArBI,EAqBoB/B,EAAoByD,GAExC,GACAxC,EAAoBwC,EAAeV,EAAOK,WAAWC,SAxBrD,IAsBIrF,cAtBJ,MAsBa,KAtBb,MAsBmBC,aAtBnB,MAsB2B,KAtB3B,EA6BJ,MAAO,CACLqF,YALkBnD,EAAqBsD,EAAezF,GAMtDuF,WALiB5C,EAAoB8C,EAAexF,GAMpDuF,KALWpB,EAAgBW,EAAOK,WAAWC,gB,k+BAsC1C,IAAMM,EAAsB,SAAtBA,EACXZ,GAEA,IAAKA,EAAO3F,UACV,MAAM,IAAIwG,MACR,2KAMJ,IACGb,EAAOc,8BAAP,KACId,IAGL,OAAOA,EAAO3F,UAGhB,IAAM0G,EAAmBf,EAAOgB,cAAcC,OAC5C,SAAAC,GAAiB,OAAIlB,EAAO3F,YAAc6G,IAErCC,EAA0BJ,EApBpB,GAsBb,OAAOH,EAAoB,EAAD,GACrBZ,EADqB,CAExB3F,UAAW8G,EACXH,cAAeD,W,6OCjOnB,IAAIK,EAAU,EAAQ,QAClBC,EAAU,EAAQ,OAAR,EAA8B,GAE5CD,EAAQA,EAAQE,EAAG,SAAU,CAC3B7C,OAAQ,SAAgB8C,GACtB,OAAOF,EAAQE,O,4ECLZ,SAASC,EAAkBjG,GAChC,MAAM,IAAIsF,MAAM,6C,mWCGW,K,OAAA,K,oBAAA,U,oDAAA,G,0GAC7B,IAuEaY,EAAwB,SAAC,GAAgC,IAA9BpH,EAA8B,EAA9BA,UACtC,OAAQA,GACN,IAAK,MACH,MAvDkB,4DAwDpB,IAAK,QACH,MA5EoB,+HA6EtB,IAAK,OACH,MArEmB,gJAsErB,IAAK,SACH,MAvDqB,4FAwDvB,QACE,OAAOmH,YAAkBnH,K,qNAIxB,IAAMqH,EAA6B,SAAC,GAAgC,IAA9BrH,EAA8B,EAA9BA,UAC3C,OAAQA,GACN,IAAK,MACH,MAxDuB,6FAyDzB,IAAK,QACH,MAnDyB,kKAoD3B,IAAK,OACH,MA3CwB,oLA4C1B,IAAK,SACH,MAlC0B,4JAmC5B,QACE,OAAOmH,YAAkBnH,K,0NAIxB,IAAMsH,EAAuB,SAAC,GACnC,OADwE,EAAnCC,eAC9B,+C,oNAMF,IAAMC,EAA0B,SAACvH,GACtC,OAAQA,GACN,IAAK,OACH,OAAOwH,IACT,IAAK,UACH,OAAOC,IACT,IAAK,QACH,OAAOC,IACT,QACE,OAAOR,YAAkBlH,K,uNAIxB,IAAM2H,EAET,SAAC,GAA0D,IAAxDC,EAAwD,EAAxDA,kBAAmBC,EAAqC,EAArCA,oBAAqB9H,EAAgB,EAAhBA,UAC7C,OAAQA,GACN,IAAK,MACH,OACE6H,EAAkBzB,KAAKxB,IAAMiD,EAAkB3B,YAC7C4B,EAAoBzC,WACtBwC,EAAkBzB,KAAKvB,KACrBgD,EAAkBzB,KAAKvF,MAAQ,EAC/BgH,EAAkB1B,WAAa,EAC/B2B,EAAoBxC,UACtBuC,EAAkBzB,KAAKvB,KACrBgD,EAAkBzB,KAAKvF,MAAQ,EAC/BgH,EAAkB1B,WAAa,EAC/B2B,EAAoBtC,SAE1B,IAAK,SACH,OACEqC,EAAkBzB,KAAKxB,IACrBiD,EAAkBzB,KAAKxF,OACvBiH,EAAkB3B,YAClB4B,EAAoB3C,WACtB0C,EAAkBzB,KAAKvB,KACrBgD,EAAkBzB,KAAKvF,MAAQ,EAC/BgH,EAAkB1B,WAAa,EAC/B2B,EAAoBxC,UACtBuC,EAAkBzB,KAAKvB,KACrBgD,EAAkBzB,KAAKvF,MAAQ,EAC/BgH,EAAkB1B,WAAa,EAC/B2B,EAAoBtC,SAE1B,IAAK,QACH,OACEqC,EAAkBzB,KAAKvB,KACrBgD,EAAkBzB,KAAKvF,MACvBgH,EAAkB1B,WAClB2B,EAAoBxC,UACtBuC,EAAkBzB,KAAKxB,IACrBiD,EAAkBzB,KAAKxF,OAAS,EAChCiH,EAAkB3B,YAAc,EAChC4B,EAAoBzC,WACtBwC,EAAkBzB,KAAKxB,IACrBiD,EAAkBzB,KAAKxF,OAAS,EAChCiH,EAAkB3B,YAAc,EAChC4B,EAAoB3C,UAE1B,IAAK,OACH,OACE0C,EAAkBzB,KAAKvB,KAAOgD,EAAkB1B,WAC9C2B,EAAoBtC,UACtBqC,EAAkBzB,KAAKxB,IACrBiD,EAAkBzB,KAAKxF,OAAS,EAChCiH,EAAkB3B,YAAc,EAChC4B,EAAoBzC,WACtBwC,EAAkBzB,KAAKxB,IACrBiD,EAAkBzB,KAAKxF,OAAS,EAChCiH,EAAkB3B,YAAc,EAChC4B,EAAoB3C,UAG1B,QAEE,OADAgC,YAAkBnH,IACX,I,uNAIN,IAAM+H,EAA6B,SACxCpB,EACA3G,GAEA,OAAO2G,EAAcC,OACnB,SAAAC,GAAiB,OAAIA,IAAsB7G,K,g6EChJ/C,IAAMgI,EAAiBC,IAAOC,KAAV,IAeI,gBAAGjI,EAAH,EAAGA,KAAH,OAClBuH,EAAwBvH,IAEjBkI,IAEI,gBAAGjI,EAAH,EAAGA,QAAH,OACXA,EAAQC,gBAAqBD,EAAQC,gBAArC,KAA2D,SAU3DiH,EAIAE,EAYE,gBAAGrH,EAAH,EAAGA,KAAH,OAA4BuH,EAAwBvH,IAKtDoH,EAIAC,GAIOvH,EAAb,Y,QAME,WAAmBjB,GAAc,aAC/B,cAAMA,IAAN,MANM4B,IAAoCF,cAKX,EAHhB4H,0BAAyC,GAGzB,EAsBzBC,QAAU,SAACC,GACjB,IAAMC,EAASD,EAAME,cADqC,EAET,EAAKC,YAAzCC,EAF6C,EAElD9D,IAAwB+D,EAF0B,EAEhC9D,KAFgC,EAGpCG,YAAgBuD,GAA9B3D,EAHkD,EAGlDA,IAAKC,EAH6C,EAG7CA,KAETD,IAAQ8D,GAAe7D,IAAS8D,IAIpC,EAAKF,Y,2VAAL,IAAwB,EAAKA,YAA7B,GAA6C,CAAE7D,MAAKC,SACpD,EAAK+D,oBAhC0B,EAkEzBC,cAAgB,SAACxI,GAAD,OAAmB,SACzCyI,EACAC,GAEA,GAAIvI,iBAAqBsI,GACvB,OAAOtI,eAAmBsI,EAAO,CAC/B,eAAgBzI,EAChB2I,aAAc,EAAKX,QACnB3H,IAAoB,IAAfqI,GAAoB,EAAKrI,QAxElC,EAAKuI,iBAAmB,MACxB,EAAK5J,MAAQ,CACXW,UAAWlB,EAAMkB,WAAa,EAAKiJ,iBACnC1B,gBAAgB,GAElB,EAAKa,0BAA4B,CAAC,MAAO,OAAQ,QAAS,UAC1D,EAAKK,YAAc,CACjB7D,IAAK,KACLC,KAAM,MAVuB,E,EANnC,G,EAAA,G,6EAAA,2BAoBSqE,mBAAP,SAA0BC,EAAkBC,GAEtCA,EAAUpJ,YAAcT,KAAKF,MAAMW,WAAcT,KAAKmB,KAG1DnB,KAAKqJ,mBAzBT,EAyCUA,gBAAR,WACE,GAAKrJ,KAAKmB,IAAIuF,QAAd,CAGA,IACM4B,EAAoB9B,YAAqB,CAC7CC,WAAYzG,KAAKmB,IACjB4F,iBAH4B,IAMxB+C,EACH9J,KAAKT,MAAMoB,SACVX,KAAKT,MAAMoB,QAAQE,WACnBb,KAAKT,MAAMoB,QAAQE,UAAU6F,SAC/Bf,OACI4C,EAAsB7C,YAAuBoE,GACnD,IACE,IAAMrJ,EAAYuG,YAAoB,CACpCE,8BAA+BmB,EAC/B5H,UAAWT,KAAKT,MAAMkB,WAAaT,KAAK0J,iBACxCtC,cAAepH,KAAK6I,0BACpBP,oBACAC,wBAEFvI,KAAKN,SAAS,CAAEe,UAAWA,IAC3B,MAAOsJ,GACP/J,KAAKN,SAAS,CAAEsI,gBAAgB,IAChCgC,QAAQC,MAAM,yCAA0CF,MApE9D,EAqFShK,OAAP,WAAgB,MAMVC,KAAKT,MANK,IAEZuB,aAFY,MAEJ,UAFI,MAGZJ,YAHY,MAGL,OAHK,EAIZwJ,EAJY,EAIZA,SAJY,IAKZvJ,eALY,MAKF,GALE,EAORwJ,EAAoBlJ,WAAeS,IACvC,uBAAMwI,GACNlK,KAAKsJ,cAAcxI,IAGrB,OACE,YAAC2H,EAAD,CACE/H,KAAMA,EACND,UAAWT,KAAKF,MAAMW,WAAaT,KAAK0J,iBACxC1B,eAAgBhI,KAAKF,MAAMkI,eAC3BrH,QAASA,GAERwJ,IAxGT,GAA6BlJ,sB","file":"component---src-components-tooltip-tooltip-mdx-96430af6a0d4ade406ed.js","sourcesContent":["import * as React from 'react';\nimport { Tooltip } from '@components/tooltip/Tooltip';\n\ninterface Props {\n  item: number;\n  innerRef: React.RefObject<HTMLUListElement>;\n}\n\nclass ItemWithTooltip extends React.Component<\n  Props,\n  { itemOneClicked: boolean }\n> {\n  public constructor(props: Props) {\n    super(props);\n    this.state = {\n      itemOneClicked: false\n    };\n  }\n\n  private clickCb = () => {\n    if (this.props.item === 1) {\n      this.setState({ itemOneClicked: true });\n      setTimeout(() => this.setState({ itemOneClicked: false }), 500);\n    }\n  };\n\n  private getTitle = () => {\n    const { item } = this.props;\n    if (item == 1 && !this.state.itemOneClicked) {\n      return `Item 1`;\n    } else if (item == 1 && this.state.itemOneClicked) {\n      return `This is a custom title for item 1 after click appended with an extra long text to test the placement auto change behaviour`;\n    } else {\n      return `Tooltip for item ${item} on hover.`;\n    }\n  };\n\n  public render() {\n    const { item, innerRef } = this.props;\n    return (\n      <React.Fragment>\n        <li\n          style={{\n            border: 'solid 1px lightgray',\n            padding: ' 0 4px',\n            borderRadius: '4px',\n            display: 'flex',\n            justifyContent: 'space-around'\n          }}\n        >\n          <span>Item {item}</span>\n          <Tooltip\n            placement={item === 1 ? 'left' : 'bottom'}\n            type={item === 1 && this.state.itemOneClicked ? 'success' : 'info'}\n            options={{\n              tooltipMaxWidth: 150,\n              container: innerRef\n            }}\n            title={this.getTitle()}\n          >\n            <button style={{ marginRight: '20px' }} onClick={this.clickCb}>\n              Hover me\n            </button>\n          </Tooltip>\n        </li>\n        <hr></hr>\n      </React.Fragment>\n    );\n  }\n}\n\nexport class TooltipDemo extends React.Component<\n  {},\n  { ref: React.RefObject<HTMLUListElement> }\n> {\n  private ref: React.RefObject<HTMLUListElement>;\n  public constructor(props: {}) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      ref: this.ref\n    };\n  }\n\n  public componentDidMount(): void {\n    this.setState({ ref: this.ref });\n  }\n\n  public render() {\n    return (\n      <ul\n        ref={this.ref}\n        style={{\n          height: '200px',\n          width: '300px',\n          padding: 0,\n          overflow: 'hidden',\n          overflowY: 'scroll'\n        }}\n      >\n        {[...Array(13)].map((_, key) => (\n          <ItemWithTooltip innerRef={this.state.ref} key={key} item={key} />\n        ))}\n      </ul>\n    );\n  }\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/alexandre/Documents/Programmation/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useRef } from 'react';\nimport { Playground, Props } from 'docz';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDemo } from './TooltipDemo';\nimport '../../utility/playgroundStyles.css';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"tooltip\"\n    }}>{`Tooltip`}</h1>\n    <p>{`A tooltip component that gives an extra information about something when the user moves the mouse pointer over an element.\nThis tooltip component is dynamic: it adapts to the container size. It means that if you specify a `}<inlineCode parentName=\"p\">{`right`}</inlineCode>{` placement for the tooltip and that placement doesn't fit in the current container, then the tooltip placement will be changed automatically to the first possible placement. The alternative placements order is defined like following `}<inlineCode parentName=\"p\">{`['top', 'left', 'right', 'bottom']`}</inlineCode>{`. If the tooltip-ed element changes its position in the container (due to scroll or window resize for example) then the placement will be calculated again to fit the new display.\nAlso, if the text of the tooltip changes while its being displayed, then the placement will be calculated again to make sure that it still fits in the container with the new content.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Tooltip} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show usage of the tooltip with different titles and types. You can change the size of the window (by opening the dev console for example) to see how the tooltip of the last button adapts to the new container size (placement goes from right to top).`}</p>\n    <Playground __position={1} __code={'<div>\\n  <Tooltip title=\\\"Oups!\\\" type=\\\"error\\\">\\n    <button>Tooltip me to the default (top)</button>\\n  </Tooltip>\\n</div>\\n<div>\\n  <Tooltip\\n    placement=\\\"left\\\"\\n    title=\\\"At vero eos et accusamus\\\"\\n    placement=\\\"right\\\"\\n  >\\n    <button>Tooltip me to the right</button>\\n  </Tooltip>\\n</div>\\n<div>\\n  <Tooltip\\n    placement=\\\"bottom\\\"\\n    title=\\\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?\\\"\\n    placement=\\\"bottom\\\"\\n    type=\\\"success\\\"\\n  >\\n    <button>Tooltip me to the bottom with success</button>\\n  </Tooltip>\\n</div>\\n<div>\\n  <Tooltip\\n    placement=\\\"right\\\"\\n    title=\\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \\\"\\n    placement=\\\"right\\\"\\n    type=\\\"success\\\"\\n  >\\n    <button>Tooltip me to the right with a long text</button>\\n  </Tooltip>\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      Playground,\n      Props,\n      Tooltip,\n      TooltipDemo,\n      DefaultLayout,\n      _frontmatter\n    }} className={{\n      preview: 'playground-base'\n    }} mdxType=\"Playground\">\n    <div>\n        <Tooltip title='Oups!' type='error' mdxType=\"Tooltip\">\n            <button>Tooltip me to the default (top)</button>\n        </Tooltip>\n    </div>\n    <div>\n        <Tooltip placement='left' title='At vero eos et accusamus' placement='right' mdxType=\"Tooltip\">\n            <button>Tooltip me to the right</button>\n        </Tooltip>\n    </div>\n      <div>\n    <Tooltip placement='bottom' title=\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?\" placement='bottom' type='success' mdxType=\"Tooltip\">\n        <button>Tooltip me to the bottom with success</button>\n    </Tooltip>\n      </div>\n      <div>\n    <Tooltip placement='right' title=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \" placement='right' type='success' mdxType=\"Tooltip\">\n        <button>Tooltip me to the right with a long text</button>\n    </Tooltip>\n      </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"advanced-settings\"\n    }}>{`Advanced settings`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`The Tooltip can be configured with extra options in order to customize it with the desired behaviour. This is where you can make use of the `}<inlineCode parentName=\"li\">{`options`}</inlineCode>{` props.`}</li>\n      <li parentName=\"ul\">{`The Example below shows a list of items. A tooltip is displayed once we hover the \"hover me\" button of each item. The placement of tooltip is configured to `}<inlineCode parentName=\"li\">{`bottom`}</inlineCode>{` for all items except for the item number `}<inlineCode parentName=\"li\">{`1`}</inlineCode>{` that has a `}<inlineCode parentName=\"li\">{`left`}</inlineCode>{` placement. The code associated to this example is located in the `}<inlineCode parentName=\"li\">{`TooltipDemo.tsx`}</inlineCode>{` file.`}</li>\n      <li parentName=\"ul\">{`This example shows how to configure a custom `}<inlineCode parentName=\"li\">{`container`}</inlineCode>{` (the `}<inlineCode parentName=\"li\">{`ul`}</inlineCode>{` list in our case) if you need to handle the tooltip placement calculation in a specific zone. The placement will be then calculated in the range of that container instead of Window.`}</li>\n      <li parentName=\"ul\">{`Also you can configure a `}<inlineCode parentName=\"li\">{`tooltipMaxWidth`}</inlineCode>{` to make the max-width property smaller than default (300px) in order to adapt to the tooltip size to the new container.`}</li>\n      <li parentName=\"ul\">{`You will notice as you test the behaviour below that for the fourth item the tooltip will be displayed on top instead of specified placement `}<inlineCode parentName=\"li\">{`bottom`}</inlineCode>{` since the space left doesn't allow it to be visible. And if you scroll in the list, then the space will be sufficient for it to be displayed so the placement will be set back to bottom.`}</li>\n      <li parentName=\"ul\">{`You will notice as well that once you click on the \"hover me\" button of the item number `}<inlineCode parentName=\"li\">{`1`}</inlineCode>{` the tooltip title will be updated and its placement will be automatically calculated again to fit into the container with the new long text.`}</li>\n    </ul>\n    <Playground __position={2} __code={'<TooltipDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      Playground,\n      Props,\n      Tooltip,\n      TooltipDemo,\n      DefaultLayout,\n      _frontmatter\n    }} className={{\n      preview: 'playground-base'\n    }} mdxType=\"Playground\">\n  <TooltipDemo mdxType=\"TooltipDemo\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { Placement as TooltipPlacement } from '@components/tooltip/types';\nimport { Placement as DropdownPlacement } from '@components/dropdown/types';\n/** Both tooltips and dropdown use the DOM to make sure\n * they are fitting in a container\n */\n\nconst containsNumber = (value: string) => /\\d/.test(value);\nconst containsChar = (value: string, char: string) =>\n  value.indexOf(char) !== -1;\n\nexport const isHeightAndWidthSet = (style: CSSStyleDeclaration) => {\n  const { height, width } = style;\n  if (!height || !width) {\n    return false;\n  }\n\n  return (\n    containsNumber(height) ||\n    containsNumber(width) ||\n    !containsChar(height, '%') ||\n    !containsChar(width, '%')\n  );\n};\n\nconst returnNumber = (value: number) => (isNaN(value) ? 0 : value);\n\nexport const computeElementHeight = (\n  elementStyle: CSSStyleDeclaration,\n  alternativeHeight: string | null\n) => {\n  const height =\n    parseInt(elementStyle.paddingTop || '0', 10) +\n    parseInt(elementStyle.paddingBottom || '0', 10) +\n    parseInt(elementStyle.marginTop || '0', 10) +\n    parseInt(elementStyle.marginBottom || '0', 10) +\n    parseInt(alternativeHeight || elementStyle.height || '0', 10);\n  return returnNumber(height);\n};\n\nexport const computeElementWidth = (\n  tooltipStyle: CSSStyleDeclaration,\n  alternativeWidth: string | null\n) => {\n  const width =\n    parseInt(tooltipStyle.paddingLeft || '0', 10) +\n    parseInt(tooltipStyle.paddingRight || '0', 10) +\n    parseInt(tooltipStyle.marginLeft || '0', 10) +\n    parseInt(tooltipStyle.marginRight || '0', 10) +\n    parseInt(alternativeWidth || tooltipStyle.width || '0', 10);\n\n  return returnNumber(width);\n};\n\nexport const getAlternativeStyle = (\n  initialStyle: CSSStyleDeclaration,\n  element: Element | null\n) => {\n  if (!element) {\n    return { height: '0', width: '0' };\n  }\n  let innerDiv = document.createElement('div');\n  (Object.values(initialStyle) as (keyof CSSStyleDeclaration)[]).forEach(\n    property => {\n      if (\n        property &&\n        property !== 'length' &&\n        property !== 'parentRule' &&\n        !containsNumber(property.toString())\n      ) {\n        innerDiv.style[property] = initialStyle[property];\n      }\n    }\n  );\n  element.appendChild(innerDiv);\n  let { height, width } = innerDiv.getBoundingClientRect();\n  innerDiv.remove();\n\n  return { height: height.toString(), width: width.toString() };\n};\n\nconst defaultRect = {\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  width: 0,\n  height: 0\n};\n\nexport const getBoundingRect = (element: Element | null): ClientRect => {\n  if (element) {\n    return element.getBoundingClientRect();\n  } else {\n    return defaultRect;\n  }\n};\n\nexport const getContainerBoundaries = (\n  container: Element | Window\n): ContainerDimensions => {\n  const isWindow = (element: Element | Window): element is Window =>\n    element === window;\n\n  if (isWindow(container)) {\n    return {\n      maxHeight: window.innerHeight,\n      minHeight: 0,\n      maxWidth: window.innerWidth,\n      minWidth: 0\n    };\n  }\n  const containerRect = getBoundingRect(container);\n\n  return {\n    maxHeight: containerRect.top + containerRect.height,\n    minHeight: containerRect.top,\n    minWidth: containerRect.left,\n    maxWidth: containerRect.left + containerRect.width\n  };\n};\n\nexport const getCSSComputedStyle = (params: {\n  element: Element;\n  getBeforePseudoElement?: boolean;\n}) => {\n  return window.getComputedStyle(\n    params.element,\n    params.getBeforePseudoElement ? ':before' : undefined\n  );\n};\n\nexport const getElementDimensions = (params: {\n  elementRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}) => {\n  if (!params.elementRef.current) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.elementRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  if (!dropdownStyle) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.elementRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.elementRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport interface ElementDimensions {\n  rect: ClientRect;\n  totalHeight: number;\n  totalWidth: number;\n}\n\ninterface ContainerDimensions {\n  maxHeight: number;\n  maxWidth: number;\n  minHeight: number;\n  minWidth: number;\n}\n\ntype AllPlacements = TooltipPlacement | DropdownPlacement;\n\nexport type IsElementOutOfContainerMethod<T extends AllPlacements> = (params: {\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n  placement: T;\n}) => boolean;\n\ninterface ElementPlacementParams<T extends AllPlacements> {\n  isElementOutOfContainerMethod: IsElementOutOfContainerMethod<T>;\n  placement: T;\n  possibilities: T[];\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n}\n\nexport const getElementPlacement = <T extends AllPlacements>(\n  params: ElementPlacementParams<T>\n): T | null => {\n  if (!params.placement) {\n    throw new Error(\n      'Element cannot be displayed in the container Element/Window due to its incompatible size.' +\n        'Please consider reducing it or better position tooltiped' +\n        'element in the screen.'\n    );\n  }\n\n  if (\n    !params.isElementOutOfContainerMethod({\n      ...params\n    })\n  ) {\n    return params.placement;\n  }\n\n  const newPossibilities = params.possibilities.filter(\n    possiblePlacement => params.placement !== possiblePlacement\n  );\n  const [firstPossiblePlacement] = newPossibilities;\n\n  return getElementPlacement({\n    ...params,\n    placement: firstPossiblePlacement,\n    possibilities: newPossibilities\n  });\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n","import { dashGreen00, functionalRed02, validatorGreen } from '@colors';\nimport { assertUnreachable } from '@utility/helpers';\nimport { WrapperProps } from './Tooltip';\nimport { Placement, TooltipType } from './types';\nimport { IsElementOutOfContainerMethod } from '@utility/positionCompute';\nexport const tooltipMargin = 10;\nconst rightTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: ${tooltipMargin}px;\n`;\n\nconst leftTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: ${tooltipMargin}px;\n`;\n\nconst topTooltipStyle = `\n  margin-bottom: 10px;\n  bottom: 100%;\n  left: 50%;\n`;\n\nconst bottomTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  left: 50%;\n  top: 100%;\n  margin-top: ${tooltipMargin}px;\n`;\n\nconst topTooltipArrowStyle = `\n  margin-bottom: 5px;\n  bottom: 100%;\n  transform: translate(-50%, 0);\n  left: 50%;\n`;\n\nconst rightTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(90deg) translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: -2px;\n  margin-top: -4px;\n`;\n\nconst leftTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(-90deg) translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: -2px;\n  margin-top: -4px;\n`;\n\nconst bottomTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(180deg) translate(-50%, 0);\n  top: 100%;\n  left: unset;\n  right: 50%\n  margin-top: 5px;\n`;\n\nexport const handleTooltipPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipStyle;\n    case 'right':\n      return rightTooltipStyle;\n    case 'left':\n      return leftTooltipStyle;\n    case 'bottom':\n      return bottomTooltipStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const handleTooltipArrowPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipArrowStyle;\n    case 'right':\n      return rightTooltipArrowStyle;\n    case 'left':\n      return leftTooltipArrowStyle;\n    case 'bottom':\n      return bottomTooltipArrowStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const displayIfInContainer = ({ outOfContainer }: WrapperProps) => {\n  return !outOfContainer\n    ? `visibility: visible;\n       opacity: 1;`\n    : ``;\n};\n\nexport const getTooltipBgColorByType = (type: TooltipType) => {\n  switch (type) {\n    case 'info':\n      return dashGreen00;\n    case 'success':\n      return validatorGreen;\n    case 'error':\n      return functionalRed02;\n    default:\n      return assertUnreachable(type);\n  }\n};\n\nexport const isTooltipOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n          containerDimensions.maxHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'right':\n      return (\n        elementDimensions.rect.left +\n          elementDimensions.rect.width +\n          elementDimensions.totalWidth >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n    case 'left':\n      return (\n        elementDimensions.rect.left - elementDimensions.totalWidth <\n          containerDimensions.minWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\nexport const removeOutOfScreenPlacement = (\n  possibilities: Placement[],\n  placement: Placement\n) => {\n  return possibilities.filter(\n    possiblePlacement => possiblePlacement !== placement\n  );\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { white } from '@colors';\nimport { Placement } from '@components/tooltip/types';\nimport {\n  displayIfInContainer,\n  getTooltipBgColorByType,\n  handleTooltipArrowPosition,\n  handleTooltipPosition,\n  isTooltipOutOfContainer\n} from '@components/tooltip/helpers';\nimport {\n  getBoundingRect,\n  getContainerBoundaries,\n  getElementDimensions,\n  getElementPlacement\n} from '@utility/positionCompute';\n\nexport interface Props {\n  title: string;\n  /**\n   * The position of the tooltip\n   * @default top\n   */\n  placement?: 'right' | 'left' | 'top' | 'bottom';\n  /**\n   * A type that defines the tooltip color\n   * @default info\n   */\n  type?: 'info' | 'success' | 'error';\n  /**\n   * Extra options\n   * @default {tooltipMaxWidth: 300 (in px), container: window}\n   */\n  options?: {\n    /**\n     * A max width for the tooltip\n     */\n    tooltipMaxWidth?: number;\n    /**\n     * An element as a container (if not the default window)\n     */\n    container?: React.RefObject<HTMLElement>;\n  };\n}\n\ninterface State {\n  outOfContainer: boolean;\n  placement: Placement | null;\n}\n\nexport type WrapperProps = Omit<Required<Props>, 'title'> & {\n  outOfContainer: boolean;\n};\n\nconst TooltipWrapper = styled.span<WrapperProps>`\n  > :first-child:hover {\n    position: relative;\n  }\n\n  > :first-child::before {\n    font-family: inherit;\n    visibility: hidden;\n    opacity: 0;\n    font-size: 0.75rem;\n    line-height: 1.25;\n    display: inline-block;\n    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    padding: 8px;\n    background-color: ${({ type }: WrapperProps) =>\n      getTooltipBgColorByType(type)};\n    content: attr(data-tooltip);\n    color: ${white};\n    position: absolute;\n    max-width: ${({ options }: WrapperProps) =>\n      options.tooltipMaxWidth ? `${options.tooltipMaxWidth}px` : '300px'};\n    width: max-content;\n    @supports (-ms-ime-align: auto) {\n      min-width: 50px;\n    }\n    word-wrap: break-word;\n    transform: translate(-50%, 0);\n    text-align: center;\n    z-index: 1001;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipPosition}\n  }\n\n  > :first-child:hover::before {\n    ${displayIfInContainer}\n  }\n\n  > :first-child::after {\n    display: inline-block;\n    visibility: hidden;\n    opacity: 0;\n    width: 0;\n    height: 0;\n    border-left: 7px solid transparent;\n    border-right: 7px solid transparent;\n    border-top: 7px solid\n      ${({ type }: WrapperProps) => getTooltipBgColorByType(type)};\n    position: absolute;\n    content: '';\n    z-index: 1002;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipArrowPosition}\n  }\n\n  > :first-child:hover::after {\n    ${displayIfInContainer}\n  }\n`;\n\nexport class Tooltip extends React.PureComponent<Props, State> {\n  private ref: React.RefObject<HTMLElement> = React.createRef();\n  private coordinates: { top: number | null; left: number | null };\n  private readonly tooltipPossiblePlacements: Placement[] = [];\n  private readonly defaultPlacement: Placement;\n\n  public constructor(props: Props) {\n    super(props);\n    this.defaultPlacement = 'top';\n    this.state = {\n      placement: props.placement || this.defaultPlacement,\n      outOfContainer: false\n    };\n    this.tooltipPossiblePlacements = ['top', 'left', 'right', 'bottom'];\n    this.coordinates = {\n      top: null,\n      left: null\n    };\n  }\n\n  public componentDidUpdate(prevProps: Props, prevState: State): void {\n    // if state is the same (the update came from prop change) do calculate else if state changed (update caused by new positioning) do not calculate again\n    if (prevState.placement !== this.state.placement || !this.ref) {\n      return;\n    }\n    this.positionTooltip();\n  }\n\n  private onHover = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.currentTarget;\n    const { top: previousTop, left: previousLeft } = this.coordinates;\n    const { top, left } = getBoundingRect(target);\n\n    if (top === previousTop && left === previousLeft) {\n      return;\n    }\n\n    this.coordinates = { ...this.coordinates, ...{ top, left } };\n    this.positionTooltip();\n  };\n\n  private positionTooltip() {\n    if (!this.ref.current) {\n      return;\n    }\n    const isBeforePseudoElement = true;\n    const elementDimensions = getElementDimensions({\n      elementRef: this.ref,\n      elementIsBefore: isBeforePseudoElement\n    });\n\n    const containerElement =\n      (this.props.options &&\n        this.props.options.container &&\n        this.props.options.container.current) ||\n      window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n    try {\n      const placement = getElementPlacement({\n        isElementOutOfContainerMethod: isTooltipOutOfContainer,\n        placement: this.props.placement || this.defaultPlacement,\n        possibilities: this.tooltipPossiblePlacements,\n        elementDimensions,\n        containerDimensions\n      });\n      this.setState({ placement: placement });\n    } catch (e) {\n      this.setState({ outOfContainer: true });\n      console.error('Error while computing Tooltip position', e);\n    }\n  }\n\n  private cloneChildren = (title: string) => (\n    child: React.ReactNode,\n    childIndex: number\n  ) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        'data-tooltip': title,\n        onMouseEnter: this.onHover,\n        ref: childIndex === 0 && this.ref\n      });\n    }\n  };\n\n  public render() {\n    const {\n      title = 'Default',\n      type = 'info',\n      children,\n      options = {}\n    } = this.props;\n    const childrenWithProps = React.Children.map(\n      <div>{children}</div>, // Wrapping the children with a div to make sure that the tooltip will be attached to this div so any state modification of the initial children (disabled, etc..) won't affect the style of the tooltip\n      this.cloneChildren(title)\n    );\n\n    return (\n      <TooltipWrapper\n        type={type}\n        placement={this.state.placement || this.defaultPlacement}\n        outOfContainer={this.state.outOfContainer}\n        options={options}\n      >\n        {childrenWithProps}\n      </TooltipWrapper>\n    );\n  }\n}\n"],"sourceRoot":""}