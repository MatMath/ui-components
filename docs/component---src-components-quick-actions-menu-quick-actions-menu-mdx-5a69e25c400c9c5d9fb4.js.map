{"version":3,"sources":["webpack:///../src/utility/cssUtils.ts","webpack:///../src/ions/text/StyledText.tsx","webpack:///../src/components/dropdown/DropdownElement.tsx","webpack:///../src/utility/positionCompute.ts","webpack:///../node_modules/gatsby/node_modules/core-js/modules/es7.object.values.js","webpack:///../src/utility/helpers.ts","webpack:///../src/ions/icon/base/Icon.tsx","webpack:///../src/ions/icon/wrapper/SvgWrapper.tsx","webpack:///../src/components/tooltip/helpers.ts","webpack:///../src/components/tooltip/Tooltip.tsx","webpack:///../src/components/dropdown/subcomponents/DropdownCard.tsx","webpack:///../src/components/dropdown/helpers.ts","webpack:///../src/components/dropdown/DropdownMenu.tsx","webpack:///../src/components/button/Button.tsx","webpack:///../src/components/button/Button.module.scss","webpack:///../src/atoms/icons/MoreIcon.tsx","webpack:///../src/components/quick-actions-menu/QuickActionsMenu.tsx","webpack:///../src/components/quick-actions-menu/QuickActionsMenu.mdx"],"names":["getClassNames","result","classes","forEach","value","push","Object","entries","key","join","StyledText","styled","span","Wrapper","button","dashGreen00","dashGreen06","DropdownElement","props","type","onClick","className","elementClassName","children","containsNumber","test","containsChar","char","indexOf","isHeightAndWidthSet","style","height","width","returnNumber","isNaN","computeElementHeight","elementStyle","alternativeHeight","parseInt","paddingTop","paddingBottom","marginTop","marginBottom","computeElementWidth","tooltipStyle","alternativeWidth","paddingLeft","paddingRight","marginLeft","marginRight","getAlternativeStyle","initialStyle","element","innerDiv","document","createElement","values","property","toString","appendChild","getBoundingClientRect","remove","defaultRect","top","left","right","bottom","getBoundingRect","getContainerBoundaries","container","window","maxHeight","innerHeight","minHeight","maxWidth","innerWidth","minWidth","containerRect","getCSSComputedStyle","params","getComputedStyle","getBeforePseudoElement","undefined","getElementDimensions","elementRef","current","totalHeight","totalWidth","rect","dropdownStyle","elementIsBefore","getElementPlacement","placement","Error","isElementOutOfContainerMethod","newPossibilities","possibilities","filter","possiblePlacement","firstPossiblePlacement","$export","$values","S","it","assertUnreachable","_","getColor","propName","animated","Icon","svg","attrs","viewBox","version","xmlns","size","disabled","SvgWrapper","title","isAnimated","Array","from","find","child","isAnimatedSvg","handleTooltipPosition","handleTooltipArrowPosition","displayIfInContainer","outOfContainer","getTooltipBgColorByType","validatorGreen","functionalRed02","isTooltipOutOfContainer","elementDimensions","containerDimensions","removeOutOfScreenPlacement","TooltipWrapper","white","options","tooltipMaxWidth","Tooltip","ref","React","tooltipPossiblePlacements","onHover","event","target","currentTarget","coordinates","previousTop","previousLeft","positionTooltip","cloneChildren","childIndex","onMouseEnter","defaultPlacement","state","componentDidUpdate","prevProps","prevState","this","containerElement","setState","e","console","error","render","childrenWithProps","map","DropdownCard","div","dashGreen04","isDropdownOutOfContainer","getControllerAndMenuDimensions","menuRef","controllerRef","getDropdownPosition","dockingSide","MenuWrapper","isReadyForDisplay","POSSIBLE_PLACEMENTS","DropdownMenu","setPlacement","prevIsOpen","isOpen","containerRef","newPlacement","menuMaxHeight","menuClassName","Button","nature","theme","htmlButtonProps","styles","content","module","exports","MoreIcon","d","SquareButton","QuickActionsMenu","tooltipTitle","isDisabled","icon","maxMenuHeight","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","of","__position","__code","__scope","Playground","Props","preview","setIsOpen","preventDefault","isMDXComponent"],"mappings":"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","file":"component---src-components-quick-actions-menu-quick-actions-menu-mdx-5a69e25c400c9c5d9fb4.js","sourcesContent":["interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (value) {\n      if (typeof value === 'string') {\n        result.push(value);\n      } else {\n        Object.entries(value).forEach(([key, value]) => {\n          if (value) {\n            result.push(key);\n          }\n        });\n      }\n    }\n  });\n  return result.join(' ');\n};\n","import styled from 'styled-components';\n\nexport const StyledText = styled.span`\n  font-family: inherit;\n  font-weight: 600;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { StyledText } from '@ions/text/StyledText';\nimport { dashGreen00, dashGreen06 } from '@colors';\n\ninterface Props {\n  onClick: (e: React.MouseEvent) => void;\n  elementClassName?: string;\n}\n\nconst Wrapper = styled.button`\n  color: ${dashGreen00};\n  line-height: 20px;\n  font-size: 16px;\n  cursor: pointer;\n  border: transparent 0px;\n  outline: none;\n  display: flex;\n  box-sizing: border-box;\n  height: 36px;\n  flex-shrink: 0;\n  padding: 8px 16px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  &:hover {\n    background-color: ${dashGreen06};\n  }\n`;\n\nexport const DropdownElement: React.FC<Props> = props => {\n  return (\n    <Wrapper\n      type='button'\n      onClick={props.onClick}\n      className={props.elementClassName}\n    >\n      <StyledText>{props.children}</StyledText>\n    </Wrapper>\n  );\n};\n","import { Placement as TooltipPlacement } from '@components/tooltip/types';\nimport { Placement as DropdownPlacement } from '@components/dropdown/types';\n/** Both tooltips and dropdown use the DOM to make sure\n * they are fitting in a container\n */\n\nconst containsNumber = (value: string) => /\\d/.test(value);\nconst containsChar = (value: string, char: string) =>\n  value.indexOf(char) !== -1;\n\nexport const isHeightAndWidthSet = (style: CSSStyleDeclaration) => {\n  const { height, width } = style;\n  if (!height || !width) {\n    return false;\n  }\n\n  return (\n    containsNumber(height) ||\n    containsNumber(width) ||\n    !containsChar(height, '%') ||\n    !containsChar(width, '%')\n  );\n};\n\nconst returnNumber = (value: number) => (isNaN(value) ? 0 : value);\n\nexport const computeElementHeight = (\n  elementStyle: CSSStyleDeclaration,\n  alternativeHeight: string | null\n) => {\n  const height =\n    parseInt(elementStyle.paddingTop || '0', 10) +\n    parseInt(elementStyle.paddingBottom || '0', 10) +\n    parseInt(elementStyle.marginTop || '0', 10) +\n    parseInt(elementStyle.marginBottom || '0', 10) +\n    parseInt(alternativeHeight || elementStyle.height || '0', 10);\n  return returnNumber(height);\n};\n\nexport const computeElementWidth = (\n  tooltipStyle: CSSStyleDeclaration,\n  alternativeWidth: string | null\n) => {\n  const width =\n    parseInt(tooltipStyle.paddingLeft || '0', 10) +\n    parseInt(tooltipStyle.paddingRight || '0', 10) +\n    parseInt(tooltipStyle.marginLeft || '0', 10) +\n    parseInt(tooltipStyle.marginRight || '0', 10) +\n    parseInt(alternativeWidth || tooltipStyle.width || '0', 10);\n\n  return returnNumber(width);\n};\n\nexport const getAlternativeStyle = (\n  initialStyle: CSSStyleDeclaration,\n  element: Element | null\n) => {\n  if (!element) {\n    return { height: '0', width: '0' };\n  }\n  let innerDiv = document.createElement('div');\n  (Object.values(initialStyle) as (keyof CSSStyleDeclaration)[]).forEach(\n    property => {\n      if (\n        property &&\n        property !== 'length' &&\n        property !== 'parentRule' &&\n        !containsNumber(property.toString())\n      ) {\n        innerDiv.style[property] = initialStyle[property];\n      }\n    }\n  );\n  element.appendChild(innerDiv);\n  let { height, width } = innerDiv.getBoundingClientRect();\n  innerDiv.remove();\n\n  return { height: height.toString(), width: width.toString() };\n};\n\nconst defaultRect = {\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  width: 0,\n  height: 0\n};\n\nexport const getBoundingRect = (element: Element | null): ClientRect => {\n  if (element) {\n    return element.getBoundingClientRect();\n  } else {\n    return defaultRect;\n  }\n};\n\nexport const getContainerBoundaries = (\n  container: Element | Window\n): ContainerDimensions => {\n  const isWindow = (element: Element | Window): element is Window =>\n    element === window;\n\n  if (isWindow(container)) {\n    return {\n      maxHeight: window.innerHeight,\n      minHeight: 0,\n      maxWidth: window.innerWidth,\n      minWidth: 0\n    };\n  }\n  const containerRect = getBoundingRect(container);\n\n  return {\n    maxHeight: containerRect.top + containerRect.height,\n    minHeight: containerRect.top,\n    minWidth: containerRect.left,\n    maxWidth: containerRect.left + containerRect.width\n  };\n};\n\nexport const getCSSComputedStyle = (params: {\n  element: Element;\n  getBeforePseudoElement?: boolean;\n}) => {\n  return window.getComputedStyle(\n    params.element,\n    params.getBeforePseudoElement ? ':before' : undefined\n  );\n};\n\nexport const getElementDimensions = (params: {\n  elementRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}) => {\n  if (!params.elementRef.current) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.elementRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  if (!dropdownStyle) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.elementRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.elementRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport interface ElementDimensions {\n  rect: ClientRect;\n  totalHeight: number;\n  totalWidth: number;\n}\n\ninterface ContainerDimensions {\n  maxHeight: number;\n  maxWidth: number;\n  minHeight: number;\n  minWidth: number;\n}\n\ntype AllPlacements = TooltipPlacement | DropdownPlacement;\n\nexport type IsElementOutOfContainerMethod<T extends AllPlacements> = (params: {\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n  placement: T;\n}) => boolean;\n\ninterface ElementPlacementParams<T extends AllPlacements> {\n  isElementOutOfContainerMethod: IsElementOutOfContainerMethod<T>;\n  placement: T;\n  possibilities: T[];\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n}\n\nexport const getElementPlacement = <T extends AllPlacements>(\n  params: ElementPlacementParams<T>\n): T | null => {\n  if (!params.placement) {\n    throw new Error(\n      'Element cannot be displayed in the container Element/Window due to its incompatible size.' +\n        'Please consider reducing it or better position tooltiped' +\n        'element in the screen.'\n    );\n  }\n\n  if (\n    !params.isElementOutOfContainerMethod({\n      ...params\n    })\n  ) {\n    return params.placement;\n  }\n\n  const newPossibilities = params.possibilities.filter(\n    possiblePlacement => params.placement !== possiblePlacement\n  );\n  const [firstPossiblePlacement] = newPossibilities;\n\n  return getElementPlacement({\n    ...params,\n    placement: firstPossiblePlacement,\n    possibilities: newPossibilities\n  });\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n","import styled from 'styled-components';\nimport { Props as IconProps } from '@ions/icon/types';\nimport { dashGreen00 } from '@colors';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getWidth = ({ width, size }: Props) => `${size || width || 20}px`;\nconst getHeight = ({ height, size }: Props) => `${size || height || 20}px`;\nconst getColor = (propName: ColorProps = 'color') => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || props['color'] || dashGreen00;\n\nexport const Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getWidth};\n  height: ${getHeight};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'inherit')};\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor()};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)};\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n","import * as React from 'react';\nimport { Icon } from '@ions/icon/base/Icon';\nimport { Props } from '@ions/icon/types';\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\n\nexport const SvgWrapper: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n","import { dashGreen00, functionalRed02, validatorGreen } from '@colors';\nimport { assertUnreachable } from '@utility/helpers';\nimport { WrapperProps } from './Tooltip';\nimport { Placement, TooltipType } from './types';\nimport { IsElementOutOfContainerMethod } from '@utility/positionCompute';\nexport const tooltipMargin = 10;\nconst rightTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: ${tooltipMargin}px;\n`;\n\nconst leftTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: ${tooltipMargin}px;\n`;\n\nconst topTooltipStyle = `\n  margin-bottom: 10px;\n  bottom: 100%;\n  left: 50%;\n`;\n\nconst bottomTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  left: 50%;\n  top: 100%;\n  margin-top: ${tooltipMargin}px;\n`;\n\nconst topTooltipArrowStyle = `\n  margin-bottom: 5px;\n  bottom: 100%;\n  transform: translate(-50%, 0);\n  left: 50%;\n`;\n\nconst rightTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(90deg) translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: -2px;\n  margin-top: -4px;\n`;\n\nconst leftTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(-90deg) translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: -2px;\n  margin-top: -4px;\n`;\n\nconst bottomTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(180deg) translate(-50%, 0);\n  top: 100%;\n  left: unset;\n  right: 50%\n  margin-top: 5px;\n`;\n\nexport const handleTooltipPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipStyle;\n    case 'right':\n      return rightTooltipStyle;\n    case 'left':\n      return leftTooltipStyle;\n    case 'bottom':\n      return bottomTooltipStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const handleTooltipArrowPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipArrowStyle;\n    case 'right':\n      return rightTooltipArrowStyle;\n    case 'left':\n      return leftTooltipArrowStyle;\n    case 'bottom':\n      return bottomTooltipArrowStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const displayIfInContainer = ({ outOfContainer }: WrapperProps) => {\n  return !outOfContainer\n    ? `visibility: visible;\n       opacity: 1;`\n    : ``;\n};\n\nexport const getTooltipBgColorByType = (type: TooltipType) => {\n  switch (type) {\n    case 'info':\n      return dashGreen00;\n    case 'success':\n      return validatorGreen;\n    case 'error':\n      return functionalRed02;\n    default:\n      return assertUnreachable(type);\n  }\n};\n\nexport const isTooltipOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n          containerDimensions.maxHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'right':\n      return (\n        elementDimensions.rect.left +\n          elementDimensions.rect.width +\n          elementDimensions.totalWidth >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n    case 'left':\n      return (\n        elementDimensions.rect.left - elementDimensions.totalWidth <\n          containerDimensions.minWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\nexport const removeOutOfScreenPlacement = (\n  possibilities: Placement[],\n  placement: Placement\n) => {\n  return possibilities.filter(\n    possiblePlacement => possiblePlacement !== placement\n  );\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { white } from '@colors';\nimport { Placement } from '@components/tooltip/types';\nimport {\n  displayIfInContainer,\n  getTooltipBgColorByType,\n  handleTooltipArrowPosition,\n  handleTooltipPosition,\n  isTooltipOutOfContainer\n} from '@components/tooltip/helpers';\nimport {\n  getBoundingRect,\n  getContainerBoundaries,\n  getElementDimensions,\n  getElementPlacement\n} from '@utility/positionCompute';\n\nexport interface Props {\n  title: string;\n  /**\n   * The position of the tooltip\n   * @default top\n   */\n  placement?: 'right' | 'left' | 'top' | 'bottom';\n  /**\n   * A type that defines the tooltip color\n   * @default info\n   */\n  type?: 'info' | 'success' | 'error';\n  /**\n   * Extra options\n   * @default {tooltipMaxWidth: 300 (in px), container: window}\n   */\n  options?: {\n    /**\n     * A max width for the tooltip\n     */\n    tooltipMaxWidth?: number;\n    /**\n     * An element as a container (if not the default window)\n     */\n    container?: React.RefObject<HTMLElement>;\n  };\n}\n\ninterface State {\n  outOfContainer: boolean;\n  placement: Placement | null;\n}\n\nexport type WrapperProps = Omit<Required<Props>, 'title'> & {\n  outOfContainer: boolean;\n};\n\nconst TooltipWrapper = styled.span<WrapperProps>`\n  > :first-child:hover {\n    position: relative;\n  }\n\n  > :first-child::before {\n    font-family: inherit;\n    visibility: hidden;\n    opacity: 0;\n    font-size: 0.75rem;\n    line-height: 1.25;\n    display: inline-block;\n    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    padding: 8px;\n    background-color: ${({ type }: WrapperProps) =>\n      getTooltipBgColorByType(type)};\n    content: attr(data-tooltip);\n    color: ${white};\n    position: absolute;\n    max-width: ${({ options }: WrapperProps) =>\n      options.tooltipMaxWidth ? `${options.tooltipMaxWidth}px` : '300px'};\n    width: max-content;\n    @supports (-ms-ime-align: auto) {\n      min-width: 50px;\n    }\n    word-wrap: break-word;\n    transform: translate(-50%, 0);\n    text-align: center;\n    z-index: 1001;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipPosition}\n  }\n\n  > :first-child:hover::before {\n    ${displayIfInContainer}\n  }\n\n  > :first-child::after {\n    display: inline-block;\n    visibility: hidden;\n    opacity: 0;\n    width: 0;\n    height: 0;\n    border-left: 7px solid transparent;\n    border-right: 7px solid transparent;\n    border-top: 7px solid\n      ${({ type }: WrapperProps) => getTooltipBgColorByType(type)};\n    position: absolute;\n    content: '';\n    z-index: 1002;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipArrowPosition}\n  }\n\n  > :first-child:hover::after {\n    ${displayIfInContainer}\n  }\n`;\n\nexport class Tooltip extends React.PureComponent<Props, State> {\n  private ref: React.RefObject<HTMLElement> = React.createRef();\n  private coordinates: { top: number | null; left: number | null };\n  private readonly tooltipPossiblePlacements: Placement[] = [];\n  private readonly defaultPlacement: Placement;\n\n  public constructor(props: Props) {\n    super(props);\n    this.defaultPlacement = 'top';\n    this.state = {\n      placement: props.placement || this.defaultPlacement,\n      outOfContainer: false\n    };\n    this.tooltipPossiblePlacements = ['top', 'left', 'right', 'bottom'];\n    this.coordinates = {\n      top: null,\n      left: null\n    };\n  }\n\n  public componentDidUpdate(prevProps: Props, prevState: State): void {\n    // if state is the same (the update came from prop change) do calculate else if state changed (update caused by new positioning) do not calculate again\n    if (prevState.placement !== this.state.placement || !this.ref) {\n      return;\n    }\n    this.positionTooltip();\n  }\n\n  private onHover = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.currentTarget;\n    const { top: previousTop, left: previousLeft } = this.coordinates;\n    const { top, left } = getBoundingRect(target);\n\n    if (top === previousTop && left === previousLeft) {\n      return;\n    }\n\n    this.coordinates = { ...this.coordinates, ...{ top, left } };\n    this.positionTooltip();\n  };\n\n  private positionTooltip() {\n    if (!this.ref.current) {\n      return;\n    }\n    const isBeforePseudoElement = true;\n    const elementDimensions = getElementDimensions({\n      elementRef: this.ref,\n      elementIsBefore: isBeforePseudoElement\n    });\n\n    const containerElement =\n      (this.props.options &&\n        this.props.options.container &&\n        this.props.options.container.current) ||\n      window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n    try {\n      const placement = getElementPlacement({\n        isElementOutOfContainerMethod: isTooltipOutOfContainer,\n        placement: this.props.placement || this.defaultPlacement,\n        possibilities: this.tooltipPossiblePlacements,\n        elementDimensions,\n        containerDimensions\n      });\n      this.setState({ placement: placement });\n    } catch (e) {\n      this.setState({ outOfContainer: true });\n      console.error('Error while computing Tooltip position', e);\n    }\n  }\n\n  private cloneChildren = (title: string) => (\n    child: React.ReactNode,\n    childIndex: number\n  ) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        'data-tooltip': title,\n        onMouseEnter: this.onHover,\n        ref: childIndex === 0 && this.ref\n      });\n    }\n  };\n\n  public render() {\n    const {\n      title = 'Default',\n      type = 'info',\n      children,\n      options = {}\n    } = this.props;\n    const childrenWithProps = React.Children.map(\n      <div>{children}</div>, // Wrapping the children with a div to make sure that the tooltip will be attached to this div so any state modification of the initial children (disabled, etc..) won't affect the style of the tooltip\n      this.cloneChildren(title)\n    );\n\n    return (\n      <TooltipWrapper\n        type={type}\n        placement={this.state.placement || this.defaultPlacement}\n        outOfContainer={this.state.outOfContainer}\n        options={options}\n      >\n        {childrenWithProps}\n      </TooltipWrapper>\n    );\n  }\n}\n","import styled from 'styled-components';\nimport { dashGreen04, white } from '@colors';\n\ninterface Props {\n  maxHeight?: number;\n  className?: string;\n}\n\nexport const DropdownCard = styled.div<Props>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${white};\n  border: 1px solid ${dashGreen04};\n  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  padding: 8px 0;\n  max-height: ${props => props.maxHeight || 100}px;\n  overflow-y: scroll;\n`;\n","import { Placement } from './types';\nimport { assertUnreachable } from '@utility/helpers';\nimport {\n  computeElementHeight,\n  computeElementWidth,\n  ElementDimensions,\n  getAlternativeStyle,\n  getBoundingRect,\n  getCSSComputedStyle,\n  IsElementOutOfContainerMethod,\n  isHeightAndWidthSet\n} from '@utility/positionCompute';\nimport { MenuWrapperProps } from './DropdownMenu';\n\nconst MARGIN = 4;\n\nexport const isDropdownOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n        containerDimensions.minHeight\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n        containerDimensions.maxHeight\n      );\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\ninterface GetControllerAndMenuDimensionsParams {\n  menuRef: React.RefObject<HTMLElement>;\n  controllerRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}\n\nexport const getControllerAndMenuDimensions = (\n  params: GetControllerAndMenuDimensionsParams\n): ElementDimensions => {\n  if (!params.menuRef.current) {\n    return {\n      rect: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        width: 0,\n        height: 0\n      },\n      totalHeight: 0,\n      totalWidth: 0\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.menuRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.menuRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.controllerRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport const getDropdownPosition = ({\n  dockingSide,\n  placement\n}: MenuWrapperProps) => {\n  return `${placement === 'top' ? 'bottom' : 'top'}: 100%;\n  transform: translateY(${placement === 'top' ? -1 * MARGIN : MARGIN}px);\n  ${dockingSide}: 0;`;\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { DropdownCard } from './subcomponents/DropdownCard';\nimport { DockingSide, Placement } from './types';\nimport {\n  getControllerAndMenuDimensions,\n  getDropdownPosition,\n  isDropdownOutOfContainer\n} from './helpers';\nimport {\n  getContainerBoundaries,\n  getElementPlacement\n} from '@utility/positionCompute';\n\ninterface Props {\n  isOpen: boolean;\n  controllerRef: React.RefObject<HTMLElement>;\n  menuMaxHeight?: number;\n  dockingSide?: DockingSide;\n  placement?: Placement;\n  containerRef?: React.RefObject<HTMLElement>;\n  menuClassName?: string;\n}\n\nexport interface MenuWrapperProps {\n  placement: Placement;\n  dockingSide: DockingSide;\n  isReadyForDisplay: boolean;\n}\n\nconst MenuWrapper = styled.div<MenuWrapperProps>`\n  position: absolute;\n  opacity: ${props => (props.isReadyForDisplay ? 1 : 0)};\n  ${getDropdownPosition}\n  max-width: 318px;\n`;\n\nconst DEFAULT_PLACEMENT = 'bottom';\nconst POSSIBLE_PLACEMENTS: Placement[] = ['top', 'bottom'];\n\nexport const DropdownMenu: React.FC<Props> = props => {\n  const [placement, setPlacement] = React.useState<Placement | null>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n  const prevIsOpen = React.useRef(false);\n\n  React.useEffect(() => {\n    if (props.isOpen === prevIsOpen.current) {\n      return;\n    }\n    prevIsOpen.current = props.isOpen;\n    setPlacement(null);\n\n    if (!menuRef.current || !props.controllerRef.current) {\n      return;\n    }\n    const elementDimensions = getControllerAndMenuDimensions({\n      menuRef,\n      controllerRef: props.controllerRef\n    });\n\n    const containerElement =\n      (props.containerRef && props.containerRef.current) || window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n\n    try {\n      const newPlacement = getElementPlacement({\n        isElementOutOfContainerMethod: isDropdownOutOfContainer,\n        placement: props.placement || DEFAULT_PLACEMENT,\n        possibilities: POSSIBLE_PLACEMENTS,\n        elementDimensions,\n        containerDimensions\n      });\n      setPlacement(newPlacement);\n    } catch (e) {\n      console.error('Error while computing DropdownMenu position', e);\n      setPlacement(DEFAULT_PLACEMENT);\n    }\n  });\n\n  return (\n    <>\n      {props.isOpen && (\n        <MenuWrapper\n          placement={placement || DEFAULT_PLACEMENT}\n          ref={menuRef}\n          dockingSide={props.dockingSide || 'left'}\n          isReadyForDisplay={placement !== null}\n        >\n          <DropdownCard\n            maxHeight={props.menuMaxHeight}\n            className={props.menuClassName}\n          >\n            {props.children}\n          </DropdownCard>\n        </MenuWrapper>\n      )}\n    </>\n  );\n};\n","import * as React from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport styles from './Button.module.scss';\n\ntype ButtonNature = 'primary' | 'secondary' | 'danger' | 'ghost';\ntype ButtonSize = 'small' | 'medium' | 'large';\ntype ButtonTheme = 'light' | 'dark';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  nature?: ButtonNature;\n  size?: ButtonSize;\n  theme?: ButtonTheme;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  nature = 'primary',\n  size = 'medium',\n  theme = 'light',\n  children,\n  ...htmlButtonProps\n}) => {\n  return (\n    <button\n      {...htmlButtonProps}\n      className={getClassNames(\n        styles.button,\n        styles[nature],\n        styles[size],\n        styles[theme]\n      )}\n    >\n      {children ? <span className={styles.content}>{children}</span> : null}\n    </button>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button-module--button--3_mlL\",\"small\":\"Button-module--small--3iAdo\",\"medium\":\"Button-module--medium--zuKCu\",\"large\":\"Button-module--large--2PHKV\",\"light\":\"Button-module--light--1PI8o\",\"primary\":\"Button-module--primary--1fSDS\",\"secondary\":\"Button-module--secondary--2aogy\",\"danger\":\"Button-module--danger--up85X\",\"ghost\":\"Button-module--ghost--3kL3_\",\"dark\":\"Button-module--dark--Ytoiu\",\"content\":\"Button-module--content--18tRJ\"};","import * as React from 'react';\nimport { SvgWrapper } from '@ions/icon/wrapper/SvgWrapper';\nimport { IconProps } from '@ions/icon/types';\n\nexport const MoreIcon: React.FC<IconProps> = (props: IconProps) => (\n  <SvgWrapper {...props}>\n    <React.Fragment>\n      <path d='M4 9H6V11H4V9Z' />\n      <path d='M9 9H11V11H9V9Z' />\n      <path d='M14 9H16V11H14V9Z' />\n    </React.Fragment>\n  </SvgWrapper>\n);\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@components/button/Button';\nimport { DropdownMenu } from '@components/dropdown/DropdownMenu';\nimport { Tooltip } from '@components/tooltip/Tooltip';\nimport { dashGreen00 } from '@colors';\n\ninterface Props {\n  isOpen: boolean;\n  icon: JSX.Element;\n  onClick: React.MouseEventHandler;\n  tooltipTitle: string;\n  maxMenuHeight?: number;\n  containerRef?: React.RefObject<HTMLElement>;\n  isDisabled?: boolean;\n  menuClassName?: string;\n}\n\nconst SquareButton = styled(Button)`\n  width: 32px;\n  height: 32px;\n  fill: ${dashGreen00};\n`;\n\nconst Wrapper = styled.div`\n  width: 32px;\n  height: 32px;\n  position: relative;\n`;\n\nexport const QuickActionsMenu: React.FC<Props> = props => {\n  const controllerRef = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <Wrapper>\n      <div ref={controllerRef}>\n        <Tooltip\n          placement='left'\n          title={props.tooltipTitle}\n          options={{ tooltipMaxWidth: 172 }}\n        >\n          <SquareButton\n            nature='ghost'\n            onClick={props.onClick}\n            disabled={props.isDisabled}\n          >\n            {props.icon}\n          </SquareButton>\n        </Tooltip>\n      </div>\n      <DropdownMenu\n        dockingSide='right'\n        menuMaxHeight={props.maxMenuHeight}\n        isOpen={props.isOpen}\n        controllerRef={controllerRef}\n        containerRef={props.containerRef}\n        menuClassName={props.menuClassName}\n      >\n        {props.children}\n      </DropdownMenu>\n    </Wrapper>\n  );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/alexandre/Documents/Programmation/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Button } from '../../components/button/Button';\nimport { MoreIcon } from '../../atoms/icons/MoreIcon';\nimport { DropdownElement } from '../dropdown/DropdownElement.tsx';\nimport { QuickActionsMenu } from './QuickActionsMenu';\nimport '../../utility/playgroundStyles.css';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"quick-actions-menu\"\n    }}>{`Quick Actions Menu`}</h1>\n    <p>{`Quick action menu is a specific components meant for users to quickly copy\na credential's information like login and password.\nIt is not meant to be used in an other context. If you're looking for customizable dropdown,\ncheck out the `}<a parentName=\"p\" {...{\n        \"href\": \"./src-components-dropdown-dropdown-menu\"\n      }}>{`Dropdown Menu component`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={QuickActionsMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [isOpen, setIsOpen] = React.useState(false)\\n  const onClick = e => {\\n    e.preventDefault()\\n    setIsOpen(!isOpen)\\n  }\\n  return (\\n    <QuickActionsMenu\\n      icon={<MoreIcon />}\\n      isOpen={isOpen}\\n      onClick={onClick}\\n      tooltipTitle=\\\"Tooltip\\\"\\n    >\\n      <DropdownElement>Copy Password</DropdownElement>\\n      <DropdownElement>Copy Login</DropdownElement>\\n    </QuickActionsMenu>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      MoreIcon,\n      DropdownElement,\n      QuickActionsMenu,\n      DefaultLayout,\n      _frontmatter\n    }} className={{\n      preview: 'playground-base'\n    }} style={{\n      preview: {\n        height: '200px'\n      }\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isOpen, setIsOpen] = React.useState(false);\n\n        const onClick = e => {\n          e.preventDefault();\n          setIsOpen(!isOpen);\n        };\n\n        return <QuickActionsMenu icon={<MoreIcon mdxType=\"MoreIcon\" />} isOpen={isOpen} onClick={onClick} tooltipTitle='Tooltip' mdxType=\"QuickActionsMenu\">\n        <DropdownElement mdxType=\"DropdownElement\">Copy Password</DropdownElement>\n        <DropdownElement mdxType=\"DropdownElement\">Copy Login</DropdownElement>\n      </QuickActionsMenu>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}