{"version":3,"sources":["webpack:///../src/components/checkbox/Checkbox.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","Checkbox","parentName","__position","__code","__scope","Playground","Props","className","preview","React","isChecked","setIsChecked","label","checked","onChange","e","currentTarget","disabled","style","color","isMDXComponent"],"mappings":"ygBASO,IAAMA,EAAe,Q,sNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,6CACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIC,IAAUF,QAAQ,UAC7B,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,eADR,eAGA,gDAA+B,0BAAYG,WAAW,KAAvB,YAA/B,6EACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,+WAAoXC,SAAO,GAC5ZP,QACAH,kBACAW,eACAC,UACAN,cAL4Z,gBAM5ZN,IAN4Z,EAO5ZH,eAP4Z,GAQ3ZgB,UAAW,CACZC,QAAS,mBACRV,QAAQ,cACZ,WAAM,MACiCW,YAAe,GAA1CC,EADN,KACiBC,EADjB,KAEKC,EAAQF,EAAY,UAAY,YACtC,OAAO,4BACX,YAAC,IAAD,CAAUE,MAAOA,EAAOC,QAASH,EAAWI,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,EAAEC,cAAcH,UAAUf,QAAQ,aAC1G,YAAC,IAAD,CAAUmB,UAAQ,EAACnB,QAAQ,aAC3B,YAAC,IAAD,CAAUmB,UAAQ,EAACJ,SAAO,EAACf,QAAQ,gBAInC,iBAAQ,CACN,GAAM,gBADR,gBAGA,qBAAG,0BAAYG,WAAW,KAAvB,SAAH,6BACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,+TAAkUC,SAAO,GAC1WP,QACAH,kBACAW,eACAC,UACAN,cAL0W,gBAM1WN,IAN0W,EAO1WH,eAP0W,GAQzWgB,UAAW,CACZC,QAAS,mBACRV,QAAQ,cACZ,WAAM,MACiCW,YAAe,GAA1CC,EADN,KACiBC,EADjB,KAEKC,EAAQ,oBAAMM,MAAO,CACzBC,MAAO,QADK,mBAGd,OAAO,4BACL,YAAC,IAAD,CAAUP,MAAOA,EAAOC,QAASH,EAAWI,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,EAAEC,cAAcH,UAAUf,QAAQ,iB,6MAQpHH,EAAWyB,gBAAiB","file":"component---src-components-checkbox-checkbox-mdx-6af6662135764b330e29.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/quentin/dev/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Checkbox } from './Checkbox';\nimport '../../utility/playgroundStyles.css';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <p>{`A checkbox component`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show the `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{` in its checked and unchecked states, both in enabled and disabled modes:`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [isChecked, setIsChecked] = React.useState(false)\\n  const label = isChecked ? \\'Checked\\' : \\'Unchecked\\'\\n  return (\\n    <>\\n      <Checkbox\\n        label={label}\\n        checked={isChecked}\\n        onChange={e => setIsChecked(e.currentTarget.checked)}\\n      />\\n      <Checkbox disabled />\\n      <Checkbox disabled checked />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      DefaultLayout,\n      _frontmatter\n    }} className={{\n      preview: 'playground-base'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isChecked, setIsChecked] = React.useState(false);\n        const label = isChecked ? 'Checked' : 'Unchecked';\n        return <>\n    <Checkbox label={label} checked={isChecked} onChange={e => setIsChecked(e.currentTarget.checked)} mdxType=\"Checkbox\" />\n    <Checkbox disabled mdxType=\"Checkbox\" />\n    <Checkbox disabled checked mdxType=\"Checkbox\" />\n  </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"custom-label\"\n    }}>{`Custom label`}</h3>\n    <p><inlineCode parentName=\"p\">{`label`}</inlineCode>{` can be a React Component`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [isChecked, setIsChecked] = React.useState(false)\\n  const label = <span style={{ color: \\'red\\' }}>Component Label</span>\\n  return (\\n    <>\\n      <Checkbox\\n        label={label}\\n        checked={isChecked}\\n        onChange={e => setIsChecked(e.currentTarget.checked)}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      DefaultLayout,\n      _frontmatter\n    }} className={{\n      preview: 'playground-base'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isChecked, setIsChecked] = React.useState(false);\n        const label = <span style={{\n          color: 'red'\n        }}>Component Label</span>;\n        return <>\n          <Checkbox label={label} checked={isChecked} onChange={e => setIsChecked(e.currentTarget.checked)} mdxType=\"Checkbox\" />\n        </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}