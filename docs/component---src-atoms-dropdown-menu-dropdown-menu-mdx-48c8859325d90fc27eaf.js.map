{"version":3,"sources":["webpack:///../src/atoms/dropdownMenu/DropdownMenu.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","DropdownMenu","parentName","__position","__code","__scope","Playground","Props","DropdownElement","Button","PhoneIcon","React","useState","dropdownIsOpen","setDropdownIsOpen","controllerRef","useRef","className","style","height","alignItems","position","ref","nature","onClick","isOpen","dockingSide","placement","dropdown1IsOpen","setDropdown1IsOpen","dropdown2IsOpen","setDropdown2IsOpen","controller1Ref","controller2Ref","display","justifyContent","width","containerRef","button1Ref","button2Ref","margin","background","alignSelf","isMDXComponent"],"mappings":"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","file":"component---src-atoms-dropdown-menu-dropdown-menu-mdx-48c8859325d90fc27eaf.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/quentin/dev/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport DropdownMenu from '@atoms/dropdownMenu/DropdownMenu';\nimport DropdownElement from '@ions/dropdown/element/DropdownElement';\nimport Button from '@atoms/button/Button';\nimport PhoneIcon from '@atoms/icons/PhoneIcon';\nimport '../../../utils/playgroundStyle.css';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dropdown-menu\"\n    }}>{`Dropdown Menu`}</h1>\n    <p>{`The Dropdown Menu can be used to display a menu of options that can be hidden.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={DropdownMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The dropdown can be defined alongside a controller. To display it correctly:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`both components must be wrapped in a container with a relative or absolute position`}</strong></li>\n      <li parentName=\"ul\">{`the controller's ref must be passed to the Dropdown`}</li>\n    </ul>\n    <Playground __position={1} __code={'() => {\\n  const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false)\\n  const controllerRef = React.useRef(null)\\n  return (\\n    <div\\n      className=\\\"playground-style\\\"\\n      style={{ height: \\'200px\\', alignItems: \\'flex-start\\' }}\\n    >\\n      <div style={{ position: \\'relative\\' }}>\\n        <div ref={controllerRef}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdownIsOpen(!dropdownIsOpen)}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdownIsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"bottom\\\"\\n          controllerRef={controllerRef}\\n        >\\n          <DropdownElement>Hello</DropdownElement>\\n          <DropdownElement>Holà</DropdownElement>\\n          <DropdownElement>Salut</DropdownElement>\\n          <DropdownElement>Hallo</DropdownElement>\\n        </DropdownMenu>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false);\n        const controllerRef = React.useRef(null);\n        return <div className='playground-style' style={{\n          height: '200px',\n          alignItems: 'flex-start'\n        }}>\n        <div style={{\n            position: 'relative'\n          }}>\n          <div ref={controllerRef}>\n            <Button nature='primary' onClick={() => setDropdownIsOpen(!dropdownIsOpen)} mdxType=\"Button\">\n              Click Me\n            </Button>\n          </div>\n          <DropdownMenu isOpen={dropdownIsOpen} dockingSide='left' placement='bottom' controllerRef={controllerRef} mdxType=\"DropdownMenu\">\n            <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n            <DropdownElement mdxType=\"DropdownElement\">Hallo</DropdownElement>\n          </DropdownMenu>\n        </div>\n      </div>;\n      }}\n    </Playground>\n    <p>{`Dropdown can be defined as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`placed below or above their controllerRef,`}</li>\n      <li parentName=\"ul\">{`aligned on their controller left or right`}</li>\n    </ul>\n    <Playground __position={2} __code={'() => {\\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false)\\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false)\\n  const controller1Ref = React.useRef(null)\\n  const controller2Ref = React.useRef(null)\\n  return (\\n    <div\\n      className=\\\"playground-style\\\"\\n      style={{ height: \\'300px\\', alignItems: \\'flex-start\\' }}\\n    >\\n      <div\\n        style={{\\n          display: \\'flex\\',\\n          justifyContent: \\'space-between\\',\\n          alignItems: \\'center\\',\\n          width: \\'100%\\',\\n          height: \\'100%\\',\\n        }}\\n      >\\n        <div style={{ position: \\'relative\\' }}>\\n          <div ref={controller1Ref}>\\n            <Button\\n              nature=\\\"primary\\\"\\n              onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\\n            >\\n              TOP\\n            </Button>\\n          </div>\\n          <DropdownMenu\\n            isOpen={dropdown1IsOpen}\\n            placement=\\\"top\\\"\\n            controllerRef={controller1Ref}\\n          >\\n            <DropdownElement>Hello</DropdownElement>\\n            <DropdownElement>Holà</DropdownElement>\\n          </DropdownMenu>\\n        </div>\\n        <div style={{ position: \\'relative\\' }}>\\n          <div ref={controller2Ref}>\\n            <Button\\n              nature=\\\"primary\\\"\\n              onClick={() => setDropdown2IsOpen(!dropdown2IsOpen)}\\n            >\\n              RIGHT\\n            </Button>\\n          </div>\\n          <DropdownMenu\\n            isOpen={dropdown2IsOpen}\\n            dockingSide=\\\"right\\\"\\n            controllerRef={controller2Ref}\\n          >\\n            <DropdownElement>Good Morning</DropdownElement>\\n            <DropdownElement>Konnichiha</DropdownElement>\\n            <DropdownElement>Guten Tag</DropdownElement>\\n          </DropdownMenu>\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n        const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n        const controller1Ref = React.useRef(null);\n        const controller2Ref = React.useRef(null);\n        return <div className='playground-style' style={{\n          height: '300px',\n          alignItems: 'flex-start'\n        }}>\n        <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            width: '100%',\n            height: '100%'\n          }}>\n          <div style={{\n              position: 'relative'\n            }}>\n            <div ref={controller1Ref}>\n              <Button nature='primary' onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)} mdxType=\"Button\">\n                TOP\n              </Button>\n            </div>\n            <DropdownMenu isOpen={dropdown1IsOpen} placement='top' controllerRef={controller1Ref} mdxType=\"DropdownMenu\">\n              <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n              <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n            </DropdownMenu>\n          </div>\n          <div style={{\n              position: 'relative'\n            }}>\n            <div ref={controller2Ref}>\n              <Button nature='primary' onClick={() => setDropdown2IsOpen(!dropdown2IsOpen)} mdxType=\"Button\">\n                RIGHT\n              </Button>\n            </div>\n            <DropdownMenu isOpen={dropdown2IsOpen} dockingSide='right' controllerRef={controller2Ref} mdxType=\"DropdownMenu\">\n              <DropdownElement mdxType=\"DropdownElement\">Good Morning</DropdownElement>\n              <DropdownElement mdxType=\"DropdownElement\">Konnichiha</DropdownElement>\n              <DropdownElement mdxType=\"DropdownElement\">Guten Tag</DropdownElement>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"position-within-a-container\"\n    }}>{`Position within a container`}</h2>\n    <p>{`Dropdown computes its ideal position within a container:\nif you pass `}<inlineCode parentName=\"p\">{`top`}</inlineCode>{` as the placement prop but there is not enough space within the container,\nthe menu position will be overwritten to `}<inlineCode parentName=\"p\">{`bottom`}</inlineCode>{`.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false)\\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false)\\n  const containerRef = React.useRef(null)\\n  const button1Ref = React.useRef(null)\\n  const button2Ref = React.useRef(null)\\n  return (\\n    <div\\n      className=\\\"playground-style\\\"\\n      style={{ height: \\'400px\\', width: \\'100%\\', margin: \\'auto\\' }}\\n    >\\n      <div\\n        ref={containerRef}\\n        style={{\\n          height: \\'250px\\',\\n          display: \\'flex\\',\\n          background: \\'ghostwhite\\',\\n          justifyContent: \\'space-between\\',\\n          width: \\'100%\\',\\n          margin: \\'0 auto\\',\\n        }}\\n      >\\n        <div style={{ position: \\'relative\\', height: \\'fit-content\\' }}>\\n          <div ref={button1Ref}>\\n            <Button\\n              nature=\\\"primary\\\"\\n              onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\\n            >\\n              Click Me\\n            </Button>\\n          </div>\\n          <DropdownMenu\\n            isOpen={dropdown1IsOpen}\\n            dockingSide=\\\"left\\\"\\n            placement=\\\"top\\\"\\n            containerRef={containerRef}\\n            controllerRef={button1Ref}\\n          >\\n            <DropdownElement>Hello</DropdownElement>\\n            <DropdownElement>Holà</DropdownElement>\\n            <DropdownElement>Salut</DropdownElement>\\n          </DropdownMenu>\\n        </div>\\n        <div\\n          style={{\\n            position: \\'relative\\',\\n            height: \\'fit-content\\',\\n            alignSelf: \\'flex-end\\',\\n          }}\\n        >\\n          <div ref={button2Ref}>\\n            <Button\\n              nature=\\\"secondary\\\"\\n              onClick={() => {\\n                setDropdown2IsOpen(!dropdown2IsOpen)\\n              }}\\n            >\\n              Click Me\\n            </Button>\\n          </div>\\n          <DropdownMenu\\n            isOpen={dropdown2IsOpen}\\n            dockingSide=\\\"left\\\"\\n            placement=\\\"bottom\\\"\\n            containerRef={containerRef}\\n            controllerRef={button2Ref}\\n          >\\n            <DropdownElement>Hello</DropdownElement>\\n            <DropdownElement>Holà</DropdownElement>\\n            <DropdownElement>Salut</DropdownElement>\\n          </DropdownMenu>\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n        const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n        const containerRef = React.useRef(null);\n        const button1Ref = React.useRef(null);\n        const button2Ref = React.useRef(null);\n        return <div className='playground-style' style={{\n          height: '400px',\n          width: '100%',\n          margin: 'auto'\n        }}>\n        <div ref={containerRef} style={{\n            height: '250px',\n            display: 'flex',\n            background: 'ghostwhite',\n            justifyContent: 'space-between',\n            width: '100%',\n            margin: '0 auto'\n          }}>\n          <div style={{\n              position: 'relative',\n              height: 'fit-content'\n            }}>\n            <div ref={button1Ref}>\n              <Button nature='primary' onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)} mdxType=\"Button\">\n                Click Me\n              </Button>\n            </div>\n            <DropdownMenu isOpen={dropdown1IsOpen} dockingSide='left' placement='top' containerRef={containerRef} controllerRef={button1Ref} mdxType=\"DropdownMenu\">\n              <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n              <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n              <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n            </DropdownMenu>\n          </div>\n          <div style={{\n              position: 'relative',\n              height: 'fit-content',\n              alignSelf: 'flex-end'\n            }}>\n            <div ref={button2Ref}>\n              <Button nature='secondary' onClick={() => {\n                  setDropdown2IsOpen(!dropdown2IsOpen);\n                }} mdxType=\"Button\">\n                Click Me\n              </Button>\n            </div>\n            <DropdownMenu isOpen={dropdown2IsOpen} dockingSide='left' placement='bottom' containerRef={containerRef} controllerRef={button2Ref} mdxType=\"DropdownMenu\">\n              <DropdownElement mdxType=\"DropdownElement\">Hello</DropdownElement>\n              <DropdownElement mdxType=\"DropdownElement\">Holà</DropdownElement>\n              <DropdownElement mdxType=\"DropdownElement\">Salut</DropdownElement>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}