{"version":3,"sources":["webpack:///../src/utility/cssUtils.ts","webpack:///../src/components/toggle/Toggle.tsx","webpack:///../src/components/toggle/ToggleDemo.tsx","webpack:///../src/components/toggle/Toggle.mdx","webpack:///../src/components/toggle/Toggle.module.scss"],"names":["getClassNames","result","classes","forEach","value","push","Object","entries","key","join","HiddenInput","props","className","styles","hiddenInput","type","Groove","checked","disabled","children","groove","Handle","handle","Label","labelChecked","labelUnchecked","text","Toggle","root","ToggleDemo","React","isChecked","setIsChecked","onChange","e","currentTarget","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","parentName","__position","__code","__scope","Playground","Props","style","display","flexDirection","justifyContent","pointerEvents","readOnly","isMDXComponent","module","exports"],"mappings":"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","file":"component---src-components-toggle-toggle-mdx-cd7c5a77bfedb3ce4026.js","sourcesContent":["interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (value) {\n      if (typeof value === 'string') {\n        result.push(value);\n      } else {\n        Object.entries(value).forEach(([key, value]) => {\n          if (value) {\n            result.push(key);\n          }\n        });\n      }\n    }\n  });\n  return result.join(' ');\n};\n","import * as React from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport styles from './Toggle.module.scss';\n\ninterface ToggleProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  labelUnchecked?: string;\n  labelChecked?: string;\n}\n\ninterface GrooveProps {\n  checked?: boolean;\n  disabled?: boolean;\n}\n\ninterface HandleProps {\n  checked?: boolean;\n  disabled?: boolean;\n}\n\ninterface LabelProps {\n  checked?: boolean;\n  labelUnchecked?: string;\n  labelChecked?: string;\n}\n\nconst HiddenInput: React.FC<\n  React.InputHTMLAttributes<HTMLInputElement>\n> = props => (\n  <input className={styles.hiddenInput} type='checkbox' {...props} />\n);\n\nconst Groove: React.FC<GrooveProps> = ({ checked, disabled, children }) => (\n  <div\n    className={getClassNames(styles.groove, {\n      [styles.checked]: checked,\n      [styles.disabled]: disabled\n    })}\n  >\n    {children}\n  </div>\n);\n\nconst Handle: React.FC<HandleProps> = ({ checked, disabled }) => (\n  <div\n    className={getClassNames(styles.handle, {\n      [styles.checked]: checked,\n      [styles.disabled]: disabled\n    })}\n  />\n);\n\nconst Label: React.FC<LabelProps> = ({\n  checked,\n  labelChecked,\n  labelUnchecked\n}) => {\n  const isLabelVisible =\n    (checked && labelChecked) || (!checked && labelUnchecked);\n\n  return isLabelVisible ? (\n    <span className={styles.text}>\n      {checked ? labelChecked : labelUnchecked}\n    </span>\n  ) : null;\n};\n\nexport const Toggle: React.FC<ToggleProps> = ({\n  labelChecked,\n  labelUnchecked,\n  checked,\n  disabled,\n  ...props\n}) => {\n  return (\n    <label\n      className={getClassNames(styles.root, {\n        [styles.checked]: checked,\n        [styles.disabled]: disabled\n      })}\n    >\n      <HiddenInput {...props} checked={checked} disabled={disabled} />\n      <Groove checked={checked} disabled={disabled}>\n        <Handle checked={checked} disabled={disabled} />\n      </Groove>\n      <Label\n        checked={checked}\n        labelUnchecked={labelUnchecked}\n        labelChecked={labelChecked}\n      />\n    </label>\n  );\n};\n","import * as React from 'react';\nimport { Toggle } from './Toggle';\n\nexport const ToggleDemo = () => {\n  const [isChecked, setIsChecked] = React.useState(false);\n  return (\n    <div>\n      <Toggle\n        labelChecked='Activated'\n        labelUnchecked='Deactivated'\n        checked={isChecked}\n        onChange={e => setIsChecked(e.currentTarget.checked)}\n      />\n    </div>\n  );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/alexandre/Documents/Programmation/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Toggle } from './Toggle';\nimport { ToggleDemo } from './ToggleDemo';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <p>{`An On/Off checkable toggle component.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Toggle} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show the `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{` in its checked and unchecked states, both in enabled and disabled modes:`}</p>\n    <Playground __position={1} __code={'<Toggle readOnly />\\n<Toggle checked readOnly />\\n<Toggle disabled readOnly />\\n<Toggle disabled checked readOnly />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      ToggleDemo,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      pointerEvents: 'none'\n    }} mdxType=\"Playground\">\n  <Toggle readOnly mdxType=\"Toggle\" />\n  <Toggle checked readOnly mdxType=\"Toggle\" />\n  <Toggle disabled readOnly mdxType=\"Toggle\" />\n  <Toggle disabled checked readOnly mdxType=\"Toggle\" />\n    </Playground>\n    <p>{`The example below shows an interactive `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{`.`}</p>\n    <Playground __position={2} __code={'<ToggleDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      ToggleDemo,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <ToggleDemo mdxType=\"ToggleDemo\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Toggle-module--root--1nRqv\",\"handle\":\"Toggle-module--handle--2pWbA\",\"checked\":\"Toggle-module--checked--3kHjX\",\"groove\":\"Toggle-module--groove--1256U\",\"disabled\":\"Toggle-module--disabled--y8_Sj\",\"hiddenInput\":\"Toggle-module--hiddenInput--1gNTr\",\"text\":\"Toggle-module--text--2tz9F\"};"],"sourceRoot":""}