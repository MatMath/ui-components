{"version":3,"sources":["webpack:///../src/atoms/icons/RevealIcon.tsx","webpack:///../src/utility/cssUtils.ts","webpack:///../src/components/password-input/PasswordInput.tsx","webpack:///../src/components/password-input/PasswordInput.mdx","webpack:///../src/utility/positionCompute.ts","webpack:///../node_modules/gatsby/node_modules/core-js/modules/es7.object.values.js","webpack:///../src/atoms/icons/HideIcon.tsx","webpack:///../src/utility/helpers.ts","webpack:///../src/ions/icon/base/Icon.tsx","webpack:///../src/ions/icon/wrapper/SvgWrapper.tsx","webpack:///../src/components/tooltip/helpers.ts","webpack:///../src/components/tooltip/Tooltip.tsx","webpack:///../src/components/password-input/PasswordInput.module.scss"],"names":["RevealIcon","props","fillRule","clipRule","d","getClassNames","result","classes","forEach","value","push","Object","entries","key","join","PasswordInput","feedbackText","feedbackType","fullWidth","hidePasswordTooltipText","label","onPasswordVisibilityChanged","showPasswordTooltipText","prop","React","showPassword","setShowPassword","inputRef","styledClassName","styles","RevealOrHideIcon","HideIcon","className","root","container","ref","type","input","icon","onClick","prevState","current","focus","disabled","Tooltip","placement","title","hoverColor","midGreen00","feedback","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","__position","__code","__scope","Playground","Props","style","alignItems","display","flexDirection","justifyContent","height","flex","placeholder","fluid","nextState","console","log","isMDXComponent","containsNumber","test","containsChar","char","indexOf","isHeightAndWidthSet","width","returnNumber","isNaN","computeElementHeight","elementStyle","alternativeHeight","parseInt","paddingTop","paddingBottom","marginTop","marginBottom","computeElementWidth","tooltipStyle","alternativeWidth","paddingLeft","paddingRight","marginLeft","marginRight","getAlternativeStyle","initialStyle","element","innerDiv","document","createElement","values","property","toString","appendChild","getBoundingClientRect","remove","defaultRect","top","left","right","bottom","getBoundingRect","getContainerBoundaries","window","maxHeight","innerHeight","minHeight","maxWidth","innerWidth","minWidth","containerRect","getCSSComputedStyle","params","getComputedStyle","getBeforePseudoElement","undefined","getElementDimensions","elementRef","totalHeight","totalWidth","rect","dropdownStyle","elementIsBefore","getElementPlacement","Error","isElementOutOfContainerMethod","newPossibilities","possibilities","filter","possiblePlacement","firstPossiblePlacement","$export","$values","S","it","assertUnreachable","_","getColor","propName","animated","dashGreen00","Icon","styled","svg","attrs","viewBox","version","xmlns","size","SvgWrapper","children","isAnimated","Array","from","find","child","isAnimatedSvg","handleTooltipPosition","handleTooltipArrowPosition","displayIfInContainer","outOfContainer","getTooltipBgColorByType","validatorGreen","functionalRed02","isTooltipOutOfContainer","elementDimensions","containerDimensions","removeOutOfScreenPlacement","TooltipWrapper","span","white","options","tooltipMaxWidth","tooltipPossiblePlacements","onHover","event","target","currentTarget","coordinates","previousTop","previousLeft","positionTooltip","cloneChildren","childIndex","onMouseEnter","defaultPlacement","state","componentDidUpdate","prevProps","this","containerElement","setState","e","error","render","childrenWithProps","map","module","exports"],"mappings":"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","file":"component---src-components-password-input-password-input-mdx-7d74bbb7e9673a78f1ee.js","sourcesContent":["import * as React from 'react';\nimport { SvgWrapper } from '@ions/icon/wrapper/SvgWrapper';\nimport { IconProps } from '@ions/icon/types';\n\nexport const RevealIcon: React.FC<IconProps> = (props: IconProps) => (\n  <SvgWrapper {...props}>\n    <React.Fragment>\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z'\n      />{' '}\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z'\n      />\n    </React.Fragment>\n  </SvgWrapper>\n);\n","interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (value) {\n      if (typeof value === 'string') {\n        result.push(value);\n      } else {\n        Object.entries(value).forEach(([key, value]) => {\n          if (value) {\n            result.push(key);\n          }\n        });\n      }\n    }\n  });\n  return result.join(' ');\n};\n","import * as React from 'react';\n\nimport { getClassNames } from '@utility/cssUtils';\nimport { HideIcon, RevealIcon } from '@atoms/icons';\nimport { midGreen00 } from '@colors';\nimport { Tooltip } from '@components';\n\nimport styles from './PasswordInput.module.scss';\n\ntype PasswordInputFeedbackType = 'error' | 'warning';\n\ntype _ForbiddenProps = 'size' | 'prefix' | 'type';\n\nexport interface PasswordInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, _ForbiddenProps> {\n  /**\n   * Some text to display under the input when triggering a feedback type\n   */\n  feedbackText?: string;\n  /**\n   * The feedback nature of the input\n   */\n  feedbackType?: PasswordInputFeedbackType;\n  /**\n   * Make this field take 100% of the width of it's container\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The text that is displayed on hover on the hide icon when the\n   * password is shown\n   */\n  hidePasswordTooltipText: string;\n  /**\n   * The label used to describe the field, it's displayed on top.\n   * Note that the text will be uppercase\n   */\n  label?: string;\n  /**\n   * A function that is triggered when the visibility\n   * of the password is changed.\n   */\n  onPasswordVisibilityChanged?: (visible: boolean) => void;\n  /**\n   * The text that is displayed on hover on the reveal icon when the\n   * password is hidden\n   */\n  showPasswordTooltipText: string;\n}\n\nexport const PasswordInput = (props: PasswordInputProps): JSX.Element => {\n  const {\n    feedbackText,\n    feedbackType,\n    fullWidth = false,\n    hidePasswordTooltipText,\n    label,\n    onPasswordVisibilityChanged,\n    showPasswordTooltipText,\n    ...prop\n  } = props;\n\n  const [showPassword, setShowPassword] = React.useState(false);\n  const inputRef = React.createRef<HTMLInputElement>();\n\n  const handleShowPassword = () => {\n    if (onPasswordVisibilityChanged) {\n      onPasswordVisibilityChanged(!showPassword);\n    }\n    setShowPassword(prevState => !prevState);\n    inputRef.current && inputRef.current.focus();\n  };\n\n  const styledClassName = (feedbackType && styles[feedbackType]) || '';\n\n  const RevealOrHideIcon = showPassword ? HideIcon : RevealIcon;\n\n  return (\n    <div\n      className={getClassNames(styles.root, { [styles.fullWidth]: fullWidth })}\n    >\n      {label && <span className={styles.label}>{label}</span>}\n      <div\n        className={getClassNames(styles.container, {\n          [styles.fullWidth]: fullWidth\n        })}\n      >\n        <input\n          ref={inputRef}\n          {...prop}\n          type={showPassword ? 'text' : 'password'}\n          className={getClassNames(styles.input, styledClassName, {\n            [styles.fullWidth]: fullWidth\n          })}\n        />\n        <button\n          className={getClassNames(styles.icon, {\n            [styles.fullWidth]: fullWidth\n          })}\n          onClick={handleShowPassword}\n        >\n          {prop.disabled ? (\n            <RevealOrHideIcon disabled={prop.disabled} />\n          ) : (\n            <Tooltip\n              placement='left'\n              title={\n                showPassword ? hidePasswordTooltipText : showPasswordTooltipText\n              }\n            >\n              <RevealOrHideIcon hoverColor={midGreen00} />\n            </Tooltip>\n          )}\n        </button>\n      </div>\n      {feedbackText && feedbackType && (\n        <span className={getClassNames(styles.feedback, styledClassName)}>\n          {feedbackText}\n        </span>\n      )}\n    </div>\n  );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/alexandre/Documents/Programmation/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { PasswordInput } from './PasswordInput';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"password-input\"\n    }}>{`Password Input`}</h1>\n    <p>{`A Password input component`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={PasswordInput} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show usage of the Password Input`}</p>\n    <Playground __position={1} __code={'<PasswordInput\\n  hidePasswordTooltipText=\\\"Hide\\\"\\n  showPasswordTooltipText=\\\"Reveal\\\"\\n  label=\\\"Password\\\"\\n  placeholder=\\\"Test\\\"\\n  fluid\\n/>\\n<PasswordInput\\n  hidePasswordTooltipText=\\\"Hide\\\"\\n  showPasswordTooltipText=\\\"Reveal\\\"\\n  label=\\\"Password\\\"\\n  placeholder=\\\"Test\\\"\\n  onPasswordVisibilityChanged={nextState => console.log(nextState)}\\n/>\\n<PasswordInput\\n  hidePasswordTooltipText=\\\"Hide\\\"\\n  showPasswordTooltipText=\\\"Reveal\\\"\\n/>\\n<PasswordInput\\n  hidePasswordTooltipText=\\\"Hide\\\"\\n  showPasswordTooltipText=\\\"Reveal\\\"\\n  disabled\\n/>\\n<PasswordInput\\n  hidePasswordTooltipText=\\\"Hide\\\"\\n  showPasswordTooltipText=\\\"Reveal\\\"\\n  feedbackType=\\\"warning\\\"\\n  feedbackText=\\\"This password contains invalid characters\\\"\\n/>\\n<PasswordInput\\n  hidePasswordTooltipText=\\\"Hide\\\"\\n  showPasswordTooltipText=\\\"Reveal\\\"\\n  feedbackType=\\\"error\\\"\\n  feedbackText=\\\"Wrong password\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      PasswordInput,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      alignItems: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      height: 400,\n      flex: 1\n    }} mdxType=\"Playground\">\n  <PasswordInput hidePasswordTooltipText='Hide' showPasswordTooltipText='Reveal' label='Password' placeholder='Test' fluid mdxType=\"PasswordInput\" />\n  <PasswordInput hidePasswordTooltipText='Hide' showPasswordTooltipText='Reveal' label='Password' placeholder='Test' onPasswordVisibilityChanged={nextState => console.log(nextState)} mdxType=\"PasswordInput\" />\n  <PasswordInput hidePasswordTooltipText='Hide' showPasswordTooltipText='Reveal' mdxType=\"PasswordInput\" />\n  <PasswordInput hidePasswordTooltipText='Hide' showPasswordTooltipText='Reveal' disabled mdxType=\"PasswordInput\" />\n  <PasswordInput hidePasswordTooltipText='Hide' showPasswordTooltipText='Reveal' feedbackType='warning' feedbackText='This password contains invalid characters' mdxType=\"PasswordInput\" />\n  <PasswordInput hidePasswordTooltipText='Hide' showPasswordTooltipText='Reveal' feedbackType='error' feedbackText='Wrong password' mdxType=\"PasswordInput\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { Placement as TooltipPlacement } from '@components/tooltip/types';\nimport { Placement as DropdownPlacement } from '@components/dropdown/types';\n/** Both tooltips and dropdown use the DOM to make sure\n * they are fitting in a container\n */\n\nconst containsNumber = (value: string) => /\\d/.test(value);\nconst containsChar = (value: string, char: string) =>\n  value.indexOf(char) !== -1;\n\nexport const isHeightAndWidthSet = (style: CSSStyleDeclaration) => {\n  const { height, width } = style;\n  if (!height || !width) {\n    return false;\n  }\n\n  return (\n    containsNumber(height) ||\n    containsNumber(width) ||\n    !containsChar(height, '%') ||\n    !containsChar(width, '%')\n  );\n};\n\nconst returnNumber = (value: number) => (isNaN(value) ? 0 : value);\n\nexport const computeElementHeight = (\n  elementStyle: CSSStyleDeclaration,\n  alternativeHeight: string | null\n) => {\n  const height =\n    parseInt(elementStyle.paddingTop || '0', 10) +\n    parseInt(elementStyle.paddingBottom || '0', 10) +\n    parseInt(elementStyle.marginTop || '0', 10) +\n    parseInt(elementStyle.marginBottom || '0', 10) +\n    parseInt(alternativeHeight || elementStyle.height || '0', 10);\n  return returnNumber(height);\n};\n\nexport const computeElementWidth = (\n  tooltipStyle: CSSStyleDeclaration,\n  alternativeWidth: string | null\n) => {\n  const width =\n    parseInt(tooltipStyle.paddingLeft || '0', 10) +\n    parseInt(tooltipStyle.paddingRight || '0', 10) +\n    parseInt(tooltipStyle.marginLeft || '0', 10) +\n    parseInt(tooltipStyle.marginRight || '0', 10) +\n    parseInt(alternativeWidth || tooltipStyle.width || '0', 10);\n\n  return returnNumber(width);\n};\n\nexport const getAlternativeStyle = (\n  initialStyle: CSSStyleDeclaration,\n  element: Element | null\n) => {\n  if (!element) {\n    return { height: '0', width: '0' };\n  }\n  let innerDiv = document.createElement('div');\n  (Object.values(initialStyle) as (keyof CSSStyleDeclaration)[]).forEach(\n    property => {\n      if (\n        property &&\n        property !== 'length' &&\n        property !== 'parentRule' &&\n        !containsNumber(property.toString())\n      ) {\n        innerDiv.style[property] = initialStyle[property];\n      }\n    }\n  );\n  element.appendChild(innerDiv);\n  let { height, width } = innerDiv.getBoundingClientRect();\n  innerDiv.remove();\n\n  return { height: height.toString(), width: width.toString() };\n};\n\nconst defaultRect = {\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  width: 0,\n  height: 0\n};\n\nexport const getBoundingRect = (element: Element | null): ClientRect => {\n  if (element) {\n    return element.getBoundingClientRect();\n  } else {\n    return defaultRect;\n  }\n};\n\nexport const getContainerBoundaries = (\n  container: Element | Window\n): ContainerDimensions => {\n  const isWindow = (element: Element | Window): element is Window =>\n    element === window;\n\n  if (isWindow(container)) {\n    return {\n      maxHeight: window.innerHeight,\n      minHeight: 0,\n      maxWidth: window.innerWidth,\n      minWidth: 0\n    };\n  }\n  const containerRect = getBoundingRect(container);\n\n  return {\n    maxHeight: containerRect.top + containerRect.height,\n    minHeight: containerRect.top,\n    minWidth: containerRect.left,\n    maxWidth: containerRect.left + containerRect.width\n  };\n};\n\nexport const getCSSComputedStyle = (params: {\n  element: Element;\n  getBeforePseudoElement?: boolean;\n}) => {\n  return window.getComputedStyle(\n    params.element,\n    params.getBeforePseudoElement ? ':before' : undefined\n  );\n};\n\nexport const getElementDimensions = (params: {\n  elementRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}) => {\n  if (!params.elementRef.current) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.elementRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  if (!dropdownStyle) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.elementRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.elementRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport interface ElementDimensions {\n  rect: ClientRect;\n  totalHeight: number;\n  totalWidth: number;\n}\n\ninterface ContainerDimensions {\n  maxHeight: number;\n  maxWidth: number;\n  minHeight: number;\n  minWidth: number;\n}\n\ntype AllPlacements = TooltipPlacement | DropdownPlacement;\n\nexport type IsElementOutOfContainerMethod<T extends AllPlacements> = (params: {\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n  placement: T;\n}) => boolean;\n\ninterface ElementPlacementParams<T extends AllPlacements> {\n  isElementOutOfContainerMethod: IsElementOutOfContainerMethod<T>;\n  placement: T;\n  possibilities: T[];\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n}\n\nexport const getElementPlacement = <T extends AllPlacements>(\n  params: ElementPlacementParams<T>\n): T | null => {\n  if (!params.placement) {\n    throw new Error(\n      'Element cannot be displayed in the container Element/Window due to its incompatible size.' +\n        'Please consider reducing it or better position tooltiped' +\n        'element in the screen.'\n    );\n  }\n\n  if (\n    !params.isElementOutOfContainerMethod({\n      ...params\n    })\n  ) {\n    return params.placement;\n  }\n\n  const newPossibilities = params.possibilities.filter(\n    possiblePlacement => params.placement !== possiblePlacement\n  );\n  const [firstPossiblePlacement] = newPossibilities;\n\n  return getElementPlacement({\n    ...params,\n    placement: firstPossiblePlacement,\n    possibilities: newPossibilities\n  });\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","import * as React from 'react';\nimport { SvgWrapper } from '@ions/icon/wrapper/SvgWrapper';\nimport { IconProps } from '@ions/icon/types';\n\nexport const HideIcon: React.FC<IconProps> = (props: IconProps) => (\n  <SvgWrapper {...props}>\n    <React.Fragment>\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M10 11.5C10.8284 11.5 11.5 10.8284 11.5 9.99998C11.5 9.17156 10.8284 8.49998 10 8.49998C9.17157 8.49998 8.5 9.17156 8.5 9.99998C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6568 13 9.99998C13 8.34313 11.6569 6.99998 10 6.99998C8.34315 6.99998 7 8.34313 7 9.99998C7 11.6568 8.34315 13 10 13Z'\n      />\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M18 9.86558C18 9.86558 16 3.86546 10 3.86546C4 3.86546 2 9.86558 2 9.86558C2 9.86558 4 15.8655 10 15.8655C16 15.8655 18 9.86558 18 9.86558ZM3.62005 9.86557C3.65718 9.94656 3.69973 10.0359 3.74789 10.1322C3.9914 10.6192 4.36904 11.2653 4.90232 11.9052C5.95964 13.174 7.57163 14.3655 10 14.3655C12.4284 14.3655 14.0404 13.174 15.0977 11.9052C15.631 11.2653 16.0086 10.6192 16.2521 10.1322C16.3003 10.0359 16.3428 9.94655 16.38 9.86556C16.3428 9.78456 16.3003 9.6952 16.2521 9.59887C16.0086 9.11183 15.6309 8.46574 15.0977 7.82579C14.0403 6.55697 12.4283 5.36546 10 5.36546C7.57166 5.36546 5.95967 6.55697 4.90234 7.82579C4.36905 8.46574 3.99141 9.11183 3.7479 9.59887C3.69973 9.6952 3.65718 9.78457 3.62005 9.86557Z'\n      />\n      <path d='M2 16.9333L16.8492 2L17.9099 3.06667L3.06066 18L2 16.9333Z' />\n    </React.Fragment>\n  </SvgWrapper>\n);\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n","import styled from 'styled-components';\nimport { Props as IconProps } from '@ions/icon/types';\nimport { dashGreen00 } from '@colors';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getWidth = ({ width, size }: Props) => `${size || width || 20}px`;\nconst getHeight = ({ height, size }: Props) => `${size || height || 20}px`;\nconst getColor = (propName: ColorProps = 'color') => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || props['color'] || dashGreen00;\n\nexport const Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getWidth};\n  height: ${getHeight};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'inherit')};\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor()};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)};\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n","import * as React from 'react';\nimport { Icon } from '@ions/icon/base/Icon';\nimport { Props } from '@ions/icon/types';\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\n\nexport const SvgWrapper: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n","import { dashGreen00, functionalRed02, validatorGreen } from '@colors';\nimport { assertUnreachable } from '@utility/helpers';\nimport { WrapperProps } from './Tooltip';\nimport { Placement, TooltipType } from './types';\nimport { IsElementOutOfContainerMethod } from '@utility/positionCompute';\nexport const tooltipMargin = 10;\nconst rightTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: ${tooltipMargin}px;\n`;\n\nconst leftTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: ${tooltipMargin}px;\n`;\n\nconst topTooltipStyle = `\n  margin-bottom: 10px;\n  bottom: 100%;\n  left: 50%;\n`;\n\nconst bottomTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  left: 50%;\n  top: 100%;\n  margin-top: ${tooltipMargin}px;\n`;\n\nconst topTooltipArrowStyle = `\n  margin-bottom: 5px;\n  bottom: 100%;\n  transform: translate(-50%, 0);\n  left: 50%;\n`;\n\nconst rightTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(90deg) translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: -2px;\n  margin-top: -4px;\n`;\n\nconst leftTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(-90deg) translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: -2px;\n  margin-top: -4px;\n`;\n\nconst bottomTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(180deg) translate(-50%, 0);\n  top: 100%;\n  left: unset;\n  right: 50%\n  margin-top: 5px;\n`;\n\nexport const handleTooltipPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipStyle;\n    case 'right':\n      return rightTooltipStyle;\n    case 'left':\n      return leftTooltipStyle;\n    case 'bottom':\n      return bottomTooltipStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const handleTooltipArrowPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipArrowStyle;\n    case 'right':\n      return rightTooltipArrowStyle;\n    case 'left':\n      return leftTooltipArrowStyle;\n    case 'bottom':\n      return bottomTooltipArrowStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const displayIfInContainer = ({ outOfContainer }: WrapperProps) => {\n  return !outOfContainer\n    ? `visibility: visible;\n       opacity: 1;`\n    : ``;\n};\n\nexport const getTooltipBgColorByType = (type: TooltipType) => {\n  switch (type) {\n    case 'info':\n      return dashGreen00;\n    case 'success':\n      return validatorGreen;\n    case 'error':\n      return functionalRed02;\n    default:\n      return assertUnreachable(type);\n  }\n};\n\nexport const isTooltipOutOfContainer: IsElementOutOfContainerMethod<\n  Placement\n> = ({ elementDimensions, containerDimensions, placement }) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n          containerDimensions.maxHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'right':\n      return (\n        elementDimensions.rect.left +\n          elementDimensions.rect.width +\n          elementDimensions.totalWidth >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n    case 'left':\n      return (\n        elementDimensions.rect.left - elementDimensions.totalWidth <\n          containerDimensions.minWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\nexport const removeOutOfScreenPlacement = (\n  possibilities: Placement[],\n  placement: Placement\n) => {\n  return possibilities.filter(\n    possiblePlacement => possiblePlacement !== placement\n  );\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { white } from '@colors';\nimport { Placement } from '@components/tooltip/types';\nimport {\n  displayIfInContainer,\n  getTooltipBgColorByType,\n  handleTooltipArrowPosition,\n  handleTooltipPosition,\n  isTooltipOutOfContainer\n} from '@components/tooltip/helpers';\nimport {\n  getBoundingRect,\n  getContainerBoundaries,\n  getElementDimensions,\n  getElementPlacement\n} from '@utility/positionCompute';\n\nexport interface Props {\n  title: string;\n  /**\n   * The position of the tooltip\n   * @default top\n   */\n  placement?: 'right' | 'left' | 'top' | 'bottom';\n  /**\n   * A type that defines the tooltip color\n   * @default info\n   */\n  type?: 'info' | 'success' | 'error';\n  /**\n   * Extra options\n   * @default {tooltipMaxWidth: 300 (in px), container: window}\n   */\n  options?: {\n    /**\n     * A max width for the tooltip\n     */\n    tooltipMaxWidth?: number;\n    /**\n     * An element as a container (if not the default window)\n     */\n    container?: React.RefObject<HTMLElement>;\n  };\n}\n\ninterface State {\n  outOfContainer: boolean;\n  placement: Placement | null;\n}\n\nexport type WrapperProps = Omit<Required<Props>, 'title'> & {\n  outOfContainer: boolean;\n};\n\nconst TooltipWrapper = styled.span<WrapperProps>`\n  > :first-child:hover {\n    position: relative;\n  }\n\n  > :first-child::before {\n    font-family: inherit;\n    visibility: hidden;\n    opacity: 0;\n    font-size: 0.75rem;\n    line-height: 1.25;\n    display: inline-block;\n    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    padding: 8px;\n    background-color: ${({ type }: WrapperProps) =>\n      getTooltipBgColorByType(type)};\n    content: attr(data-tooltip);\n    color: ${white};\n    position: absolute;\n    max-width: ${({ options }: WrapperProps) =>\n      options.tooltipMaxWidth ? `${options.tooltipMaxWidth}px` : '300px'};\n    width: max-content;\n    @supports (-ms-ime-align: auto) {\n      min-width: 50px;\n    }\n    word-wrap: break-word;\n    transform: translate(-50%, 0);\n    text-align: center;\n    z-index: 1001;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipPosition}\n  }\n\n  > :first-child:hover::before {\n    ${displayIfInContainer}\n  }\n\n  > :first-child::after {\n    display: inline-block;\n    visibility: hidden;\n    opacity: 0;\n    width: 0;\n    height: 0;\n    border-left: 7px solid transparent;\n    border-right: 7px solid transparent;\n    border-top: 7px solid\n      ${({ type }: WrapperProps) => getTooltipBgColorByType(type)};\n    position: absolute;\n    content: '';\n    z-index: 1002;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipArrowPosition}\n  }\n\n  > :first-child:hover::after {\n    ${displayIfInContainer}\n  }\n`;\n\nexport class Tooltip extends React.PureComponent<Props, State> {\n  private ref: React.RefObject<HTMLElement> = React.createRef();\n  private coordinates: { top: number | null; left: number | null };\n  private readonly tooltipPossiblePlacements: Placement[] = [];\n  private readonly defaultPlacement: Placement;\n\n  public constructor(props: Props) {\n    super(props);\n    this.defaultPlacement = 'top';\n    this.state = {\n      placement: props.placement || this.defaultPlacement,\n      outOfContainer: false\n    };\n    this.tooltipPossiblePlacements = ['top', 'left', 'right', 'bottom'];\n    this.coordinates = {\n      top: null,\n      left: null\n    };\n  }\n\n  public componentDidUpdate(prevProps: Props, prevState: State): void {\n    // if state is the same (the update came from prop change) do calculate else if state changed (update caused by new positioning) do not calculate again\n    if (prevState.placement !== this.state.placement || !this.ref) {\n      return;\n    }\n    this.positionTooltip();\n  }\n\n  private onHover = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.currentTarget;\n    const { top: previousTop, left: previousLeft } = this.coordinates;\n    const { top, left } = getBoundingRect(target);\n\n    if (top === previousTop && left === previousLeft) {\n      return;\n    }\n\n    this.coordinates = { ...this.coordinates, ...{ top, left } };\n    this.positionTooltip();\n  };\n\n  private positionTooltip() {\n    if (!this.ref.current) {\n      return;\n    }\n    const isBeforePseudoElement = true;\n    const elementDimensions = getElementDimensions({\n      elementRef: this.ref,\n      elementIsBefore: isBeforePseudoElement\n    });\n\n    const containerElement =\n      (this.props.options &&\n        this.props.options.container &&\n        this.props.options.container.current) ||\n      window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n    try {\n      const placement = getElementPlacement({\n        isElementOutOfContainerMethod: isTooltipOutOfContainer,\n        placement: this.props.placement || this.defaultPlacement,\n        possibilities: this.tooltipPossiblePlacements,\n        elementDimensions,\n        containerDimensions\n      });\n      this.setState({ placement: placement });\n    } catch (e) {\n      this.setState({ outOfContainer: true });\n      console.error('Error while computing Tooltip position', e);\n    }\n  }\n\n  private cloneChildren = (title: string) => (\n    child: React.ReactNode,\n    childIndex: number\n  ) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        'data-tooltip': title,\n        onMouseEnter: this.onHover,\n        ref: childIndex === 0 && this.ref\n      });\n    }\n  };\n\n  public render() {\n    const {\n      title = 'Default',\n      type = 'info',\n      children,\n      options = {}\n    } = this.props;\n    const childrenWithProps = React.Children.map(\n      <div>{children}</div>, // Wrapping the children with a div to make sure that the tooltip will be attached to this div so any state modification of the initial children (disabled, etc..) won't affect the style of the tooltip\n      this.cloneChildren(title)\n    );\n\n    return (\n      <TooltipWrapper\n        type={type}\n        placement={this.state.placement || this.defaultPlacement}\n        outOfContainer={this.state.outOfContainer}\n        options={options}\n      >\n        {childrenWithProps}\n      </TooltipWrapper>\n    );\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PasswordInput-module--root--R7z82\",\"label\":\"PasswordInput-module--label--1gsmo\",\"feedback\":\"PasswordInput-module--feedback--1N93-\",\"warning\":\"PasswordInput-module--warning--VPRwG\",\"error\":\"PasswordInput-module--error--2dGDd\",\"container\":\"PasswordInput-module--container--ibvop\",\"fullWidth\":\"PasswordInput-module--fullWidth--3S_kb\",\"input\":\"PasswordInput-module--input--1JOqP\",\"icon\":\"PasswordInput-module--icon--3Pwe5\"};"],"sourceRoot":""}