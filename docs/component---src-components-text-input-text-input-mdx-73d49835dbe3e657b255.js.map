{"version":3,"sources":["webpack:///../src/utility/cssUtils.ts","webpack:///../src/components/text-input/TextInput.module.scss","webpack:///../src/components/text-input/TextInput.tsx","webpack:///../src/components/text-input/TextInput.mdx"],"names":["getClassNames","result","classes","forEach","value","push","Object","entries","key","join","module","exports","TextInput","feedbackType","feedbackText","fullWidth","htmlInputProps","feedbackCssClass","styles","className","root","input","type","feedback","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","__position","__code","__scope","Playground","Props","preview","isMDXComponent"],"mappings":"oLAYaA,EAAgB,WAAiD,IAC5E,IAAMC,EAAmB,GADmD,mBAA7CC,EAA6C,yBAA7CA,EAA6C,gBAe5E,OAbAA,EAAQC,QAAQ,SAAAC,GACVA,IACmB,iBAAVA,EACTH,EAAOI,KAAKD,GAEZE,OAAOC,QAAQH,GAAOD,QAAQ,YAAkB,IAAhBK,EAAgB,WAE5CP,EAAOI,KAAKG,QAMfP,EAAOQ,KAAK,W,gOC1BrBC,EAAOC,QAAU,CAAC,KAAO,gCAAgC,UAAY,qCAAqC,MAAQ,iCAAiC,QAAU,mCAAmC,MAAQ,iCAAiC,SAAW,sC,qZCuB7O,IAAMC,EAAsC,SAAC,GAK9C,UAJJC,EAII,EAJJA,aACAC,EAGI,EAHJA,aAGI,IAFJC,iBAEI,SADDC,E,oIACC,gDACEC,EACJJ,GAAgBK,IAAOL,GAAgBK,IAAOL,GAAgB,GAEhE,OACE,mBACEM,UAAWnB,YAAckB,IAAOE,KAAMH,GAAd,OACrBC,IAAOH,WAAYA,EADE,KAIxB,yBACMC,EADN,CAEEG,UAAWnB,YAAckB,IAAOG,MAAOJ,GAAf,OACrBC,IAAOH,WAAYA,EADE,IAGxBO,KAAK,UAENR,GAAgBD,EACf,oBACEM,UAAWnB,YAAckB,IAAOK,SAAUN,GAAlB,OACrBC,IAAOH,WAAYA,EADE,KAIvBD,GAED,O,2fC7CH,IAAMU,EAAe,Q,yNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,aADR,aAGA,+CACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIpB,EAAWmB,QAAQ,UAC9B,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,eADR,eAGA,mEACA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,gBAAiBC,SAAO,GACzDL,QACAH,kBACAS,eACAC,UACAzB,aALyD,gBAMzDe,IANyD,EAOzDH,eAPyD,GAQxDL,UAAW,CACZmB,QAAS,mBACRP,QAAQ,cACb,YAAC,EAAD,CAAWA,QAAQ,gB,gNAMrBH,EAAWW,gBAAiB","file":"component---src-components-text-input-text-input-mdx-73d49835dbe3e657b255.js","sourcesContent":["interface CssClasses {\n  [cssClass: string]: boolean | undefined | null;\n}\n\n/**\n * Generates the CSS class names, separated by a space character.\n * @param classes A CSS class (`string`), or an `Object` with CSS classes as keys,\n * and expressions evaluable to `boolean` as values.\n * If the expression is evaluated to `true`, the CSS class will be added.\n *\n * Example: `getClassNames(\"class-1\", { \"class-2\": true, \"class-3\": false});`\n */\nexport const getClassNames = (...classes: (string | CssClasses)[]): string => {\n  const result: string[] = [];\n  classes.forEach(value => {\n    if (value) {\n      if (typeof value === 'string') {\n        result.push(value);\n      } else {\n        Object.entries(value).forEach(([key, value]) => {\n          if (value) {\n            result.push(key);\n          }\n        });\n      }\n    }\n  });\n  return result.join(' ');\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TextInput-module--root--1qtNu\",\"fullWidth\":\"TextInput-module--fullWidth--3l3EQ\",\"input\":\"TextInput-module--input--XO_l8\",\"warning\":\"TextInput-module--warning--1Vgw9\",\"error\":\"TextInput-module--error--2vU_9\",\"feedback\":\"TextInput-module--feedback--_uyj2\"};","import * as React from 'react';\nimport { getClassNames } from '@utility/cssUtils';\nimport styles from './TextInput.module.scss';\n\ntype TextInputFeedbackType = 'error' | 'warning';\ntype _ForbiddenProps = 'size' | 'prefix' | 'type';\n\ninterface TextInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, _ForbiddenProps> {\n  /**\n   * The feedback nature of the input\n   */\n  feedbackType?: TextInputFeedbackType;\n  /**\n   * Some text to display under the input when triggering a feedback type\n   */\n  feedbackText?: string;\n  /**\n   * Make this field take 100% of the width of it's container\n   * @default false\n   */\n  fullWidth?: boolean;\n}\n\nexport const TextInput: React.FC<TextInputProps> = ({\n  feedbackType,\n  feedbackText,\n  fullWidth = false,\n  ...htmlInputProps\n}) => {\n  const feedbackCssClass =\n    feedbackType && styles[feedbackType] ? styles[feedbackType] : '';\n\n  return (\n    <div\n      className={getClassNames(styles.root, feedbackCssClass, {\n        [styles.fullWidth]: fullWidth\n      })}\n    >\n      <input\n        {...htmlInputProps}\n        className={getClassNames(styles.input, feedbackCssClass, {\n          [styles.fullWidth]: fullWidth\n        })}\n        type='text'\n      />\n      {feedbackText && feedbackType ? (\n        <span\n          className={getClassNames(styles.feedback, feedbackCssClass, {\n            [styles.fullWidth]: fullWidth\n          })}\n        >\n          {feedbackText}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/alexandre/Documents/Programmation/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { TextInput } from './TextInput';\nimport '../../utility/playgroundStyles.css';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`A text input component`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={TextInput} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <p>{`Examples below show usage of the TextInput`}</p>\n    <Playground __position={1} __code={'<TextInput />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextInput,\n      DefaultLayout,\n      _frontmatter\n    }} className={{\n      preview: 'playground-base'\n    }} mdxType=\"Playground\">\n  <TextInput mdxType=\"TextInput\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}