{"version":3,"sources":["webpack:///../src/ions/dropdown/card/DropdownCard.tsx","webpack:///../src/atoms/dropdownMenu/helpers.ts","webpack:///../src/atoms/dropdownMenu/DropdownMenu.tsx","webpack:///../src/atoms/tooltip/helpers.ts","webpack:///../src/atoms/tooltip/Tooltip.tsx","webpack:///../src/colors/colors.ts","webpack:///../src/ions/button/base/BaseButton.tsx","webpack:///../src/ions/button/themes/ThemeWrapper.tsx","webpack:///../src/ions/button/themes/danger/ButtonDanger.tsx","webpack:///../src/ions/button/themes/secondary/ButtonSecondary.tsx","webpack:///../src/ions/button/themes/primary/ButtonPrimary.tsx","webpack:///../src/ions/button/themes/ghost/ButtonGhost.tsx","webpack:///../src/atoms/button/Button.tsx","webpack:///../src/utility/positionCompute.ts","webpack:///../src/ions/dropdown/element/DropdownElement.tsx","webpack:///../node_modules/gatsby/node_modules/core-js/modules/es7.object.values.js","webpack:///../src/atoms/icons/MoreIcon.tsx","webpack:///../src/molecules/quick-actions-menu/QuickActionsMenu.tsx","webpack:///../src/molecules/quick-actions-menu/QuickActionsMenu.mdx","webpack:///../src/utility/helpers.ts","webpack:///../src/ions/icon/base/Icon.tsx","webpack:///../src/ions/icon/wrapper/SvgWrapper.tsx","webpack:///../src/ions/text/StyledText.tsx"],"names":["DropdownCard","styled","div","white","dashGreen04","props","maxHeight","isDropdownOutOfContainer","elementDimensions","containerDimensions","placement","rect","top","totalHeight","minHeight","height","assertUnreachable","getControllerAndMenuDimensions","params","menuRef","current","left","right","bottom","width","totalWidth","dropdownStyle","getCSSComputedStyle","element","getBeforePseudoElement","elementIsBefore","isHeightAndWidthSet","getAlternativeStyle","computeElementHeight","computeElementWidth","getBoundingRect","controllerRef","getDropdownPosition","dockingSide","MenuWrapper","isReadyForDisplay","POSSIBLE_PLACEMENTS","DropdownMenu","React","setPlacement","prevIsOpen","isOpen","containerElement","containerRef","window","getContainerBoundaries","newPlacement","getElementPlacement","isElementOutOfContainerMethod","possibilities","e","console","error","ref","menuMaxHeight","className","menuClassName","children","handleTooltipPosition","handleTooltipArrowPosition","displayIfInContainer","outOfContainer","getTooltipBgColorByType","type","dashGreen00","validatorGreen","functionalRed02","isTooltipOutOfContainer","maxWidth","minWidth","removeOutOfScreenPlacement","filter","possiblePlacement","TooltipWrapper","span","options","tooltipMaxWidth","Tooltip","tooltipPossiblePlacements","onHover","event","target","currentTarget","coordinates","previousTop","previousLeft","positionTooltip","cloneChildren","title","child","childIndex","onMouseEnter","defaultPlacement","state","componentDidUpdate","prevProps","prevState","this","getElementDimensions","elementRef","container","setState","render","childrenWithProps","map","dashGreen01","dashGreen02","dashGreen03","dashGreen05","dashGreen06","dashDarkerGreen00","midGreen00","midGreen01","midGreen03","pink00","pink01","pink02","pink03","pink04","pink05","functionalRed00","functionalRed01","red00","red01","red02","red03","red04","red05","grey00","grey01","grey02","grey03","grey04","grey05","grey06","black","transparent","getBgColorByState","theme","backgroundColor","getBorderByState","borderColor","baseStyle","css","textColor","customStyle","SmallButton","button","MediumButton","LargeButton","StyledContent","StyledText","BaseButton","size","content","ThemeWrapper","colors","buttonTheme","dark","default","dangerColors","idle","hover","active","ButtonDanger","secondaryColors","ButtonSecondary","primaryColors","ButtonPrimary","ghostStyle","ButtonGhost","Button","nature","renderButtonByType","containsNumber","value","test","containsChar","char","indexOf","style","returnNumber","isNaN","elementStyle","alternativeHeight","parseInt","paddingTop","paddingBottom","marginTop","marginBottom","tooltipStyle","alternativeWidth","paddingLeft","paddingRight","marginLeft","marginRight","initialStyle","innerDiv","document","createElement","Object","values","forEach","property","toString","appendChild","getBoundingClientRect","remove","defaultRect","innerHeight","innerWidth","containerRect","getComputedStyle","undefined","Error","newPossibilities","firstPossiblePlacement","Wrapper","DropdownElement","onClick","elementClassName","$export","$values","S","it","MoreIcon","SvgWrapper","d","SquareButton","QuickActionsMenu","tooltipTitle","disabled","isDisabled","icon","maxMenuHeight","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","of","__position","__code","__scope","Playground","Props","useState","setIsOpen","preventDefault","isMDXComponent","_","getSize","getColor","propName","animated","Icon","svg","attrs","viewBox","version","xmlns","isAnimated","Array","from","find","isAnimatedSvg"],"mappings":"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","file":"component---src-molecules-quick-actions-menu-quick-actions-menu-mdx-a074bb761d92b5ea5546.js","sourcesContent":["import styled from 'styled-components';\nimport { dashGreen04, white } from '@colors';\n\ninterface Props {\n  maxHeight?: number;\n  className?: string;\n}\n\nconst DropdownCard = styled.div<Props>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${white};\n  border: 1px solid ${dashGreen04};\n  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  padding: 8px 0;\n  max-height: ${props => props.maxHeight || 100}px;\n  overflow-y: scroll;\n`;\n\nexport default DropdownCard;\n","import { Placement } from './types';\nimport { assertUnreachable } from '@utility/helpers';\nimport {\n  computeElementHeight,\n  computeElementWidth,\n  ElementDimensions,\n  getAlternativeStyle,\n  getBoundingRect,\n  getCSSComputedStyle,\n  IsElementOutOfContainerMethod,\n  isHeightAndWidthSet\n} from '@utility/positionCompute';\nimport { MenuWrapperProps } from './DropdownMenu';\n\nconst MARGIN = 4;\n\nexport const isDropdownOutOfContainer: IsElementOutOfContainerMethod<Placement> = ({\n  elementDimensions,\n  containerDimensions,\n  placement\n}) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n        containerDimensions.minHeight\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n        containerDimensions.maxHeight\n      );\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\ninterface GetControllerAndMenuDimensionsParams {\n  menuRef: React.RefObject<HTMLElement>;\n  controllerRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}\n\nexport const getControllerAndMenuDimensions = (\n  params: GetControllerAndMenuDimensionsParams\n): ElementDimensions => {\n  if (!params.menuRef.current) {\n    return {\n      rect: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        width: 0,\n        height: 0\n      },\n      totalHeight: 0,\n      totalWidth: 0\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.menuRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.menuRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.controllerRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport const getDropdownPosition = ({\n  dockingSide,\n  placement\n}: MenuWrapperProps) => {\n  return `${placement === 'top' ? 'bottom' : 'top'}: 100%;\n  transform: translateY(${placement === 'top' ? -1 * MARGIN : MARGIN}px);\n  ${dockingSide}: 0;`;\n};\n","import * as React from 'react';\nimport DropdownCard from '@ions/dropdown/card/DropdownCard';\nimport styled from 'styled-components';\nimport { DockingSide, Placement } from './types';\nimport {\n  getControllerAndMenuDimensions,\n  getDropdownPosition,\n  isDropdownOutOfContainer\n} from './helpers';\nimport {\n  getContainerBoundaries,\n  getElementPlacement\n} from '@utility/positionCompute';\n\ninterface Props {\n  isOpen: boolean;\n  controllerRef: React.RefObject<HTMLElement>;\n  menuMaxHeight?: number;\n  dockingSide?: DockingSide;\n  placement?: Placement;\n  containerRef?: React.RefObject<HTMLElement>;\n  menuClassName?: string;\n}\nexport interface MenuWrapperProps {\n  placement: Placement;\n  dockingSide: DockingSide;\n  isReadyForDisplay: boolean;\n}\n\nconst MenuWrapper = styled.div<MenuWrapperProps>`\n  position: absolute;\n  opacity: ${props => (props.isReadyForDisplay ? 1 : 0)};\n  ${getDropdownPosition}\n  max-width: 318px;\n`;\n\nconst DEFAULT_PLACEMENT = 'bottom';\nconst POSSIBLE_PLACEMENTS: Placement[] = ['top', 'bottom'];\n\nconst DropdownMenu: React.FC<Props> = props => {\n  const [placement, setPlacement] = React.useState<Placement | null>(null);\n  const menuRef = React.useRef<HTMLDivElement>(null);\n  const prevIsOpen = React.useRef(false);\n\n  React.useEffect(() => {\n    if (props.isOpen === prevIsOpen.current) {\n      return;\n    }\n    prevIsOpen.current = props.isOpen;\n    setPlacement(null);\n\n    if (!menuRef.current || !props.controllerRef.current) {\n      return;\n    }\n    const elementDimensions = getControllerAndMenuDimensions({\n      menuRef,\n      controllerRef: props.controllerRef\n    });\n\n    const containerElement =\n      (props.containerRef && props.containerRef.current) || window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n\n    try {\n      const newPlacement = getElementPlacement({\n        isElementOutOfContainerMethod: isDropdownOutOfContainer,\n        placement: props.placement || DEFAULT_PLACEMENT,\n        possibilities: POSSIBLE_PLACEMENTS,\n        elementDimensions,\n        containerDimensions\n      });\n      setPlacement(newPlacement);\n    } catch (e) {\n      console.error('Error while computing DropdownMenu position', e);\n      setPlacement(DEFAULT_PLACEMENT);\n    }\n  });\n\n  return (\n    <>\n      {props.isOpen && (\n        <MenuWrapper\n          placement={placement || DEFAULT_PLACEMENT}\n          ref={menuRef}\n          dockingSide={props.dockingSide || 'left'}\n          isReadyForDisplay={placement !== null}\n        >\n          <DropdownCard\n            maxHeight={props.menuMaxHeight}\n            className={props.menuClassName}\n          >\n            {props.children}\n          </DropdownCard>\n        </MenuWrapper>\n      )}\n    </>\n  );\n};\n\nexport default DropdownMenu;\n","import { dashGreen00, functionalRed02, validatorGreen } from '@colors';\nimport { assertUnreachable } from '@utility/helpers';\nimport { WrapperProps } from './Tooltip';\nimport { Placement, TooltipType } from './types';\nimport { IsElementOutOfContainerMethod } from '@utility/positionCompute';\nexport const tooltipMargin = 10;\nconst rightTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: ${tooltipMargin}px;\n`;\n\nconst leftTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: ${tooltipMargin}px;\n`;\n\nconst topTooltipStyle = `\n  margin-bottom: 10px;\n  bottom: 100%;\n  left: 50%;\n`;\n\nconst bottomTooltipStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  left: 50%;\n  top: 100%;\n  margin-top: ${tooltipMargin}px;\n`;\n\nconst topTooltipArrowStyle = `\n  margin-bottom: 5px;\n  bottom: 100%;\n  transform: translate(-50%, 0);\n  left: 50%;\n`;\n\nconst rightTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(90deg) translate(0, -50%);\n  left: 100%;\n  top: 50%;\n  margin-left: -2px;\n  margin-top: -4px;\n`;\n\nconst leftTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(-90deg) translate(0, -50%);\n  left: auto;\n  right: 100%;\n  top: 50%;\n  margin-right: -2px;\n  margin-top: -4px;\n`;\n\nconst bottomTooltipArrowStyle = `\n  margin-bottom: 0;\n  bottom: auto;\n  transform: rotate(180deg) translate(-50%, 0);\n  top: 100%;\n  left: unset;\n  right: 50%\n  margin-top: 5px;\n`;\n\nexport const handleTooltipPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipStyle;\n    case 'right':\n      return rightTooltipStyle;\n    case 'left':\n      return leftTooltipStyle;\n    case 'bottom':\n      return bottomTooltipStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const handleTooltipArrowPosition = ({ placement }: WrapperProps) => {\n  switch (placement) {\n    case 'top':\n      return topTooltipArrowStyle;\n    case 'right':\n      return rightTooltipArrowStyle;\n    case 'left':\n      return leftTooltipArrowStyle;\n    case 'bottom':\n      return bottomTooltipArrowStyle;\n    default:\n      return assertUnreachable(placement);\n  }\n};\n\nexport const displayIfInContainer = ({ outOfContainer }: WrapperProps) => {\n  return !outOfContainer\n    ? `visibility: visible;\n       opacity: 1;`\n    : ``;\n};\n\nexport const getTooltipBgColorByType = (type: TooltipType) => {\n  switch (type) {\n    case 'info':\n      return dashGreen00;\n    case 'success':\n      return validatorGreen;\n    case 'error':\n      return functionalRed02;\n    default:\n      return assertUnreachable(type);\n  }\n};\n\nexport const isTooltipOutOfContainer: IsElementOutOfContainerMethod<Placement> = ({\n  elementDimensions,\n  containerDimensions,\n  placement\n}) => {\n  switch (placement) {\n    case 'top':\n      return (\n        elementDimensions.rect.top - elementDimensions.totalHeight <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'bottom':\n      return (\n        elementDimensions.rect.top +\n          elementDimensions.rect.height +\n          elementDimensions.totalHeight >\n          containerDimensions.maxHeight ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 +\n          elementDimensions.totalWidth / 2 >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.left +\n          elementDimensions.rect.width / 2 -\n          elementDimensions.totalWidth / 2 <\n          containerDimensions.minWidth\n      );\n    case 'right':\n      return (\n        elementDimensions.rect.left +\n          elementDimensions.rect.width +\n          elementDimensions.totalWidth >\n          containerDimensions.maxWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n    case 'left':\n      return (\n        elementDimensions.rect.left - elementDimensions.totalWidth <\n          containerDimensions.minWidth ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 -\n          elementDimensions.totalHeight / 2 <\n          containerDimensions.minHeight ||\n        elementDimensions.rect.top +\n          elementDimensions.rect.height / 2 +\n          elementDimensions.totalHeight / 2 >\n          containerDimensions.maxHeight\n      );\n\n    default:\n      assertUnreachable(placement);\n      return true;\n  }\n};\n\nexport const removeOutOfScreenPlacement = (\n  possibilities: Placement[],\n  placement: Placement\n) => {\n  return possibilities.filter(\n    possiblePlacement => possiblePlacement !== placement\n  );\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { white } from '@colors';\nimport { Placement } from '@atoms/tooltip/types';\nimport {\n  displayIfInContainer,\n  getTooltipBgColorByType,\n  handleTooltipArrowPosition,\n  handleTooltipPosition,\n  isTooltipOutOfContainer\n} from '@atoms/tooltip/helpers';\nimport {\n  getBoundingRect,\n  getContainerBoundaries,\n  getElementDimensions,\n  getElementPlacement\n} from '@utility/positionCompute';\n\nexport interface Props {\n  title: string;\n  /**\n   * The position of the tooltip\n   * @default top\n   */\n  placement?: 'right' | 'left' | 'top' | 'bottom';\n  /**\n   * A type that defines the tooltip color\n   * @default info\n   */\n  type?: 'info' | 'success' | 'error';\n  /**\n   * Extra options\n   * @default {tooltipMaxWidth: 300 (in px), container: window}\n   */\n  options?: {\n    /**\n     * A max width for the tooltip\n     */\n    tooltipMaxWidth?: number;\n    /**\n     * An element as a container (if not the default window)\n     */\n    container?: React.RefObject<HTMLElement>;\n  };\n}\n\ninterface State {\n  outOfContainer: boolean;\n  placement: Placement | null;\n}\n\nexport type WrapperProps = Omit<Required<Props>, 'title'> & {\n  outOfContainer: boolean;\n};\n\nconst TooltipWrapper = styled.span<WrapperProps>`\n  > :first-child:hover {\n    position: relative;\n  }\n\n  > :first-child::before {\n    font-family: inherit;\n    visibility: hidden;\n    opacity: 0;\n    font-size: 0.75rem;\n    line-height: 1.25;\n    display: inline-block;\n    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    padding: 8px;\n    background-color: ${({ type }: WrapperProps) =>\n      getTooltipBgColorByType(type)};\n    content: attr(data-tooltip);\n    color: ${white};\n    position: absolute;\n    max-width: ${({ options }: WrapperProps) =>\n      options.tooltipMaxWidth ? `${options.tooltipMaxWidth}px` : '300px'};\n    width: max-content;\n    @supports (-ms-ime-align: auto) {\n      min-width: 50px;\n    }\n    word-wrap: break-word;\n    transform: translate(-50%, 0);\n    text-align: center;\n    z-index: 1001;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipPosition}\n  }\n\n  > :first-child:hover::before {\n    ${displayIfInContainer}\n  }\n\n  > :first-child::after {\n    display: inline-block;\n    visibility: hidden;\n    opacity: 0;\n    width: 0;\n    height: 0;\n    border-left: 7px solid transparent;\n    border-right: 7px solid transparent;\n    border-top: 7px solid\n      ${({ type }: WrapperProps) => getTooltipBgColorByType(type)};\n    position: absolute;\n    content: '';\n    z-index: 1002;\n    transition: opacity 0.1s ease-in-out;\n    ${handleTooltipArrowPosition}\n  }\n\n  > :first-child:hover::after {\n    ${displayIfInContainer}\n  }\n`;\n\nclass Tooltip extends React.PureComponent<Props, State> {\n  private ref: React.RefObject<HTMLElement> = React.createRef();\n  private coordinates: { top: number | null; left: number | null };\n  private readonly tooltipPossiblePlacements: Placement[] = [];\n  private readonly defaultPlacement: Placement;\n\n  public constructor(props: Props) {\n    super(props);\n    this.defaultPlacement = 'top';\n    this.state = {\n      placement: props.placement || this.defaultPlacement,\n      outOfContainer: false\n    };\n    this.tooltipPossiblePlacements = ['top', 'left', 'right', 'bottom'];\n    this.coordinates = {\n      top: null,\n      left: null\n    };\n  }\n\n  public componentDidUpdate(prevProps: Props, prevState: State): void {\n    // if state is the same (the update came from prop change) do calculate else if state changed (update caused by new positioning) do not calculate again\n    if (prevState.placement !== this.state.placement || !this.ref) {\n      return;\n    }\n    this.positionTooltip();\n  }\n\n  private onHover = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.currentTarget;\n    const { top: previousTop, left: previousLeft } = this.coordinates;\n    const { top, left } = getBoundingRect(target);\n\n    if (top === previousTop && left === previousLeft) {\n      return;\n    }\n\n    this.coordinates = { ...this.coordinates, ...{ top, left } };\n    this.positionTooltip();\n  };\n\n  private positionTooltip() {\n    if (!this.ref.current) {\n      return;\n    }\n    const isBeforePseudoElement = true;\n    const elementDimensions = getElementDimensions({\n      elementRef: this.ref,\n      elementIsBefore: isBeforePseudoElement\n    });\n\n    const containerElement =\n      (this.props.options &&\n        this.props.options.container &&\n        this.props.options.container.current) ||\n      window;\n    const containerDimensions = getContainerBoundaries(containerElement);\n    try {\n      const placement = getElementPlacement({\n        isElementOutOfContainerMethod: isTooltipOutOfContainer,\n        placement: this.props.placement || this.defaultPlacement,\n        possibilities: this.tooltipPossiblePlacements,\n        elementDimensions,\n        containerDimensions\n      });\n      this.setState({ placement: placement });\n    } catch (e) {\n      this.setState({ outOfContainer: true });\n      console.error('Error while computing Tooltip position', e);\n    }\n  }\n\n  private cloneChildren = (title: string) => (\n    child: React.ReactNode,\n    childIndex: number\n  ) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        'data-tooltip': title,\n        onMouseEnter: this.onHover,\n        ref: childIndex === 0 && this.ref\n      });\n    }\n  };\n\n  public render() {\n    const {\n      title = 'Default',\n      type = 'info',\n      children,\n      options = {}\n    } = this.props;\n    const childrenWithProps = React.Children.map(\n      <div>{children}</div>, // Wrapping the children with a div to make sure that the tooltip will be attached to this div so any state modification of the initial children (disabled, etc..) won't affect the style of the tooltip\n      this.cloneChildren(title)\n    );\n\n    return (\n      <TooltipWrapper\n        type={type}\n        placement={this.state.placement || this.defaultPlacement}\n        outOfContainer={this.state.outOfContainer}\n        options={options}\n      >\n        {childrenWithProps}\n      </TooltipWrapper>\n    );\n  }\n}\n\nexport default Tooltip;\n","/* -- DASH_GREEN -- */\nexport const dashGreen00 = '#0E353D';\nexport const dashGreen01 = '#3E5D64';\nexport const dashGreen02 = '#6E868B';\nexport const dashGreen03 = '#9FAEB1';\nexport const dashGreen04 = '#CFD7D8';\nexport const dashGreen05 = '#D9DFE0';\nexport const dashGreen06 = '#F5F7F7';\n\n/* -- DASH_DARKER_GREEN -- */\nexport const dashDarkerGreen00 = '#071A1E';\n\n/* -- MID_GREEN -- */\nexport const midGreen00 = '#0E6476';\nexport const midGreen01 = '#3E8391';\nexport const midGreen02 = '#6EA2AD';\nexport const midGreen03 = '#9FC1C8';\nexport const midGreen04 = '#CFE0E4';\nexport const midGreen05 = '#D9E6E9';\n\n/* -- PINK -- */\nexport const pink00 = '#FDB5AF';\nexport const pink01 = '#FDC4BF';\nexport const pink02 = '#FED3CF';\nexport const pink03 = '#FEE1DF';\nexport const pink04 = '#FFF0EF';\nexport const pink05 = '#FFF3F2';\n\n/* -- ORANGE -- */\nexport const orange00 = '#FE5B33';\nexport const orange01 = '#FE7C5C';\nexport const orange02 = '#FE9D85';\nexport const orange03 = '#FFBDAD';\nexport const orange04 = '#FFDED6';\nexport const orange05 = '#FFE5DE';\n\n/* -- FUNCTIONAL_RED -- */\nexport const functionalRed00 = '#4E000D';\nexport const functionalRed01 = '#8B0018';\nexport const functionalRed02 = '#FF002D';\nexport const functionalRed03 = '#FFA49F';\n\n/* -- RED -- */\nexport const red00 = '#BF0A33';\nexport const red01 = '#CC3B5C';\nexport const red02 = '#D96C85';\nexport const red03 = '#E59DAD';\nexport const red04 = '#F2CED6';\nexport const red05 = '#F5D8DE';\n\n/* -- GREY -- */\nexport const grey00 = '#615B57';\nexport const grey01 = '#999592';\nexport const grey02 = '#CCC7C2';\nexport const grey03 = '#D6D2CE';\nexport const grey04 = '#E0DDDA';\nexport const grey05 = '#EBE9E7';\nexport const grey06 = '#F5F4F3';\n\n/* -- BLACK -- */\nexport const black = '#000000';\n\n/* -- WHITE -- */\nexport const white = '#FFFFFF';\n\n/* -- VALIDATOR_GREEN -- */\nexport const validatorGreen = '#20B422';\n\n/* -- TRANSPARENT -- */\nexport const transparent = 'transparent';\n","import * as React from 'react';\nimport styled, {\n  css,\n  DefaultTheme,\n  FlattenInterpolation,\n  ThemedStyledProps\n} from 'styled-components';\nimport { transparent, white } from '@colors';\nimport { StyledText } from '@ions/text/StyledText';\nimport { Props } from '@atoms/button/Button';\nimport { assertUnreachable } from '@utility/helpers';\nimport { ButtonState } from '@ions/button/themes/types';\n\nexport type BaseButtonProps = Omit<Props, 'nature' | 'theme'>;\ntype Theme = {\n  [key in keyof DefaultTheme]: DefaultTheme[key];\n};\n\nexport interface BaseProps extends BaseButtonProps {\n  children?: React.ReactNode;\n  customStyle?: FlattenInterpolation<ThemedStyledProps<{}, DefaultTheme>>;\n  theme: Theme;\n}\n\nconst getBgColorByState = (state: ButtonState) => ({ theme }: BaseProps) =>\n  theme.backgroundColor[state] || transparent;\nconst getColor = ({ theme }: BaseProps) => theme.textColor || white;\nconst getBorderByState = (state: ButtonState) => ({ theme }: BaseProps) =>\n  theme.borderColor\n    ? `1px solid ${theme.borderColor[state] || transparent}`\n    : 'none';\n\nconst baseStyle = css`\n  color: ${getColor};\n  font-size: 16px;\n  line-height: 20px;\n  background-color: ${getBgColorByState('idle')};\n  cursor: pointer;\n  border: ${getBorderByState('idle')};\n  border-radius: 4px;\n  min-width: 60px;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  outline: none;\n  transition: all 0.1s;\n  ${props => props.customStyle};\n\n  &:hover:not(:disabled),\n  &:focus:not(:disabled) {\n    border: ${getBorderByState('hover')};\n    background-color: ${getBgColorByState('hover')};\n  }\n  &:active:not(:disabled) {\n    border: ${getBorderByState('active')};\n    background-color: ${getBgColorByState('active')};\n  }\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    span {\n      pointer-events: none;\n    }\n  }\n`;\n\nconst SmallButton = styled.button<BaseProps>`\n  ${baseStyle}\n  padding: 8px 16px;\n  height: 32px;\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst MediumButton = styled.button<BaseProps>`\n  ${baseStyle}\n  padding: 10px 16px;\n  height: 40px;\n`;\n\nconst LargeButton = styled.button<BaseProps>`\n  ${baseStyle}\n  padding: 14px 24px;\n  height: 48px;\n`;\n\nconst StyledContent = styled(StyledText)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst BaseButton: React.FunctionComponent<BaseProps> = ({\n  children,\n  size = 'medium',\n  ...props\n}: BaseProps) => {\n  const content = <StyledContent>{children || 'Default'}</StyledContent>;\n  switch (size) {\n    case 'small':\n      return <SmallButton {...props}>{content}</SmallButton>;\n    case 'medium':\n      return <MediumButton {...props}>{content}</MediumButton>;\n    case 'large':\n      return <LargeButton {...props}>{content}</LargeButton>;\n    default:\n      return assertUnreachable(size);\n  }\n};\n\nexport default BaseButton;\n","import * as React from 'react';\nimport { BaseButton } from '@ions';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport {\n  DefaultTheme,\n  FlattenInterpolation,\n  ThemedStyledProps\n} from 'styled-components';\n\ninterface Props extends ThemeWrapperProps {\n  colors: ThemeColors;\n  customStyle?: FlattenInterpolation<ThemedStyledProps<{}, DefaultTheme>>;\n}\n\nexport const ThemeWrapper = ({\n  colors,\n  theme = 'default',\n  ...props\n}: Props) => {\n  const buttonTheme =\n    theme === 'dark' && colors.dark ? colors.dark : colors.default;\n\n  return <BaseButton theme={buttonTheme} {...props} />;\n};\n","import * as React from 'react';\nimport { functionalRed00, functionalRed01, functionalRed02 } from '@colors';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport { ThemeWrapper } from '@ions/button/themes/ThemeWrapper';\n\nconst dangerColors: ThemeColors = {\n  default: {\n    backgroundColor: {\n      idle: functionalRed02,\n      hover: functionalRed01,\n      active: functionalRed00\n    }\n  }\n};\n\nconst ButtonDanger = (props: ThemeWrapperProps) => (\n  <ThemeWrapper colors={dangerColors} {...props} />\n);\n\nexport default ButtonDanger;\n","import * as React from 'react';\nimport {\n  dashGreen00,\n  dashGreen01,\n  dashGreen02,\n  dashGreen03,\n  dashGreen05,\n  transparent\n} from '@colors';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport { ThemeWrapper } from '@ions/button/themes/ThemeWrapper';\n\nconst secondaryColors: ThemeColors = {\n  default: {\n    backgroundColor: {\n      idle: transparent,\n      hover: dashGreen05,\n      active: dashGreen03\n    },\n    textColor: dashGreen00,\n    borderColor: {\n      idle: dashGreen05,\n      hover: dashGreen05,\n      active: dashGreen03\n    }\n  },\n  dark: {\n    backgroundColor: {\n      idle: transparent,\n      hover: dashGreen01,\n      active: dashGreen02\n    },\n    borderColor: {\n      idle: dashGreen01,\n      hover: dashGreen01,\n      active: dashGreen02\n    }\n  }\n};\n\nconst ButtonSecondary = (props: ThemeWrapperProps) => (\n  <ThemeWrapper colors={secondaryColors} {...props} />\n);\n\nexport default ButtonSecondary;\n","import * as React from 'react';\nimport {\n  dashDarkerGreen00,\n  dashGreen00,\n  midGreen00,\n  midGreen01,\n  midGreen03,\n  white\n} from '@colors';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport { ThemeWrapper } from '@ions/button/themes/ThemeWrapper';\n\nconst primaryColors: ThemeColors = {\n  default: {\n    backgroundColor: {\n      idle: midGreen00,\n      hover: dashGreen00,\n      active: dashDarkerGreen00\n    }\n  },\n  dark: {\n    backgroundColor: {\n      idle: white,\n      hover: midGreen03,\n      active: midGreen01\n    },\n    textColor: dashGreen00\n  }\n};\n\nconst ButtonPrimary = (props: ThemeWrapperProps) => (\n  <ThemeWrapper colors={primaryColors} {...props} />\n);\n\nexport default ButtonPrimary;\n","import * as React from 'react';\nimport { css } from 'styled-components';\nimport { dashGreen00, dashGreen01, dashGreen05, transparent } from '@colors';\nimport { ThemeColors, ThemeWrapperProps } from '@ions/button/themes/types';\nimport { ThemeWrapper } from '@ions/button/themes/ThemeWrapper';\n\nconst primaryColors: ThemeColors = {\n  default: {\n    backgroundColor: {\n      idle: transparent,\n      hover: transparent,\n      active: dashGreen05\n    },\n    textColor: dashGreen00,\n    borderColor: {\n      idle: transparent,\n      hover: dashGreen05,\n      active: dashGreen05\n    }\n  },\n  dark: {\n    backgroundColor: {\n      idle: transparent,\n      hover: transparent,\n      active: dashGreen01\n    },\n    borderColor: {\n      idle: transparent,\n      hover: dashGreen01,\n      active: dashGreen01\n    }\n  }\n};\n\n/**\n * Ghost button special styling\n */\nconst ghostStyle = css`\n  min-width: 32px;\n  svg {\n    margin: -8px -16px;\n  }\n`;\n\nconst ButtonGhost = (props: ThemeWrapperProps) => (\n  <ThemeWrapper customStyle={ghostStyle} colors={primaryColors} {...props} />\n);\n\nexport default ButtonGhost;\n","import * as React from 'react';\nimport {\n  ButtonDanger,\n  ButtonGhost,\n  ButtonPrimary,\n  ButtonSecondary\n} from '@ions/button/themes';\nimport { assertUnreachable } from '@utility/helpers';\n\n// Downside: Docz will display all props including React.ButtonHTMLAttributes ones\n// https://github.com/doczjs/docz/issues/895\nexport interface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The button's nature\n   */\n  nature: 'danger' | 'secondary' | 'primary' | 'ghost';\n  /**\n   * Activates the button dark mode\n   */\n  theme?: 'default' | 'dark';\n  /**\n   * Disabled state of the button\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * A large style option\n   @default false\n   */\n  size?: 'small' | 'medium' | 'large';\n}\n\nconst Button: React.FunctionComponent<Props> = (props): JSX.Element | null => {\n  const renderButtonByType = ({\n    nature,\n    ...props\n  }: Props): JSX.Element | null => {\n    switch (nature) {\n      case 'danger':\n        return <ButtonDanger {...props} />;\n      case 'secondary':\n        return <ButtonSecondary {...props} />;\n      case 'primary':\n        return <ButtonPrimary {...props} />;\n      case 'ghost':\n        return <ButtonGhost {...props} />;\n      default:\n        return assertUnreachable(nature);\n    }\n  };\n\n  return renderButtonByType(props);\n};\n\nexport default Button;\n","import { Placement as TooltipPlacement } from '@atoms/tooltip/types';\nimport { Placement as DropdownPlacement } from '@atoms/dropdownMenu/types';\n/** Both tooltips and dropdown use the DOM to make sure\n * they are fitting in a container\n */\n\nconst containsNumber = (value: string) => /\\d/.test(value);\nconst containsChar = (value: string, char: string) =>\n  value.indexOf(char) !== -1;\n\nexport const isHeightAndWidthSet = (style: CSSStyleDeclaration) => {\n  const { height, width } = style;\n  if (!height || !width) {\n    return false;\n  }\n\n  return (\n    containsNumber(height) ||\n    containsNumber(width) ||\n    !containsChar(height, '%') ||\n    !containsChar(width, '%')\n  );\n};\n\nconst returnNumber = (value: number) => (isNaN(value) ? 0 : value);\n\nexport const computeElementHeight = (\n  elementStyle: CSSStyleDeclaration,\n  alternativeHeight: string | null\n) => {\n  const height =\n    parseInt(elementStyle.paddingTop || '0', 10) +\n    parseInt(elementStyle.paddingBottom || '0', 10) +\n    parseInt(elementStyle.marginTop || '0', 10) +\n    parseInt(elementStyle.marginBottom || '0', 10) +\n    parseInt(alternativeHeight || elementStyle.height || '0', 10);\n  return returnNumber(height);\n};\n\nexport const computeElementWidth = (\n  tooltipStyle: CSSStyleDeclaration,\n  alternativeWidth: string | null\n) => {\n  const width =\n    parseInt(tooltipStyle.paddingLeft || '0', 10) +\n    parseInt(tooltipStyle.paddingRight || '0', 10) +\n    parseInt(tooltipStyle.marginLeft || '0', 10) +\n    parseInt(tooltipStyle.marginRight || '0', 10) +\n    parseInt(alternativeWidth || tooltipStyle.width || '0', 10);\n\n  return returnNumber(width);\n};\n\nexport const getAlternativeStyle = (\n  initialStyle: CSSStyleDeclaration,\n  element: Element | null\n) => {\n  if (!element) {\n    return { height: '0', width: '0' };\n  }\n  let innerDiv = document.createElement('div');\n  (Object.values(initialStyle) as (keyof CSSStyleDeclaration)[]).forEach(\n    property => {\n      if (\n        property &&\n        property !== 'length' &&\n        property !== 'parentRule' &&\n        !containsNumber(property.toString())\n      ) {\n        innerDiv.style[property] = initialStyle[property];\n      }\n    }\n  );\n  element.appendChild(innerDiv);\n  let { height, width } = innerDiv.getBoundingClientRect();\n  innerDiv.remove();\n\n  return { height: height.toString(), width: width.toString() };\n};\n\nconst defaultRect = {\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  width: 0,\n  height: 0\n};\n\nexport const getBoundingRect = (element: Element | null): ClientRect => {\n  if (element) {\n    return element.getBoundingClientRect();\n  } else {\n    return defaultRect;\n  }\n};\n\nexport const getContainerBoundaries = (\n  container: Element | Window\n): ContainerDimensions => {\n  const isWindow = (element: Element | Window): element is Window =>\n    element === window;\n\n  if (isWindow(container)) {\n    return {\n      maxHeight: window.innerHeight,\n      minHeight: 0,\n      maxWidth: window.innerWidth,\n      minWidth: 0\n    };\n  }\n  const containerRect = getBoundingRect(container);\n\n  return {\n    maxHeight: containerRect.top + containerRect.height,\n    minHeight: containerRect.top,\n    minWidth: containerRect.left,\n    maxWidth: containerRect.left + containerRect.width\n  };\n};\n\nexport const getCSSComputedStyle = (params: {\n  element: Element;\n  getBeforePseudoElement?: boolean;\n}) => {\n  return window.getComputedStyle(\n    params.element,\n    params.getBeforePseudoElement ? ':before' : undefined\n  );\n};\n\nexport const getElementDimensions = (params: {\n  elementRef: React.RefObject<HTMLElement>;\n  elementIsBefore?: boolean;\n}) => {\n  if (!params.elementRef.current) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const dropdownStyle = getCSSComputedStyle({\n    element: params.elementRef.current,\n    getBeforePseudoElement: params.elementIsBefore\n  });\n  if (!dropdownStyle) {\n    return {\n      totalHeight: 0,\n      totalWidth: 0,\n      rect: defaultRect\n    };\n  }\n\n  const isStyleComputed = isHeightAndWidthSet(dropdownStyle);\n  const { height = null, width = null } = isStyleComputed\n    ? {}\n    : getAlternativeStyle(dropdownStyle, params.elementRef.current); // Extra calculations For Edge\n  const totalHeight = computeElementHeight(dropdownStyle, height);\n  const totalWidth = computeElementWidth(dropdownStyle, width);\n  const rect = getBoundingRect(params.elementRef.current);\n\n  return {\n    totalHeight,\n    totalWidth,\n    rect\n  };\n};\n\nexport interface ElementDimensions {\n  rect: ClientRect;\n  totalHeight: number;\n  totalWidth: number;\n}\n\ninterface ContainerDimensions {\n  maxHeight: number;\n  maxWidth: number;\n  minHeight: number;\n  minWidth: number;\n}\n\ntype AllPlacements = TooltipPlacement | DropdownPlacement;\n\nexport type IsElementOutOfContainerMethod<T extends AllPlacements> = (params: {\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n  placement: T;\n}) => boolean;\n\ninterface ElementPlacementParams<T extends AllPlacements> {\n  isElementOutOfContainerMethod: IsElementOutOfContainerMethod<T>;\n  placement: T;\n  possibilities: T[];\n  elementDimensions: ElementDimensions;\n  containerDimensions: ContainerDimensions;\n}\n\nexport const getElementPlacement = <T extends AllPlacements>(\n  params: ElementPlacementParams<T>\n): T | null => {\n  if (!params.placement) {\n    throw new Error(\n      'Element cannot be displayed in the container Element/Window due to its incompatible size.' +\n        'Please consider reducing it or better position tooltiped' +\n        'element in the screen.'\n    );\n  }\n\n  if (\n    !params.isElementOutOfContainerMethod({\n      ...params\n    })\n  ) {\n    return params.placement;\n  }\n\n  const newPossibilities = params.possibilities.filter(\n    possiblePlacement => params.placement !== possiblePlacement\n  );\n  const [firstPossiblePlacement] = newPossibilities;\n\n  return getElementPlacement({\n    ...params,\n    placement: firstPossiblePlacement,\n    possibilities: newPossibilities\n  });\n};\n","import * as React from 'react';\nimport { StyledText } from '@ions/text/StyledText';\nimport styled from 'styled-components';\nimport { dashGreen00, dashGreen06 } from '@colors';\n\ninterface Props {\n  onClick: (e: React.MouseEvent) => void;\n  elementClassName?: string;\n}\n\nconst Wrapper = styled.button`\n  color: ${dashGreen00};\n  line-height: 20px;\n  font-size: 16px;\n  cursor: pointer;\n  border: transparent 0px;\n  outline: none;\n  display: flex;\n  box-sizing: border-box;\n  height: 36px;\n  flex-shrink: 0;\n  padding: 8px 16px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  &:hover {\n    background-color: ${dashGreen06};\n  }\n`;\n\nconst DropdownElement: React.FC<Props> = props => {\n  return (\n    <Wrapper\n      type='button'\n      onClick={props.onClick}\n      className={props.elementClassName}\n    >\n      <StyledText>{props.children}</StyledText>\n    </Wrapper>\n  );\n};\n\nexport default DropdownElement;\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","import * as React from 'react';\nimport SvgWrapper from '@ions/icon/wrapper/SvgWrapper';\n\nconst MoreIcon: React.FunctionComponent<import('../../ions/icon/types').IconProps> = (\n  props: import('../../ions/icon/types').IconProps\n): JSX.Element => (\n  <SvgWrapper {...props}>\n    <React.Fragment>\n      <path d='M4 9H6V11H4V9Z' />\n      <path d='M9 9H11V11H9V9Z' />\n      <path d='M14 9H16V11H14V9Z' />\n    </React.Fragment>\n  </SvgWrapper>\n);\n\nexport default MoreIcon;\n","import * as React from 'react';\nimport DropdownMenu from '@atoms/dropdownMenu/DropdownMenu';\nimport { Button, Tooltip } from '@atoms';\nimport styled from 'styled-components';\nimport { dashGreen00 } from '@colors';\n\ninterface Props {\n  isOpen: boolean;\n  icon: JSX.Element;\n  onClick: React.MouseEventHandler;\n  tooltipTitle: string;\n  maxMenuHeight?: number;\n  containerRef?: React.RefObject<HTMLElement>;\n  isDisabled?: boolean;\n  menuClassName?: string;\n}\n\nconst SquareButton = styled(Button)`\n  width: 32px;\n  height: 32px;\n  fill: ${dashGreen00};\n`;\n\nconst Wrapper = styled.div`\n  width: 32px;\n  height: 32px;\n  position: relative;\n`;\n\nconst QuickActionsMenu: React.FC<Props> = props => {\n  const controllerRef = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <Wrapper>\n      <div ref={controllerRef}>\n        <Tooltip\n          placement='left'\n          title={props.tooltipTitle}\n          options={{ tooltipMaxWidth: 172 }}\n        >\n          <SquareButton\n            nature='ghost'\n            onClick={props.onClick}\n            disabled={props.isDisabled}\n          >\n            {props.icon}\n          </SquareButton>\n        </Tooltip>\n      </div>\n      <DropdownMenu\n        dockingSide='right'\n        menuMaxHeight={props.maxMenuHeight}\n        isOpen={props.isOpen}\n        controllerRef={controllerRef}\n        containerRef={props.containerRef}\n        menuClassName={props.menuClassName}\n      >\n        {props.children}\n      </DropdownMenu>\n    </Wrapper>\n  );\n};\n\nexport default QuickActionsMenu;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/quentin/dev/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Button from '../../atoms/button/Button';\nimport MoreIcon from '../../atoms/icons/MoreIcon';\nimport DropdownElement from '../../ions/dropdown/element/DropdownElement.tsx';\nimport QuickActionsMenu from './QuickActionsMenu';\nimport '../../../utils/playgroundStyle.css';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"quick-actions-menu\"\n    }}>{`Quick Actions Menu`}</h1>\n    <p>{`Quick action menu is a specific components meant for users to quickly copy\na credential's information like login and password.\nIt is not meant to be used in an other context. If you're looking for customizable dropdown,\ncheck out the `}<a parentName=\"p\" {...{\n        \"href\": \"./src-atoms-button-button\"\n      }}>{`Dropdown Menu component`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={QuickActionsMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [isOpen, setIsOpen] = React.useState(false)\\n  const onClick = e => {\\n    e.preventDefault()\\n    setIsOpen(!isOpen)\\n  }\\n  return (\\n    <div className=\\\"playground-style\\\" style={{ height: \\'200px\\' }}>\\n      <QuickActionsMenu\\n        icon={<MoreIcon />}\\n        isOpen={isOpen}\\n        onClick={onClick}\\n        tooltipTitle=\\\"Tooltip\\\"\\n      >\\n        <DropdownElement>Copy Password</DropdownElement>\\n        <DropdownElement>Copy Login</DropdownElement>\\n      </QuickActionsMenu>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      MoreIcon,\n      DropdownElement,\n      QuickActionsMenu,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isOpen, setIsOpen] = React.useState(false);\n\n        const onClick = e => {\n          e.preventDefault();\n          setIsOpen(!isOpen);\n        };\n\n        return <div className='playground-style' style={{\n          height: '200px'\n        }}>\n        <QuickActionsMenu icon={<MoreIcon mdxType=\"MoreIcon\" />} isOpen={isOpen} onClick={onClick} tooltipTitle='Tooltip' mdxType=\"QuickActionsMenu\">\n          <DropdownElement mdxType=\"DropdownElement\">Copy Password</DropdownElement>\n          <DropdownElement mdxType=\"DropdownElement\">Copy Login</DropdownElement>\n        </QuickActionsMenu>\n      </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n","import styled from 'styled-components';\nimport { Props as IconProps } from '@ions/icon/types';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getSize = ({ size = 20 }) => `${size}px`;\nconst getColor = (propName: ColorProps = 'color') => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || props['color'] || 'inherit';\n\nconst Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getSize};\n  height: ${getSize};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')};\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor()};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)};\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n\nexport default Icon;\n","import * as React from 'react';\nimport Icon from '@ions/icon/base/Icon';\nimport { Props } from '@ions/icon/types';\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\nconst SvgWrapper: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n\nexport default SvgWrapper;\n","import styled from 'styled-components';\n\nexport const StyledText = styled.span`\n  font-family: inherit;\n  font-weight: 600;\n`;\n"],"sourceRoot":""}