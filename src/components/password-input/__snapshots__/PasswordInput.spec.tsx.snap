// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Button> Global render should render default 1`] = `
<Component>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input "
        type="password"
      />
      <span
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "lastClassName": "hoUXux",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bwzfXH hoUXux"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <RevealIcon
                    hoverColor="#0E6476"
                  >
                    <SvgWrapper
                      hoverColor="#0E6476"
                    >
                      <styled.svg
                        animated={false}
                        hoverColor="#0E6476"
                      >
                        <StyledComponent
                          animated={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "iHBoxW",
                                "rules": Array [
                                  "
  display: flex;
  width: ",
                                  [Function],
                                  ";
  height: ",
                                  [Function],
                                  ";
  cursor: ",
                                  [Function],
                                  ";
  outline: none;
  border-radius: 4px;
  fill: ",
                                  [Function],
                                  ";
  opacity: ",
                                  [Function],
                                  ";
  transition: ",
                                  [Function],
                                  ";
  &:hover {
    fill: ",
                                  [Function],
                                  ";
  }
  &:active {
    fill: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.svg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverColor="#0E6476"
                        >
                          <svg
                            className="sc-bdVaJa iHBoxW"
                            version="1.1"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              clipRule="evenodd"
                              d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                              fillRule="evenodd"
                            />
                             
                            <path
                              clipRule="evenodd"
                              d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                              fillRule="evenodd"
                            />
                          </svg>
                        </StyledComponent>
                      </styled.svg>
                    </SvgWrapper>
                  </RevealIcon>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </span>
    </div>
  </div>
</Component>
`;

exports[`<Button> Global render should render error state with feedback text 1`] = `
<Component
  feedbackText="Some feedback"
  feedbackType="error"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input error"
        type="password"
      />
      <span
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "lastClassName": "hoUXux",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bwzfXH hoUXux"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <RevealIcon
                    hoverColor="#0E6476"
                  >
                    <SvgWrapper
                      hoverColor="#0E6476"
                    >
                      <styled.svg
                        animated={false}
                        hoverColor="#0E6476"
                      >
                        <StyledComponent
                          animated={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "iHBoxW",
                                "rules": Array [
                                  "
  display: flex;
  width: ",
                                  [Function],
                                  ";
  height: ",
                                  [Function],
                                  ";
  cursor: ",
                                  [Function],
                                  ";
  outline: none;
  border-radius: 4px;
  fill: ",
                                  [Function],
                                  ";
  opacity: ",
                                  [Function],
                                  ";
  transition: ",
                                  [Function],
                                  ";
  &:hover {
    fill: ",
                                  [Function],
                                  ";
  }
  &:active {
    fill: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.svg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverColor="#0E6476"
                        >
                          <svg
                            className="sc-bdVaJa iHBoxW"
                            version="1.1"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              clipRule="evenodd"
                              d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                              fillRule="evenodd"
                            />
                             
                            <path
                              clipRule="evenodd"
                              d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                              fillRule="evenodd"
                            />
                          </svg>
                        </StyledComponent>
                      </styled.svg>
                    </SvgWrapper>
                  </RevealIcon>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </span>
    </div>
    <span
      className="feedback error"
    >
      Some feedback
    </span>
  </div>
</Component>
`;

exports[`<Button> Global render should render error state without feedback text 1`] = `
<Component
  feedbackType="error"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input error"
        type="password"
      />
      <span
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "lastClassName": "hoUXux",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bwzfXH hoUXux"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <RevealIcon
                    hoverColor="#0E6476"
                  >
                    <SvgWrapper
                      hoverColor="#0E6476"
                    >
                      <styled.svg
                        animated={false}
                        hoverColor="#0E6476"
                      >
                        <StyledComponent
                          animated={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "iHBoxW",
                                "rules": Array [
                                  "
  display: flex;
  width: ",
                                  [Function],
                                  ";
  height: ",
                                  [Function],
                                  ";
  cursor: ",
                                  [Function],
                                  ";
  outline: none;
  border-radius: 4px;
  fill: ",
                                  [Function],
                                  ";
  opacity: ",
                                  [Function],
                                  ";
  transition: ",
                                  [Function],
                                  ";
  &:hover {
    fill: ",
                                  [Function],
                                  ";
  }
  &:active {
    fill: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.svg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverColor="#0E6476"
                        >
                          <svg
                            className="sc-bdVaJa iHBoxW"
                            version="1.1"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              clipRule="evenodd"
                              d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                              fillRule="evenodd"
                            />
                             
                            <path
                              clipRule="evenodd"
                              d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                              fillRule="evenodd"
                            />
                          </svg>
                        </StyledComponent>
                      </styled.svg>
                    </SvgWrapper>
                  </RevealIcon>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </span>
    </div>
  </div>
</Component>
`;

exports[`<Button> Global render should render warning state with feedback text 1`] = `
<Component
  feedbackText="Some feedback"
  feedbackType="warning"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input warning"
        type="password"
      />
      <span
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "lastClassName": "hoUXux",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bwzfXH hoUXux"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <RevealIcon
                    hoverColor="#0E6476"
                  >
                    <SvgWrapper
                      hoverColor="#0E6476"
                    >
                      <styled.svg
                        animated={false}
                        hoverColor="#0E6476"
                      >
                        <StyledComponent
                          animated={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "iHBoxW",
                                "rules": Array [
                                  "
  display: flex;
  width: ",
                                  [Function],
                                  ";
  height: ",
                                  [Function],
                                  ";
  cursor: ",
                                  [Function],
                                  ";
  outline: none;
  border-radius: 4px;
  fill: ",
                                  [Function],
                                  ";
  opacity: ",
                                  [Function],
                                  ";
  transition: ",
                                  [Function],
                                  ";
  &:hover {
    fill: ",
                                  [Function],
                                  ";
  }
  &:active {
    fill: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.svg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverColor="#0E6476"
                        >
                          <svg
                            className="sc-bdVaJa iHBoxW"
                            version="1.1"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              clipRule="evenodd"
                              d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                              fillRule="evenodd"
                            />
                             
                            <path
                              clipRule="evenodd"
                              d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                              fillRule="evenodd"
                            />
                          </svg>
                        </StyledComponent>
                      </styled.svg>
                    </SvgWrapper>
                  </RevealIcon>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </span>
    </div>
    <span
      className="feedback warning"
    >
      Some feedback
    </span>
  </div>
</Component>
`;

exports[`<Button> Global render should render warning state without feedback text 1`] = `
<Component
  feedbackType="warning"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input warning"
        type="password"
      />
      <span
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "lastClassName": "hoUXux",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bwzfXH hoUXux"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <RevealIcon
                    hoverColor="#0E6476"
                  >
                    <SvgWrapper
                      hoverColor="#0E6476"
                    >
                      <styled.svg
                        animated={false}
                        hoverColor="#0E6476"
                      >
                        <StyledComponent
                          animated={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "iHBoxW",
                                "rules": Array [
                                  "
  display: flex;
  width: ",
                                  [Function],
                                  ";
  height: ",
                                  [Function],
                                  ";
  cursor: ",
                                  [Function],
                                  ";
  outline: none;
  border-radius: 4px;
  fill: ",
                                  [Function],
                                  ";
  opacity: ",
                                  [Function],
                                  ";
  transition: ",
                                  [Function],
                                  ";
  &:hover {
    fill: ",
                                  [Function],
                                  ";
  }
  &:active {
    fill: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.svg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverColor="#0E6476"
                        >
                          <svg
                            className="sc-bdVaJa iHBoxW"
                            version="1.1"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              clipRule="evenodd"
                              d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                              fillRule="evenodd"
                            />
                             
                            <path
                              clipRule="evenodd"
                              d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                              fillRule="evenodd"
                            />
                          </svg>
                        </StyledComponent>
                      </styled.svg>
                    </SvgWrapper>
                  </RevealIcon>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </span>
    </div>
  </div>
</Component>
`;

exports[`<Button> Global render should render with password visible 1`] = `
<Component
  onChange={[Function]}
  showPassword={true}
  value="SomeRandomPassword"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input "
        onChange={[Function]}
        type="text"
        value="SomeRandomPassword"
      />
      <span
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Hide"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "lastClassName": "hoUXux",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bwzfXH hoUXux"
                type="info"
              >
                <div
                  data-tooltip="Hide"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <HideIcon
                    hoverColor="#0E6476"
                  >
                    <SvgWrapper
                      hoverColor="#0E6476"
                    >
                      <styled.svg
                        animated={false}
                        hoverColor="#0E6476"
                      >
                        <StyledComponent
                          animated={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "iHBoxW",
                                "rules": Array [
                                  "
  display: flex;
  width: ",
                                  [Function],
                                  ";
  height: ",
                                  [Function],
                                  ";
  cursor: ",
                                  [Function],
                                  ";
  outline: none;
  border-radius: 4px;
  fill: ",
                                  [Function],
                                  ";
  opacity: ",
                                  [Function],
                                  ";
  transition: ",
                                  [Function],
                                  ";
  &:hover {
    fill: ",
                                  [Function],
                                  ";
  }
  &:active {
    fill: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.svg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverColor="#0E6476"
                        >
                          <svg
                            className="sc-bdVaJa iHBoxW"
                            version="1.1"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              clipRule="evenodd"
                              d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 9.99998C11.5 9.17156 10.8284 8.49998 10 8.49998C9.17157 8.49998 8.5 9.17156 8.5 9.99998C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6568 13 9.99998C13 8.34313 11.6569 6.99998 10 6.99998C8.34315 6.99998 7 8.34313 7 9.99998C7 11.6568 8.34315 13 10 13Z"
                              fillRule="evenodd"
                            />
                            <path
                              clipRule="evenodd"
                              d="M18 9.86558C18 9.86558 16 3.86546 10 3.86546C4 3.86546 2 9.86558 2 9.86558C2 9.86558 4 15.8655 10 15.8655C16 15.8655 18 9.86558 18 9.86558ZM3.62005 9.86557C3.65718 9.94656 3.69973 10.0359 3.74789 10.1322C3.9914 10.6192 4.36904 11.2653 4.90232 11.9052C5.95964 13.174 7.57163 14.3655 10 14.3655C12.4284 14.3655 14.0404 13.174 15.0977 11.9052C15.631 11.2653 16.0086 10.6192 16.2521 10.1322C16.3003 10.0359 16.3428 9.94655 16.38 9.86556C16.3428 9.78456 16.3003 9.6952 16.2521 9.59887C16.0086 9.11183 15.6309 8.46574 15.0977 7.82579C14.0403 6.55697 12.4283 5.36546 10 5.36546C7.57166 5.36546 5.95967 6.55697 4.90234 7.82579C4.36905 8.46574 3.99141 9.11183 3.7479 9.59887C3.69973 9.6952 3.65718 9.78457 3.62005 9.86557Z"
                              fillRule="evenodd"
                            />
                            <path
                              d="M2 16.9333L16.8492 2L17.9099 3.06667L3.06066 18L2 16.9333Z"
                            />
                          </svg>
                        </StyledComponent>
                      </styled.svg>
                    </SvgWrapper>
                  </HideIcon>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </span>
    </div>
  </div>
</Component>
`;

exports[`<Button> Global render should render with weakest password strength indicator visible 1`] = `
<Component
  passwordStrengthProps={
    Object {
      "score": 0,
    }
  }
  showPasswordStrength={true}
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input "
        type="password"
      />
      <span
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "lastClassName": "hoUXux",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bwzfXH hoUXux"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <RevealIcon
                    hoverColor="#0E6476"
                  >
                    <SvgWrapper
                      hoverColor="#0E6476"
                    >
                      <styled.svg
                        animated={false}
                        hoverColor="#0E6476"
                      >
                        <StyledComponent
                          animated={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "iHBoxW",
                                "rules": Array [
                                  "
  display: flex;
  width: ",
                                  [Function],
                                  ";
  height: ",
                                  [Function],
                                  ";
  cursor: ",
                                  [Function],
                                  ";
  outline: none;
  border-radius: 4px;
  fill: ",
                                  [Function],
                                  ";
  opacity: ",
                                  [Function],
                                  ";
  transition: ",
                                  [Function],
                                  ";
  &:hover {
    fill: ",
                                  [Function],
                                  ";
  }
  &:active {
    fill: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.svg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverColor="#0E6476"
                        >
                          <svg
                            className="sc-bdVaJa iHBoxW"
                            version="1.1"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              clipRule="evenodd"
                              d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                              fillRule="evenodd"
                            />
                             
                            <path
                              clipRule="evenodd"
                              d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                              fillRule="evenodd"
                            />
                          </svg>
                        </StyledComponent>
                      </styled.svg>
                    </SvgWrapper>
                  </RevealIcon>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </span>
    </div>
    <Component
      score={0}
    >
      <div
        className="root"
      >
        <div
          className="container"
        >
          <span
            className="passwordStrength weakest"
          />
          <span
            className="passwordStrength "
          />
          <span
            className="passwordStrength "
          />
          <span
            className="passwordStrength "
          />
          <span
            className="passwordStrength "
          />
        </div>
      </div>
    </Component>
  </div>
</Component>
`;
