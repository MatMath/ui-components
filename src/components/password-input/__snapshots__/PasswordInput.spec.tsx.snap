// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PasswordInput /> should render default 1`] = `
<Component
  hidePasswordTooltipText="Hide"
  label="Password"
  showPasswordTooltipText="Reveal"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input"
        type="password"
      />
      <button
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "leezwh",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bdVaJa leezwh"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <Component
                    hoverColor="#0E6476"
                  >
                    <Component
                      hoverColor="#0E6476"
                    >
                      <svg
                        className="svgWrapper animated"
                        style={
                          Object {
                            "--icon-active-color": "#0E353D",
                            "--icon-height": "20px",
                            "--icon-hover-color": "#0E6476",
                            "--icon-idle-color": "#0E353D",
                            "--icon-rotate": "none",
                            "--icon-width": "20px",
                          }
                        }
                        version="1.1"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          clipRule="evenodd"
                          d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                          fillRule="evenodd"
                        />
                         
                        <path
                          clipRule="evenodd"
                          d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                          fillRule="evenodd"
                        />
                      </svg>
                    </Component>
                  </Component>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </button>
    </div>
  </div>
</Component>
`;

exports[`<PasswordInput /> should render error state with feedback text 1`] = `
<Component
  feedbackText="Some feedback"
  feedbackType="error"
  hidePasswordTooltipText="Hide"
  label="Password"
  showPasswordTooltipText="Reveal"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input error"
        type="password"
      />
      <button
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "leezwh",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bdVaJa leezwh"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <Component
                    hoverColor="#0E6476"
                  >
                    <Component
                      hoverColor="#0E6476"
                    >
                      <svg
                        className="svgWrapper animated"
                        style={
                          Object {
                            "--icon-active-color": "#0E353D",
                            "--icon-height": "20px",
                            "--icon-hover-color": "#0E6476",
                            "--icon-idle-color": "#0E353D",
                            "--icon-rotate": "none",
                            "--icon-width": "20px",
                          }
                        }
                        version="1.1"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          clipRule="evenodd"
                          d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                          fillRule="evenodd"
                        />
                         
                        <path
                          clipRule="evenodd"
                          d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                          fillRule="evenodd"
                        />
                      </svg>
                    </Component>
                  </Component>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </button>
    </div>
    <span
      className="feedback error"
    >
      Some feedback
    </span>
  </div>
</Component>
`;

exports[`<PasswordInput /> should render error state without feedback text 1`] = `
<Component
  feedbackType="error"
  hidePasswordTooltipText="Hide"
  label="Password"
  showPasswordTooltipText="Reveal"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input error"
        type="password"
      />
      <button
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "leezwh",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bdVaJa leezwh"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <Component
                    hoverColor="#0E6476"
                  >
                    <Component
                      hoverColor="#0E6476"
                    >
                      <svg
                        className="svgWrapper animated"
                        style={
                          Object {
                            "--icon-active-color": "#0E353D",
                            "--icon-height": "20px",
                            "--icon-hover-color": "#0E6476",
                            "--icon-idle-color": "#0E353D",
                            "--icon-rotate": "none",
                            "--icon-width": "20px",
                          }
                        }
                        version="1.1"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          clipRule="evenodd"
                          d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                          fillRule="evenodd"
                        />
                         
                        <path
                          clipRule="evenodd"
                          d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                          fillRule="evenodd"
                        />
                      </svg>
                    </Component>
                  </Component>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </button>
    </div>
  </div>
</Component>
`;

exports[`<PasswordInput /> should render warning state with feedback text 1`] = `
<Component
  feedbackText="Some feedback"
  feedbackType="warning"
  hidePasswordTooltipText="Hide"
  label="Password"
  showPasswordTooltipText="Reveal"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input warning"
        type="password"
      />
      <button
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "leezwh",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bdVaJa leezwh"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <Component
                    hoverColor="#0E6476"
                  >
                    <Component
                      hoverColor="#0E6476"
                    >
                      <svg
                        className="svgWrapper animated"
                        style={
                          Object {
                            "--icon-active-color": "#0E353D",
                            "--icon-height": "20px",
                            "--icon-hover-color": "#0E6476",
                            "--icon-idle-color": "#0E353D",
                            "--icon-rotate": "none",
                            "--icon-width": "20px",
                          }
                        }
                        version="1.1"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          clipRule="evenodd"
                          d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                          fillRule="evenodd"
                        />
                         
                        <path
                          clipRule="evenodd"
                          d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                          fillRule="evenodd"
                        />
                      </svg>
                    </Component>
                  </Component>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </button>
    </div>
    <span
      className="feedback warning"
    >
      Some feedback
    </span>
  </div>
</Component>
`;

exports[`<PasswordInput /> should render warning state without feedback text 1`] = `
<Component
  feedbackType="warning"
  hidePasswordTooltipText="Hide"
  label="Password"
  showPasswordTooltipText="Reveal"
>
  <div
    className="root"
  >
    <span
      className="label"
    >
      Password
    </span>
    <div
      className="container"
    >
      <input
        className="input warning"
        type="password"
      />
      <button
        className="icon"
        onClick={[Function]}
      >
        <Tooltip
          placement="left"
          title="Reveal"
        >
          <styled.span
            options={Object {}}
            outOfContainer={false}
            placement="left"
            type="info"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "leezwh",
                    "rules": Array [
                      "
  > :first-child:hover {
    position: relative;
  }

  > :first-child::before {
    font-family: inherit;
    visibility: hidden;
    opacity: 0;
    font-size: 0.75rem;
    line-height: 1.25;
    display: inline-block;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px;
    background-color: ",
                      [Function],
                      ";
    content: attr(data-tooltip);
    color: ",
                      "#FFFFFF",
                      ";
    position: absolute;
    max-width: ",
                      [Function],
                      ";
    width: max-content;
    @supports (-ms-ime-align: auto) {
      min-width: 50px;
    }
    word-wrap: break-word;
    transform: translate(-50%, 0);
    text-align: center;
    z-index: 1001;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::before {
    ",
                      [Function],
                      "
  }

  > :first-child::after {
    display: inline-block;
    visibility: hidden;
    opacity: 0;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid
      ",
                      [Function],
                      ";
    position: absolute;
    content: '';
    z-index: 1002;
    transition: opacity 0.1s ease-in-out;
    ",
                      [Function],
                      "
  }

  > :first-child:hover::after {
    ",
                      [Function],
                      "
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              options={Object {}}
              outOfContainer={false}
              placement="left"
              type="info"
            >
              <span
                className="sc-bdVaJa leezwh"
                type="info"
              >
                <div
                  data-tooltip="Reveal"
                  key=".0"
                  onMouseEnter={[Function]}
                >
                  <Component
                    hoverColor="#0E6476"
                  >
                    <Component
                      hoverColor="#0E6476"
                    >
                      <svg
                        className="svgWrapper animated"
                        style={
                          Object {
                            "--icon-active-color": "#0E353D",
                            "--icon-height": "20px",
                            "--icon-hover-color": "#0E6476",
                            "--icon-idle-color": "#0E353D",
                            "--icon-rotate": "none",
                            "--icon-width": "20px",
                          }
                        }
                        version="1.1"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          clipRule="evenodd"
                          d="M10 11.5C10.8284 11.5 11.5 10.8284 11.5 10C11.5 9.17157 10.8284 8.5 10 8.5C9.17157 8.5 8.5 9.17157 8.5 10C8.5 10.8284 9.17157 11.5 10 11.5ZM10 13C11.6569 13 13 11.6569 13 10C13 8.34315 11.6569 7 10 7C8.34315 7 7 8.34315 7 10C7 11.6569 8.34315 13 10 13Z"
                          fillRule="evenodd"
                        />
                         
                        <path
                          clipRule="evenodd"
                          d="M18 10.0001C18 10.0001 16 4 10 4C4 4 2 10.0001 2 10.0001C2 10.0001 4 16 10 16C16 16 18 10.0001 18 10.0001ZM3.62005 10.0001C3.65718 10.0811 3.69973 10.1704 3.74789 10.2668C3.9914 10.7538 4.36904 11.3998 4.90232 12.0398C5.95964 13.3085 7.57163 14.5 10 14.5C12.4284 14.5 14.0404 13.3085 15.0977 12.0398C15.631 11.3998 16.0086 10.7538 16.2521 10.2668C16.3003 10.1705 16.3428 10.0811 16.38 10.0001C16.3428 9.9191 16.3003 9.82974 16.2521 9.73341C16.0086 9.24637 15.6309 8.60028 15.0977 7.96032C14.0403 6.69151 12.4283 5.5 10 5.5C7.57166 5.5 5.95967 6.69151 4.90234 7.96032C4.36905 8.60028 3.99141 9.24637 3.7479 9.73341C3.69973 9.82974 3.65718 9.9191 3.62005 10.0001Z"
                          fillRule="evenodd"
                        />
                      </svg>
                    </Component>
                  </Component>
                </div>
              </span>
            </StyledComponent>
          </styled.span>
        </Tooltip>
      </button>
    </div>
  </div>
</Component>
`;
